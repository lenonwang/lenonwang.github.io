<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Sublime Text 3设置终端命令快捷启动</title>
    <url>/2018/01/08/3%E8%AE%BE%E7%BD%AE%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E5%BF%AB%E6%8D%B7%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<blockquote>
<p>ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl  /usr/local/bin/subl</p>
</blockquote>
]]></content>
      <categories>
        <category>sublime</category>
      </categories>
      <tags>
        <tag>sublime</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>APP列表性能优化-进一步提升列表性能</title>
    <url>/2023/10/10/APP%E5%88%97%E8%A1%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E8%BF%9B%E4%B8%80%E6%AD%A5%E6%8F%90%E5%8D%87%E5%88%97%E8%A1%A8%E6%80%A7%E8%83%BD/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Android创建应用悬浮框功能代码</title>
    <url>/2018/01/08/Android%E5%88%9B%E5%BB%BA%E5%BA%94%E7%94%A8%E6%82%AC%E6%B5%AE%E6%A1%86%E5%8A%9F%E8%83%BD%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="bedee7c2327bd4a112337a6023d7bda7e73a589d15d857322d1bcda8b5c3e611"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章需要解密才可以阅读.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Android研发</category>
      </categories>
      <tags>
        <tag>float</tag>
        <tag>window</tag>
      </tags>
  </entry>
  <entry>
    <title>Android性能优化之内存优化</title>
    <url>/2018/01/04/Android%E6%80%A7%E8%83%BD%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h4 id="机制的使用Service">机制的使用Service</h4>
<p>如果应用程序当中需要使用Service来执行后台任务的话，请一定要注意只有当任务正在执行的时候才应该让Service运行起来。另外，当任务执行完之后去停止Service的时候，要小心Service停止失败导致内存泄漏的情况。所以，如果执行的简单的后台任务，推荐使用IntentService。至于为什么使用IntentService请自行查阅IntentService的Api文档，或者评论留言。</p>
<h4 id="当界面不可见时及时的释放掉内存">当界面不可见时及时的释放掉内存</h4>
<p>当用户离开我们的应用去操作其他的应用的时候，我们就应该进行内存的释放操作，以此达到提升应用性能的目的。如何知道用户离开了我们的应用界面呢？通过Activity提供的onTrimMemory()方法就可以实现。具体代码如下：</p>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTrimMemory</span><span class="params">(<span class="type">int</span> level)</span> &#123;  </span><br><span class="line">    <span class="built_in">super</span>.onTrimMemory(level);  </span><br><span class="line">    <span class="keyword">switch</span> (level) &#123;  </span><br><span class="line">    <span class="keyword">case</span> TRIM_MEMORY_UI_HIDDEN:  </span><br><span class="line">        <span class="comment">// 进行资源释放操作  </span></span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>此回调触发条件是当程序中所有的UI组件都不可见时才会触发。在此处做资源释放的优势是，程序内的页面跳转不需要重新去渲染界面UI，提升了程序的加载速度。</p>
<h5 id="内存紧张时候进行内存的回收">内存紧张时候进行内存的回收</h5>
<p>除了刚才讲的TRIM_MEMORY_UI_HIDDEN这个回调，onTrimMemory()方法还有很多种其它类型的回调，可以在手机内存降低的时候及时通知我们。我们应该根据回调中传入的级别来去决定如何释放应用程序的资源：</p>
<ol>
<li>
<p><em>TRIM_MEMORY_RUNNING_MODERATE</em>：表示应用程序正常运行，并且不会被杀掉。但是目前手机的内存已经有点低了，系统可能会开始根据LRU缓存规则来去杀死进程了。</p>
</li>
<li>
<p><em>TRIM_MEMORY_RUNNING_LOW</em>：表示应用程序正常运行，并且不会被杀掉。但是目前手机的内存已经非常低了，我们应该去释放掉一些不必要的资源以提升系统的性能，同时这也会直接影响到我们应用程序的性能。</p>
</li>
<li>
<p><em>TRIM_MEMORY_RUNNING_CRITICAL</em>：表示应用程序仍然正常运行，但是系统已经根据LRU缓存规则杀掉了大部分缓存的进程了。这个</p>
</li>
</ol>
<p>时候我们应当尽可能地去释放任何不必要的资源，不然的话系统可能会继续杀掉所有缓存中的进程，并且开始杀掉一些本来应当保持运行的进程，比如说后台运行的服务。</p>
<p>以上是当我们的应用程序正在运行时的回调，那么如果我们的程序目前是被缓存的，则会收到以下几种类型的回调：</p>
<ol>
<li>
<p><em>TRIM_MEMORY_BACKGROUND</em>：表示手机目前内存已经很低了，系统准备开始根据LRU缓存来清理进程。这个时候我们的程序在LRU缓存列表的最近位置，是不太可能被清理掉的，但这时去释放掉一些比较容易恢复的资源能够让手机的内存变得比较充足，从而让我们的程序更长时间地保留在缓存当中，这样当用户返回我们的程序时会感觉非常顺畅，而不是经历了一次重新启动的过程。</p>
</li>
<li>
<p><em>TRIM_MEMORY_MODERATE</em>：表示手机目前内存已经很低了，并且我们的程序处于LRU缓存列表的中间位置，如果手机内存还得不到进一步释放的话，那么我们的程序就有被系统杀掉的风险了。</p>
</li>
<li>
<p><em>TRIM_MEMORY_COMPLETE</em>：表示手机目前内存已经很低了，并且我们的程序处于LRU缓存列表的最边缘位置，系统会最优先考虑杀掉我们的应用程序，在这个时候应当尽可能地把一切可以释放的东西都进行释放。</p>
</li>
</ol>
<h4 id="Bitmap上的处理要谨小慎微">Bitmap上的处理要谨小慎微</h4>
<p>当我们读取一个Bitmap图片的时候，有一点一定要注意，就是千万不要去加载不需要的分辨率。在一个很小的ImageView上显示一张高分辨率的图片不会带来任何视觉上的好处，但却会占用我们相当多宝贵的内存。需要仅记的一点是，将一张图片解析成一个Bitmap对象时所占用的内存并不是这个图片在硬盘中的大小，可能一张图片只有100k你觉得它并不大，但是读取到内存当中是按照像素点来算的，比如这张图片是1500*1000像素，使用的ARGB_8888颜色类型，那么每个像素点就会占用4个字节，总内存就是1500*1000*4字节，也就是5.7M，这个数据的大小就十分的大了。（<font color = gray> Bitmap.Config ARGB_4444：每个像素占四位，即A=4，R=4，G=4，B=4，那么一个像素点占4+4+4+4=16位 Bitmap.Config ARGB_8888：每个像素占四位，即A=8，R=8，G=8，B=8，那么一个像素点占8+8+8+8=32位Bitmap.Config RGB_565：每个像素占四位，即R=5，G=6，B=5，没有透明度，那么一个像素点占5+6+5=16位 Bitmap.Config ALPHA_8：每个像素占四位，只有透明度，没有颜色。</font>）</p>
<p>解决方案：如何去压缩图片，以及更多在图片方面节省内存的技术，大家可以去参考博客：<a href="http://blog.csdn.net/guolin_blog/article/details/9316683">Android高效加载大图</a>、<a href="http://blog.csdn.net/guolin_blog/article/details/9316683">多图解决方案</a>，<a href="http://blog.csdn.net/guolin_blog/article/details/9316683">有效避免程序OOM</a> 。</p>
<h4 id="使用优化过的数据结合">使用优化过的数据结合</h4>
<p>Android API当中提供了一些优化过后的数据集合工具类，如SparseArray，SparseBooleanArray，以及LongSparseArray等，使用这些API可以让我们的程序更加高效。传统Java API中提供的HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。</p>
<h4 id="理解内存的开支情况">理解内存的开支情况</h4>
<p>我们还应当清楚我们所使用语言的内存开支和消耗情况，并且在整个软件的设计和开发当中都应该将这些信息考虑在内。可能有一些看起来无关痛痒的写法，结果却会导致很大一部分的内存开支，例如：</p>
<ul>
<li>使用枚举通常会比使用静态常量要消耗两倍以上的内存，在Android开发当中我们应当尽可能地不使用枚举。</li>
<li>任何一个Java类，包括内部类、匿名类，都要占用大概500字节的内存空间。</li>
<li>任何一个类的实例要消耗12-16字节的内存开支，因此频繁创建实例也是会一定程序上影响内存的。</li>
<li>在使用HashMap时，即使你只设置了一个基本数据类型的键，比如说int，但是也会按照对象的大小来分配内存，大概是32字节，而不是4字节。因此最好的办法就是像上面所说的一样，使用优化过的数据集合。</li>
</ul>
<h4 id="谨慎使用抽象编程">谨慎使用抽象编程</h4>
<p>许多程序员都喜欢各种使用抽象来编程，认为这是一种很好的编程习惯。当然，这一点不可否认，因为的抽象的编程方法更加面向对象，而且在代码的维护和可扩展性方面都会有所提高。但是，在Android上使用抽象会带来额外的内存开支，因为抽象的编程方法需要编写额外的代码，虽然这些代码根本执行不到，但是却也要映射到内存当中，不仅占用了更多的内存，在执行效率方面也会有所降低。当然这里我并不是提倡大家完全不使用抽象编程，而是谨慎使用抽象编程，不要认为这是一种很酷的编程方式而去肆意使用它，只在你认为有必要的情况下才去使用。</p>
<h4 id="使用ProGuard简化代码">使用ProGuard简化代码</h4>
<p>ProGuard相信大家都不会陌生，很多人都会使用这个工具来混淆代码，但是除了混淆之外，它还具有压缩和优化代码的功能。ProGuard会对我们的代码进行检索，删除一些无用的代码，并且会对类、字段、方法等进行重命名，重命名之后的类、字段和方法名都会比原来简短很多，这样的话也就对内存的占用变得更少了。</p>
<h4 id="使用多个进程">使用多个进程</h4>
<p>这个技巧其实并不是非常建议使用，但它确实是一种可以帮助我们节省和管理内存的高级技巧。如果你要使用它的话一定要谨慎使用，因为绝大多数的应用程序都不应该在多个进程当中运行的，一旦使用不当，它甚至会增加额外的内存而不是帮我们节省内存。这个技巧比较适用于那些需要在后台去完成一项独立的任务，和前台的功能是可以完全区分开的场景。</p>
<p>这里举一个比较适合去使用多进程技巧的场景，比如说我们正在做一个音乐播放器软件，其中播放音乐的功能应该是一个独立的功能，它不需要和UI方面有任何关系，即使软件已经关闭了也应该可以正常播放音乐。如果此时我们只使用一个进程，那么即使用户关闭了软件，已经完全由Service来控制音乐播放了，系统仍然会将许多UI方面的内存进行保留。在这种场景下就非常适合使用两个进程，一个用于UI展示，另一个则用于在后台持续地播放音乐。</p>
<p>想要实现多进程的功能也非常简单，只需要在AndroidManifest文件的应用程序组件中声明一个android:process属性就可以了，比如说我们希望播放音乐的Service可以运行在一个单独的进程当中，就可以这样写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;service android:name=<span class="string">&quot;.PlaybackService&quot;</span>  </span><br><span class="line">         android:process=<span class="string">&quot;:background&quot;</span> /&gt;  </span><br></pre></td></tr></table></figure>
<p>这里指定的进程名是background，你也可以将它改成任意你喜欢的名字。<font color = red>需要注意的是，进程名的前面都应该加上一个冒号，表示该进程是一个当前应用程序的私有进程。</p>
]]></content>
      <categories>
        <category>Android研发</category>
      </categories>
      <tags>
        <tag>性能</tag>
        <tag>Android研发</tag>
      </tags>
  </entry>
  <entry>
    <title>Android实现画布文字自动换行</title>
    <url>/2018/01/17/Android%E5%AE%9E%E7%8E%B0%E7%94%BB%E5%B8%83%E6%96%87%E5%AD%97%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C/</url>
    <content><![CDATA[<blockquote>
<p>StaticLayout作为新的布局用于实现画布文字自动换行的功能。StaticLayout is a Layout for text that will not be edited after it is laid out. Use DynamicLayout for text that may change.This is used by widgets to control text layout. You should not need to use this class directly unless you are implementing your own widget or custom display object, or would be tempted to call Canvas.drawText() directly.<br>
<a href="https://developer.android.com/reference/android/text/StaticLayout.html"></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Android配置构建变体</title>
    <url>/2018/01/19/Android%E9%85%8D%E7%BD%AE%E6%9E%84%E5%BB%BA%E5%8F%98%E4%BD%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="48ecbe1448ea63fdf99a0126bb95979bf5c19b4ae26fee1d4463581c1dadf574">2f95905209dd33c3b7943ae67169d1013d847bc8ccc003119949642e909e0217</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章需要解密才可以阅读.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Android研发</category>
      </categories>
  </entry>
  <entry>
    <title>Android隐式启动Activity问题总结</title>
    <url>/2018/01/11/Android%E9%9A%90%E5%BC%8F%E5%90%AF%E5%8A%A8Activity%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>最近，我在从事开发支付sdk的工程中，为了实现抽象Activity的继承使用同时又能够实现业务APP调用抽象Activity，使用隐式调用activity的实现。</p>
</blockquote>
<p>就上述实现的方式来讲很简单，但是，Activity采用了隐式调用会产生一个问题，就是使用同名Action注册的子类Activity在其他进程中同样的响应这个隐式的Intent的调用。简单的说，就是我在某一个App中使用了我的sdk，然后需要支付的时候，点击支付唤起支付列表页面，但是，其他的APP中同样也是使用了我的sdk，注册了同名action的子Activity，同样响应这个action的Intent。可以想象这样的效果，很糟糕的！因为我决定把这个Action交给业务APP自己去设置，同时自行在AndroidManifest.xml文件中进行注册，并且，注册的名字要求必须是唯一的，这样就避免了其他进程中的支付列表响应当前使用的APP中Intent的调起。</p>
<p>隐式调用跟显示调用的差别就在于一个是显示的制定了目的Activity，而一个又是没有明确的指定目的Activity，写在这里用来做提醒，希望下次使用隐式调用能够避免这个问题的发生，不要再犯这种低级的错误。错误是低级的，但是问题是巨大的，谁也不想自己的APP莫名其妙调用了其他的APP的activity是吧！</p>
]]></content>
      <categories>
        <category>Android研发</category>
      </categories>
      <tags>
        <tag>Android研发</tag>
        <tag>Intent隐式启动</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 集成 Flutter与交互</title>
    <url>/2022/10/12/Android%E9%9B%86%E6%88%90flutter%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p><img src="/uploads/andrew-liu-2nx1Z70CT8I-unsplash.jpg" alt="avatar"><br>
使用 Flutter 已经有一段时间了，开发体验还是非常好的，但是一般我们在正式使用 Flutter 的时候很少会去创建一个纯 Flutter 项目，而是需要在之前的项目中已集成的方式来编写 Flutter。这篇文章将以如何在 Android 项目中集成 Flutter 和 如何在两者之间进行交互为主要内容。</p>
<h3 id="在-Android-项目中集成-Flutter-项目">在 Android 项目中集成 Flutter 项目</h3>
<p>首先我们需要找一个 android 项目，以这个为基础来集成 Fluuter。下面来看一下具体的步骤</p>
<span id="more"></span>
<ol>
<li>
<p>创建 flutter 模块</p>
</li>
<li>
<p>在 AndroidStudio 的 Terminal 中使用如下命令</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flutter create -t module flutter_module</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>其中 my_flutter 为模块名称。该命令完成后将会在项目目录中产生一个新的文件夹 <code>flutter_module</code>或者直接使用<br>
AS 创建一个 Flutter Module也行。</p>
</li>
<li>
<p>将 两个项目放在一个文件夹下面这一步主要是为了方便管理，并且可以分开上传到 git，方便开发等。不在一个目录下也行。</p>
</li>
<li>
<p>执行 <code>flutter build aar</code><br>
打开 Flutter 模块，执行 <code>flutter build aar</code> 命令。执行完后显示如下：<br>
<a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/47ae36d4ee534434a1fa425358e550bb~tplv-k3u1fbpfcp-zoom-in-crop-mark%3A4536%3A0%3A0%3A0.image"></a></p>
</li>
<li>
<p>完成上面截图中的四项上面截图中的四个项目都需要在 android 代码中完成</p>
 <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line"><span class="comment">//...	</span></span><br><span class="line">    maven &#123; url <span class="string">&#x27;D:\\android\\project\\example\\flutter_module\\build\\host\\outputs\\repo&#x27;</span> &#125;</span><br><span class="line">    maven &#123; url <span class="string">&quot;https://storage.googleapis.com/download.flutter.io&quot;</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新项目的 repositories 都需要配置在 <code>setting.gradle</code> 中。上面中的 url 就是 fluuter_modlue 的路径了。</p>
 <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">//.....	</span></span><br><span class="line">    debugImplementation <span class="string">&#x27;com.lv.example.flutter_module:flutter_debug:1.0&#x27;</span></span><br><span class="line">    profileImplementation <span class="string">&#x27;com.lv.example.flutter_module:flutter_profile:1.0&#x27;</span></span><br><span class="line">    releaseImplementation <span class="string">&#x27;com.lv.example.flutter_module:flutter_release:1.0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">    profile &#123;</span><br><span class="line">        initWith debug</span><br><span class="line">    &#125;</span><br><span class="line">    release &#123;</span><br><span class="line">        minifyEnabled <span class="literal">false</span></span><br><span class="line">        proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android-optimize.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>同步项目同步一下项目，看有没有报错，如果有排查一下问题</p>
</li>
<li>
<p>添加 FlutterActivity<br>
在 <code>AdnroidManifest.xml</code> 中添加 <code>FlutterActivity</code></p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">    android:name=<span class="string">&quot;io.flutter.embedding.android.FlutterActivity&quot;</span> android:configChanges=<span class="string">&quot;orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode&quot;</span></span><br><span class="line">    android:hardwareAccelerated=<span class="string">&quot;true&quot;</span></span><br><span class="line">    android:windowSoftInputMode=<span class="string">&quot;adjustResize&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>跳转</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : AppCompatActivity() &#123;</span><br><span class="line">    override fun <span class="title function_">onCreate</span><span class="params">(savedInstanceState: Bundle?)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        findViewById&lt;View&gt;(R.id.start).setOnClickListener &#123;</span><br><span class="line">            startActivity(</span><br><span class="line">                FlutterActivity.createDefaultIntent(<span class="built_in">this</span>)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>效果如下<br>
<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/297fd53fcdd84e559ddaf1a4397c684f~tplv-k3u1fbpfcp-zoom-in-crop-mark%3A4536%3A0%3A0%3A0.image" alt=""></p>
</li>
</ol>
<h3 id="Flutter-和-Android-的交互">Flutter 和 Android 的交互</h3>
<h4 id="Android-调起-Flutter-页面">Android 调起 Flutter 页面</h4>
<p>在上面的代码中已经有打开 flutter 页面的代码了，如下所示：</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">startActivity(FlutterActivity.createDefaultIntent(<span class="built_in">this</span>))</span><br></pre></td></tr></table></figure>
</code></pre>
<p>不过你运行代码，就会发现这种方式启动会非常慢，下面来看一种预初始化 Flutter 的方式</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : AppCompatActivity() &#123;</span><br><span class="line"></span><br><span class="line">    override fun <span class="title function_">onCreate</span><span class="params">(savedInstanceState: Bundle?)</span> &#123;</span><br><span class="line">    ...<span class="comment">//</span></span><br><span class="line">        initFlutterEngine()   </span><br><span class="line">        findViewById&lt;View&gt;(R.id.start).setOnClickListener &#123;</span><br><span class="line">            startActivity(</span><br><span class="line">                FlutterActivity.withCachedEngine(<span class="string">&quot;main&quot;</span>).build(<span class="built_in">this</span>)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> fun <span class="title function_">initFlutterEngine</span><span class="params">()</span>: FlutterEngine &#123;</span><br><span class="line">        <span class="comment">//创建 Flutter 引擎</span></span><br><span class="line">        <span class="type">val</span> <span class="variable">flutterEngine</span> <span class="operator">=</span> FlutterEngine(<span class="built_in">this</span>)</span><br><span class="line">        <span class="comment">//指定要跳转的flutter页面</span></span><br><span class="line">        flutterEngine.navigationChannel.setInitialRoute(<span class="string">&quot;main&quot;</span>)</span><br><span class="line">        flutterEngine.dartExecutor.executeDartEntrypoint(DartExecutor.DartEntrypoint.createDefault())</span><br><span class="line">        <span class="comment">//这里做一个缓存，可以在适当的时候执行它，例如app里，在跳转前执行预加载</span></span><br><span class="line">        <span class="type">val</span> <span class="variable">flutterEngineCache</span> <span class="operator">=</span> FlutterEngineCache.getInstance();</span><br><span class="line">        flutterEngineCache.put(<span class="string">&quot;default_engine_id&quot;</span>, flutterEngine)</span><br><span class="line">        <span class="comment">//上面代码一般在跳转之前调用，这样可以使得跳转树的加快</span></span><br><span class="line">        <span class="keyword">return</span> flutterEngine</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override fun <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onDestroy()</span><br><span class="line">    <span class="comment">//退出页面的时候记得销毁</span></span><br><span class="line">    flutterEngine.destroy()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>Flutter 代码如下：</p>
<pre><code><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() =&gt; runApp(getRouter(<span class="built_in">window</span>.defaultRouteName));</span><br><span class="line"></span><br><span class="line">Widget getRouter(<span class="built_in">String</span> name) &#123;</span><br><span class="line"><span class="keyword">switch</span> (name) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;main&quot;</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> MyApp();</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">        title: <span class="string">&quot;Flutter Demo&quot;</span>,</span><br><span class="line">        theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">        ),</span><br><span class="line">        home: Container(</span><br><span class="line">        alignment: Alignment.center,</span><br><span class="line">        child: Text(<span class="string">&quot;not font page <span class="subst">$name</span>&#125;&quot;</span>),</span><br><span class="line">        ),</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line">&#125;		</span><br></pre></td></tr></table></figure>
</code></pre>
<p>效果如下所示：<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62327239750c4b3cab122bc5c421c64e~tplv-k3u1fbpfcp-zoom-in-crop-mark%3A4536%3A0%3A0%3A0.image" alt=""><br>
可以发现，跳转的速度明显加快了许多。</p>
<blockquote>
<p>需要注意的是，并不是修改了 <code>flutter_model</code> 中的代码后重新运行 android 后页面就会发生改变，在 android 项目中，flutter 的代码是一个 aar 包的形式存在的，所以 flutter 代码更新后，需要重新执行 <code>flutter build aar</code> 命令重新打一个aar 包才可以。</p>
</blockquote>
<blockquote>
<p>当然这并不是说每次都要这样操作，在正常开发过程中，直接运行 flutter_module 即可。等到需要合起来的时候执行该命令即可。</p>
</blockquote>
<blockquote>
<p>当使用缓存的 FlutterEngine 时，FlutterEngine 比任何显示它的 FlutterActivity 或 FlutterFragment 的寿命都要长。请记住，Dart 代码在您预热 FlutterEngine 后立即开始执行，并在您的 FlutterActivity/FlutterFragment 销毁后继续执行。要停止执行并清除资源，请从 FlutterEngineCache 中获取 FlutterEngine 并使用 FlutterEngine.destroy() 销毁 FlutterEngine。</p>
</blockquote>
<blockquote>
<p>最后就是，如果要测试性能，请使用 release 版本</p>
</blockquote>
<h5 id="携参跳转-Flutter">携参跳转 Flutter</h5>
<p>如果在跳转的时候需要携带参数，只需要在 route 后面拼接上参数即可，如下所示：</p>
<pre><code><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">flutterEngine.navigationChannel.setInitialRoute(<span class="string">&quot;main?&#123;\&quot;name\&quot;:\&quot;345\&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
</code></pre>
<p>这里将路由和参数使用 <code>?</code> 隔开，参数使用 json 格式进行传递。</p>
<p>在 Flutter 端通过 <code>window.defaultRouteName</code> 获取到的就是路由 + 参数了。我们只需要解析一下即可：</p>
<pre><code><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> url = <span class="built_in">window</span>.defaultRouteName;</span><br><span class="line"><span class="comment">// route名称</span></span><br><span class="line"><span class="built_in">String</span> route =</span><br><span class="line">    url.indexOf(<span class="string">&#x27;?&#x27;</span>) == <span class="number">-1</span> ? url : url.substring(<span class="number">0</span>, url.indexOf(<span class="string">&#x27;?&#x27;</span>));</span><br><span class="line"><span class="comment">// 参数Json字符串</span></span><br><span class="line"><span class="built_in">String</span> paramsJson =</span><br><span class="line">    url.indexOf(<span class="string">&#x27;?&#x27;</span>) == <span class="number">-1</span> ? <span class="string">&#x27;&#123;&#125;&#x27;</span> : url.substring(url.indexOf(<span class="string">&#x27;?&#x27;</span>) + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 解析参数</span></span><br><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; params = json.decode(paramsJson);</span><br></pre></td></tr></table></figure>
</code></pre>
<p>通过上面代码即可拿到跳转的参数</p>
<h5 id="以透明的方式启动-FlutterActivity">以透明的方式启动 FlutterActivity</h5>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">startActivity(</span><br><span class="line">    FlutterActivity.withCachedEngine(<span class="string">&quot;default_engine_id&quot;</span>)</span><br><span class="line">        .backgroundMode(FlutterActivityLaunchConfigs.BackgroundMode.transparent)</span><br><span class="line">        .build(<span class="built_in">this</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</code></pre>
<h5 id="以半透明的方式启动-FlutterActivity">以半透明的方式启动 FlutterActivity</h5>
<p>1.需要一个主题属性，用于呈现半透明效果</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;style name=<span class="string">&quot;MyTheme&quot;</span> parent=<span class="string">&quot;@style/MyParentTheme&quot;</span>&gt;</span><br><span class="line">&lt;item name=<span class="string">&quot;android:windowIsTranslucent&quot;</span>&gt;<span class="literal">true</span>&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>2.将主题应用到 FlutterActivity 中</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">android:name=<span class="string">&quot;io.flutter.embedding.android.FlutterActivity&quot;</span></span><br><span class="line">android:theme=<span class="string">&quot;@style/MyTheme&quot;</span></span><br><span class="line">android:configChanges=<span class="string">&quot;orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode&quot;</span></span><br><span class="line">android:hardwareAccelerated=<span class="string">&quot;true&quot;</span></span><br><span class="line">android:windowSoftInputMode=<span class="string">&quot;adjustResize&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>这样 FlutterActivity 即可支持半透明</p>
<h4 id="Android-嵌入-FlutterFragment">Android 嵌入 FlutterFragment</h4>
<p>在 Android 页面中显示一个 FlutterFragment，基础操作如下：</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : AppCompatActivity() &#123;</span><br><span class="line">    <span class="comment">//定义一个标记字符串来表示其中的FlutterFragment 活动的FragmentManager。这个值可以是你想要的任何值。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">val</span> <span class="variable">tagFlutterFragment</span> <span class="operator">=</span> <span class="string">&quot;flutter_fragment&quot;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> flutterFragment: FlutterFragment? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    override fun <span class="title function_">onCreate</span><span class="params">(savedInstanceState: Bundle?)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        <span class="type">val</span> <span class="variable">flutterEngine</span> <span class="operator">=</span> initFlutterEngine()</span><br><span class="line">        findViewById&lt;View&gt;(R.id.start).setOnClickListener &#123;</span><br><span class="line">            <span class="comment">//尝试找到现有的FlutterFragment，以防这不是第一次运行onCreate()</span></span><br><span class="line">            flutterFragment =</span><br><span class="line">                supportFragmentManager.findFragmentByTag(tagFlutterFragment) as 			FlutterFragment?</span><br><span class="line">            <span class="comment">//创建 FlutterFragment</span></span><br><span class="line">            <span class="keyword">if</span> (flutterFragment == <span class="literal">null</span>) flutterFragment =</span><br><span class="line">                FlutterFragment</span><br><span class="line">                    .withCachedEngine(<span class="string">&quot;default_engine_id&quot;</span>)</span><br><span class="line">                    .build()</span><br><span class="line">            <span class="comment">//加载 FlutterFragment</span></span><br><span class="line">            supportFragmentManager</span><br><span class="line">                .beginTransaction()</span><br><span class="line">                .add(R.id.layout, flutterFragment!!, tagFlutterFragment)</span><br><span class="line">                .commit()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> fun <span class="title function_">initFlutterEngine</span><span class="params">()</span>: FlutterEngine &#123;</span><br><span class="line">        <span class="comment">//创建 Flutter 引擎</span></span><br><span class="line">        <span class="type">val</span> <span class="variable">flutterEngine</span> <span class="operator">=</span> FlutterEngine(<span class="built_in">this</span>)</span><br><span class="line">        <span class="comment">//指定要跳转的flutter页面</span></span><br><span class="line">        flutterEngine.navigationChannel.setInitialRoute(<span class="string">&quot;main&quot;</span>)</span><br><span class="line">        flutterEngine.dartExecutor.executeDartEntrypoint(DartExecutor.DartEntrypoint.createDefault())</span><br><span class="line">        <span class="comment">//这里做一个缓存，可以在适当的时候执行它，例如app里，在跳转前执行预加载</span></span><br><span class="line">        <span class="type">val</span> <span class="variable">flutterEngineCache</span> <span class="operator">=</span> FlutterEngineCache.getInstance();</span><br><span class="line">        flutterEngineCache.put(<span class="string">&quot;default_engine_id&quot;</span>, flutterEngine)</span><br><span class="line">        <span class="comment">//上面代码一般在跳转之前调用，这样可以使得跳转树的加快</span></span><br><span class="line">        <span class="keyword">return</span> flutterEngine</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun <span class="title function_">onPostResume</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onPostResume()</span><br><span class="line">        flutterFragment?.onPostResume()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun <span class="title function_">onNewIntent</span><span class="params">(intent: Intent)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onNewIntent(intent)</span><br><span class="line">        flutterFragment?.onNewIntent(intent)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun <span class="title function_">onBackPressed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onBackPressed()</span><br><span class="line">        flutterFragment?.onBackPressed()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun <span class="title function_">onRequestPermissionsResult</span><span class="params">(</span></span><br><span class="line"><span class="params">        requestCode: Int,</span></span><br><span class="line"><span class="params">        permissions: Array&lt;out String&gt;,</span></span><br><span class="line"><span class="params">        grantResults: IntArray</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults)</span><br><span class="line">        flutterFragment?.onRequestPermissionsResult(requestCode, permissions, grantResults)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun <span class="title function_">onUserLeaveHint</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onUserLeaveHint()</span><br><span class="line">        flutterFragment?.onUserLeaveHint()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun <span class="title function_">onTrimMemory</span><span class="params">(level: Int)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onTrimMemory(level)</span><br><span class="line">        flutterFragment?.onTrimMemory(level)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override fun <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy()</span><br><span class="line">        flutterEngine.destroy()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>上面代码直接是已初始化引擎的方式打开 FlutterFragmetn 的，这样的好处是加载更加块。</p>
<p>需要注意的是，如果要实现 Flutter 所有预期的行为，必须将这些信号转发到 FlutterFragment 中，这也就是上面为什么重新这么多方法的原因了。</p>
<h5 id="从指定的入口点运行-FlutterFragment">从指定的入口点运行 FlutterFragment</h5>
<p>与不同的初始路由类似，不同的 <code>flutterfragment</code> 可能希望执行不同的Dart入口点。在一个典型的Flutter应用程序中，只有一个Dart入口点:main()，但你可以定义其他入口点。</p>
<p>FlutterFragment 支持为给定的Flutter体验执行所需Dart入口点的规格。要指定一个入口点，请构建FlutterFragment，如下所示:</p>
<pre><code><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">FlutterFragment.withNewEngine()</span><br><span class="line">    .dartEntrypoint(<span class="string">&quot;newMain&quot;</span>)</span><br><span class="line">    .build()</span><br></pre></td></tr></table></figure>
</code></pre>
<p>FlutterFragment 会启动一个名字为 <code>newMian</code> 的入口点。</p>
<p>flutter 端的配置如下所示：</p>
<pre><code><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp(<span class="built_in">window</span>.defaultRouteName));</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> newMain() =&gt; runApp(NewMainApp());</span><br></pre></td></tr></table></figure>
</code></pre>
<blockquote>
<p>需要注意的是，必须配置在 main.dart 文件中。</p>
</blockquote>
<blockquote>
<p>当 FlutterFragment 使用缓存时， Dart 入口点属性无效，所以指定入口后无法使用缓存。</p>
</blockquote>
<h5 id="控制-FlutterFragment-的渲染模式">控制 FlutterFragment 的渲染模式</h5>
<p>Flutter 可以使用 <code>SufaceView</code> 来渲染他的内容，也可以使用 <code>TextureView</code> 。</p>
<p>FlutterFragment 默认使用 <code>SurfaceView</code> 。它的新能明显高于 <code>TextureView</code> ，但是 <code>SufaceView</code> 不能再 Android View 层次结构中交叉， <code>SurfaceView</code> 必须是最下面的视图，或者是最上面的视图。</p>
<p>此外，在 Android N 之前的版本中， <code>SurfaceView</code> 不能使用动画，因为他们的布局渲染和 View 的层次结构的其他部分不同。</p>
<p>那么您需要使用 TextureView 而不是 SurfaceView。通过使用 RenderMode 构建 FlutterFragment 来选择 TextureView，如下所示：</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">val</span> <span class="variable">flutterFragment</span> <span class="operator">=</span> FlutterFragment.withCachedEngine(<span class="string">&quot;my_engine_id&quot;</span>)</span><br><span class="line">    .renderMode(FlutterView.RenderMode.texture)</span><br><span class="line">    .build()</span><br></pre></td></tr></table></figure>
</code></pre>
<h5 id="具有透明度的-FlutterFragment">具有透明度的 FlutterFragment</h5>
<p>默认情况下，FlutterFragment 使用 SurfaceView 呈现不透明背景。 对于任何不是由 Flutter 绘制的像素，该背景都是黑色的。出于性能原因，使用不透明背景渲染是首选渲染模式。在 Android 上具有透明度的 Flutter 渲染会对性能产生负面影响。但是，有许多设计需要在 Flutter 体验中显示透明像素，这些像素会显示到底层 Android UI。因此，Flutter 在 FlutterFragment 中支持半透明</p>
<blockquote>
<p>SurfaceView 和 TextureView 都支持透明度。但是，当 SurfaceView 被指示以透明方式呈现时，它会将自己定位在比所有其他 Android 视图更高的 z-index 上，这意味着它会出现在所有其他视图之上。这是 SurfaceView 的限制。如果在所有其他内容之上渲染您的 Flutter 体验是可以接受的，那么 FlutterFragment 的表面默认 RenderMode 就是您应该使用的 RenderMode。但是，如果您需要在 Flutter 体验的上方和下方显示 Android 视图，则必须指定的 RenderMode.texture。有</p>
</blockquote>
<p>使用方式如下：</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FlutterFragment</span> <span class="variable">flutterFragment</span> <span class="operator">=</span> FlutterFragment.withCachedEngine(<span class="string">&quot;my_engine_id&quot;</span>)</span><br><span class="line">    .transparencyMode(FlutterView.TransparencyMode.transparent)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure>
</code></pre>
<h5 id="FlutterFragment及其Activity之间的关系">FlutterFragment及其Activity之间的关系</h5>
<p>有些应用选择使用Fragments作为整个Android屏幕。在这些应用中，用Fragment来控制系统chrome是合理的，比如Android的状态栏、导航栏和方向。</p>
<p>在其他应用程序中，片段仅用于表示 UI 的一部分。 FlutterFragment 可用于实现抽屉、视频播放器或单张卡片的内部。在这些情况下，FlutterFragment 影响 Android 的系统 chrome 是不合适的，因为在同一个 Window 中还有其他 UI 片段。</p>
<p>FlutterFragment 带有一个概念，可以帮助区分 FlutterFragment 应该能够控制其宿主 Activity 的情况，以及 FlutterFragment 应该只影响其自身行为的情况。为了防止 FlutterFragment 将其 Activity 暴露给 Flutter 插件，并防止 Flutter 控制 Activity 的系统 UI，请使用 FlutterFragment 的 Builder 中的 shouldAttachEngineToActivity() 方法，如下所示：</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FlutterFragment</span> <span class="variable">flutterFragment</span> <span class="operator">=</span> FlutterFragment.withCachedEngine(<span class="string">&quot;my_engine_id&quot;</span>)</span><br><span class="line">    <span class="comment">//此FlutterFragment是否应自动附加其Activity作为其FlutterEngine的控制面。</span></span><br><span class="line">    .shouldAttachEngineToActivity(<span class="literal">false</span>)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure>
</code></pre>
<h4 id="Flutter-和-Android-通信">Flutter 和 Android 通信</h4>
<p>在进行通信之前先介绍一下 <code>Platform Channel</code> ，他是 Flutter 和原生通信的工具，有三种类型：</p>
<ul>
<li><code>BaseicMessageChannel</code> ：用于传递字符串和半结构化信息，Flutter 和平台端进行消息数据交换时可以以使用。</li>
<li><code>MethodChannel</code> ：用于传递方法调用(method invocation)，Flutter 和平台端进行直接方法调用时候可以使用</li>
<li><code>EventChannel</code> ：用户数据流 (event stream) 的通信，Flutter 和平台端的事件监听，取消等都可以使用</li>
</ul>
<p>在日常开发中最常用的也就是 <code>MethodChannel</code> 了，关于其他的两种可自行查阅网上的文章</p>
<h5 id="Android-调用-Flutter-方法">Android 调用 Flutter 方法</h5>
<pre><code><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">val methodChannel =</span><br><span class="line">    MethodChannel(flutterEngine.dartExecutor, <span class="string">&quot;com.example.AndroidWithFlutter/native&quot;</span>)</span><br></pre></td></tr></table></figure>
</code></pre>
<p>上面代码中定义了一个 <code>MtthodChannel</code> ，第一个参数是一个接口，是与 Flutter 进行通信的工具，第二个参数是 <code>name</code> ，就是 channel 的名称（这个名称需要和 Flutter 中定义的一致）。</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用 Flutter 方法</span></span><br><span class="line">methodChannel.invokeMethod(<span class="string">&quot;flutterMethod&quot;</span>,<span class="string">&quot;调用 Flutter 参数&quot;</span>,object : MethodChannel.Result &#123;</span><br><span class="line">    override fun <span class="title function_">success</span><span class="params">(result: Any?)</span> &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;---345---&gt;&quot;</span>, <span class="string">&quot;$result&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun <span class="title function_">error</span><span class="params">(errorCode: String?, errorMessage: String?, errorDetails: Any?)</span> &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;---345---&gt;&quot;</span>, <span class="string">&quot;调用Flutter失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun <span class="title function_">notImplemented</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>上面代码中调用了 Flutter 中名字为 <code>flutterMethod</code> 的方法，其中第一个参数为方法名字，第二个是参数，回调中是调用结果和是否调用成功。下面我们看一下 Flutter 中如何定义：</p>
<pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">final _channel = const MethodChannel(&quot;com.example.AndroidWithFlutter/native&quot;);</span><br><span class="line">@override</span><br><span class="line">void initState() &#123;</span><br><span class="line">super.initState();</span><br><span class="line">///监听android端的调用</span><br><span class="line">_channel.setMethodCallHandler((call) async &#123;</span><br><span class="line">    switch (call.method) &#123;</span><br><span class="line">    case &quot;flutterMethod&quot;:</span><br><span class="line">        print(&quot;参数：$&#123;call.arguments&#125;&quot;);</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    return &quot;我是 Flutter 返回值&quot;;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
<p>上面代码中监听 android 端的调用，接着根据方法名字判断是哪个方法即可。</p>
<blockquote>
<p>需要注意的是，在调用 Flutter 的时候，即使没有打开页面，也能调用其方法，这是应为已经缓存过 flutterEngine 了，flutterEngine 中会直接执行 dart 代码，所以可以直接调用。但是如果在页面跳转的时候没有使用缓存。这个时候虽然显示调用成功了，但是跳转过去是拿不到对应的参数的，因为没有使用缓存，不是同一个对象，所以不行，这里需要注意一下。</p>
</blockquote>
<h5 id="Flutter-调用-Android-方法">Flutter 调用 Android 方法</h5>
<p>flutter端代码：</p>
<pre><code><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _incrementCounter() &#123;</span><br><span class="line"><span class="comment">//调用 Android 的 AndroidMethod 方法</span></span><br><span class="line"><span class="keyword">var</span> result = _channel.invokeMapMethod(<span class="string">&quot;AndroidMethod&quot;</span>, <span class="string">&quot;调用 Android 参数&quot;</span>);</span><br><span class="line">result.then((value) =&gt; <span class="built_in">print</span>(<span class="string">&#x27;Android 返回值 :<span class="subst">$value</span>&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>android 端代码：</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">methodChannel.setMethodCallHandler &#123; call, result -&gt;</span><br><span class="line">    when (call.method) &#123;</span><br><span class="line">        <span class="string">&quot;AndroidMethod&quot;</span> -&gt; &#123;</span><br><span class="line">            result.success(mapOf(<span class="string">&quot;Android 返回值&quot;</span> to <span class="string">&quot;\&quot;我是Android\&quot;&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">            result.success(<span class="string">&quot;我是Android,没招到对应方法&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>这里需要注意的就是 flutter 调用 android 的时候限制了返回值必须为 map，这点需要注意一下；</p>
<h4 id="Flutter-跳转-Android-页面">Flutter 跳转 Android 页面</h4>
<p>flutter 跳转 android 页面实际上使用的是 <code>MethodChannel</code> ，需要跳转的时候，flutter 调用一下 android，在 android 端执行跳转的逻辑即可，如下所示：</p>
<p>flutter 端代码：</p>
<pre><code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">_incrementCounter</span>(<span class="params"></span>) &#123; </span><br><span class="line"><span class="comment">//打开原生页面</span></span><br><span class="line">_channel.<span class="title function_">invokeMapMethod</span>(<span class="string">&quot;jumpToNative&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>android 端代码：</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//监听flutter调用 android</span></span><br><span class="line">methodChannel.setMethodCallHandler &#123; call, result -&gt;</span><br><span class="line">    when (call.method) &#123;</span><br><span class="line">        <span class="string">&quot;AndroidMethod&quot;</span> -&gt; &#123;</span><br><span class="line">            result.success(mapOf(<span class="string">&quot;Android 返回值&quot;</span> to <span class="string">&quot;\&quot;我是Android\&quot;&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">&quot;jumpToNative&quot;</span> -&gt; &#123;</span><br><span class="line">            <span class="comment">//跳转登录页面</span></span><br><span class="line">            startActivity(Intent(<span class="built_in">this</span>, LoginActivity::class.java))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">            result.success(<span class="string">&quot;我是Android,没招到对应方法&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>效果图如下所示：<br>
<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03b025a180f24e2ea6fc17399cc2de93~tplv-k3u1fbpfcp-zoom-in-crop-mark%3A4536%3A0%3A0%3A0.image" alt=""></p>
<h4 id="页面返回传参的实现">页面返回传参的实现</h4>
<p>实现方式和上面的差不多，也是借助 <code>MethodChannel</code> ，在页面返回的时候使用 channel 调用一下传入对应的参数即可。</p>
<h3 id="内存使用情况">内存使用情况</h3>
<p>我们对项目使用 flutter 之后和未使用的时候做了一个内存观测，具体如下：</p>
<p>未引入 flutter module：<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92bc1aa4c4d84d0eb6b001b819ecedc8~tplv-k3u1fbpfcp-zoom-in-crop-mark%3A4536%3A0%3A0%3A0.image" alt=""><br>
引入 flutter module：</p>
<p>只启动一个缓存引擎：<a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/99b208278561409daab2458f302383e6~tplv-k3u1fbpfcp-zoom-in-crop-mark%3A4536%3A0%3A0%3A0.image"></a><br>
查看上面的图片，可以发现 未引入之前内存使用只有 <code>55Mb</code> 左右，而在初始化了 fluuter 引擎(Engine) 之后，内存瞬间到了 <code>181Mb</code> 。并且这还是初始化了单个的情况下。</p>
<p>下面看一下初始化多个会有什么影响：</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    initFlutterEngine(<span class="string">&quot;init_one&quot;</span>)</span><br><span class="line">    initFlutterEngine(<span class="string">&quot;init_two&quot;</span>)</span><br><span class="line">    initFlutterEngine(<span class="string">&quot;init_three&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> fun <span class="title function_">initFlutterEngine</span><span class="params">(id: String)</span>: FlutterEngine &#123;</span><br><span class="line">    <span class="comment">//创建 Flutter 引擎</span></span><br><span class="line">    <span class="type">val</span> <span class="variable">flutterEngine</span> <span class="operator">=</span> FlutterEngine(<span class="built_in">this</span>)</span><br><span class="line">    <span class="comment">//指定要跳转的flutter页面</span></span><br><span class="line">    flutterEngine.navigationChannel.setInitialRoute(<span class="string">&quot;main&quot;</span>)</span><br><span class="line">    flutterEngine.dartExecutor.executeDartEntrypoint(DartExecutor.DartEntrypoint.createDefault())</span><br><span class="line">    <span class="comment">//这里做一个缓存，可以在适当的时候执行它，例如app里，在跳转前执行预加载</span></span><br><span class="line">    <span class="type">val</span> <span class="variable">flutterEngineCache</span> <span class="operator">=</span> FlutterEngineCache.getInstance();</span><br><span class="line">    flutterEngineCache.put(id, flutterEngine)</span><br><span class="line">    <span class="comment">//上面代码一般在跳转之前调用，这样可以使得跳转树的加快</span></span><br><span class="line">    <span class="keyword">return</span> flutterEngine</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>代码如上所示，下面看一下结果：<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a14fe49af4c44169e5d2a07099891bf~tplv-k3u1fbpfcp-zoom-in-crop-mark%3A4536%3A0%3A0%3A0.image" alt=""><br>
可以看到，一共初始化了四个缓存，共使用了 <code>355Mb</code> 。比之前使用一个多了 <code>174Mb</code>,平均每增加一个缓存就会增加 <code>60Mb</code> 。</p>
<p>通过上面的验证，可以得出，使用了 Flutter 之后，内存确实会增加很多，但是并不会造成内存压力。</p>
<p>通增加缓存引擎的对比，发现每次增加一个缓存引擎，就会增加 <code>60Mb</code> 左右。</p>
<p><strong>总结一下：</strong></p>
<p>一般情况下使用时没有问题的，但是需要注意的是初始化引擎的时候初始化一个即可。不能每次打开页面都重新进行初始化引擎。</p>
<h3 id="项目示例">项目示例</h3>
<ul>
<li>Android端： <a href="https://github.com/lenonwang/AndroidWithFlutter">lenonwang</a></li>
<li>FlutterModule： <a href="https://github.com/lenonwang/AndroidWithFlutter_module">lenonwang</a></li>
</ul>
]]></content>
      <tags>
        <tag>Android</tag>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Git命令大全</title>
    <url>/2018/01/09/Git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<p><img src="/uploads/andrew-liu-2nx1Z70CT8I-unsplash.jpg" alt="avatar"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init                                                  <span class="comment"># 初始化本地git仓库（创建新仓库）</span></span><br><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span>                       <span class="comment"># 配置用户名</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx@xxx.com&quot;</span>              <span class="comment"># 配置邮件</span></span><br><span class="line">git config --global color.ui <span class="literal">true</span>                         <span class="comment"># git status等命令自动着色</span></span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy                    <span class="comment"># remove  proxy configuration on git</span></span><br><span class="line">git <span class="built_in">clone</span> git+ssh://git@192.168.53.168/VT.git             <span class="comment"># clone远程仓库</span></span><br><span class="line">git status                                                <span class="comment"># 查看当前版本状态（是否修改）</span></span><br><span class="line">git add xyz                                               <span class="comment"># 添加xyz文件至index</span></span><br><span class="line">git add .                                                 <span class="comment"># 增加当前子目录下所有更改过的文件至index</span></span><br><span class="line">git commit -m <span class="string">&#x27;xxx&#x27;</span>                                       <span class="comment"># 提交</span></span><br><span class="line">git commit --amend -m <span class="string">&#x27;xxx&#x27;</span>                               <span class="comment"># 合并上一次提交（用于反复修改）</span></span><br><span class="line">git commit -am <span class="string">&#x27;xxx&#x27;</span>                                      <span class="comment"># 将add和commit合为一步</span></span><br><span class="line">git <span class="built_in">rm</span> xxx                                                <span class="comment"># 删除index中的文件</span></span><br><span class="line">git <span class="built_in">rm</span> -r *                                               <span class="comment"># 递归删除</span></span><br><span class="line">git <span class="built_in">log</span>                                                   <span class="comment"># 显示提交日志</span></span><br><span class="line">git <span class="built_in">log</span> -1                                                <span class="comment"># 显示1行日志 -n为n行</span></span><br><span class="line">git <span class="built_in">log</span> -5</span><br><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span>                                            <span class="comment"># 显示提交日志及相关变动文件</span></span><br><span class="line">git <span class="built_in">log</span> -p -m</span><br><span class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818         <span class="comment"># 显示某个提交的详细内容</span></span><br><span class="line">git show dfb02                                            <span class="comment"># 可只用commitid的前几位</span></span><br><span class="line">git show HEAD                                             <span class="comment"># 显示HEAD提交日志</span></span><br><span class="line">git show HEAD^                                            <span class="comment"># 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span></span><br><span class="line">git tag                                                   <span class="comment"># 显示已存在的tag</span></span><br><span class="line">git tag -a v2.0 -m <span class="string">&#x27;xxx&#x27;</span>                                  <span class="comment"># 增加v2.0的tag</span></span><br><span class="line">git show v2.0                                             <span class="comment"># 显示v2.0的日志及详细内容</span></span><br><span class="line">git <span class="built_in">log</span> v2.0                                              <span class="comment"># 显示v2.0的日志</span></span><br><span class="line">git diff                                                  <span class="comment"># 显示所有未添加至index的变更</span></span><br><span class="line">git diff --cached                                         <span class="comment"># 显示所有已添加index但还未commit的变更</span></span><br><span class="line">git diff HEAD^                                            <span class="comment"># 比较与上一个版本的差异</span></span><br><span class="line">git diff HEAD -- ./lib                                    <span class="comment"># 比较与HEAD版本lib目录的差异</span></span><br><span class="line">git diff origin/master..master                            <span class="comment"># 比较远程分支master上有本地分支master上没有的</span></span><br><span class="line">git diff origin/master..master --<span class="built_in">stat</span>                     <span class="comment"># 只显示差异的文件，不显示具体内容</span></span><br><span class="line">git remote add origin git+ssh://git@192.168.53.168/VT.git <span class="comment"># 增加远程定义（用于push/pull/fetch）</span></span><br><span class="line">git branch                                                <span class="comment"># 显示本地分支</span></span><br><span class="line">git branch --contains 50089                               <span class="comment"># 显示包含提交50089的分支</span></span><br><span class="line">git branch -a                                             <span class="comment"># 显示所有分支</span></span><br><span class="line">git branch -r                                             <span class="comment"># 显示所有原创分支</span></span><br><span class="line">git branch --merged                                       <span class="comment"># 显示所有已合并到当前分支的分支</span></span><br><span class="line">git branch --no-merged                                    <span class="comment"># 显示所有未合并到当前分支的分支</span></span><br><span class="line">git branch -m master master_copy                          <span class="comment"># 本地分支改名</span></span><br><span class="line">git checkout -b master_copy                               <span class="comment"># 从当前分支创建新分支master_copy并检出</span></span><br><span class="line">git checkout -b master master_copy                        <span class="comment"># 上面的完整版</span></span><br><span class="line">git checkout features/performance                         <span class="comment"># 检出已存在的features/performance分支</span></span><br><span class="line">git checkout --track hotfixes/BJVEP933                    <span class="comment"># 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span></span><br><span class="line">git checkout v2.0                                         <span class="comment"># 检出版本v2.0</span></span><br><span class="line">git checkout -b devel origin/develop                      <span class="comment"># 从远程分支develop创建新本地分支devel并检出</span></span><br><span class="line">git checkout -- README                                    <span class="comment"># 检出head版本的README文件（可用于修改错误回退）</span></span><br><span class="line">git merge origin/master                                   <span class="comment"># 合并远程master分支至当前分支</span></span><br><span class="line">git cherry-pick ff44785404a8e                             <span class="comment"># 合并提交ff44785404a8e的修改</span></span><br><span class="line">git push origin master                                    <span class="comment"># 将当前分支push到远程master分支</span></span><br><span class="line">git push origin :hotfixes/BJVEP933                        <span class="comment"># 删除远程仓库的hotfixes/BJVEP933分支</span></span><br><span class="line">git push --tags                                           <span class="comment"># 把所有tag推送到远程仓库</span></span><br><span class="line">git fetch                                                 <span class="comment"># 获取所有远程分支（不更新本地分支，另需merge）</span></span><br><span class="line">git fetch --prune                                         <span class="comment"># 获取所有原创分支并清除服务器上已删掉的分支</span></span><br><span class="line">git pull origin master                                    <span class="comment"># 获取远程分支master并merge到当前分支</span></span><br><span class="line">git <span class="built_in">mv</span> README README2                                     <span class="comment"># 重命名文件README为README2</span></span><br><span class="line">git reset --hard HEAD                                     <span class="comment"># 将当前版本重置为HEAD（通常用于merge失败回退）</span></span><br><span class="line">git rebase</span><br><span class="line">git branch -d hotfixes/BJVEP933                           <span class="comment"># 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span></span><br><span class="line">git branch -D hotfixes/BJVEP933                           <span class="comment"># 强制删除分支hotfixes/BJVEP933</span></span><br><span class="line">git ls-files                                              <span class="comment"># 列出git index包含的文件</span></span><br><span class="line">git show-branch                                           <span class="comment"># 图示当前分支历史</span></span><br><span class="line">git show-branch --all                                     <span class="comment"># 图示所有分支历史</span></span><br><span class="line">git whatchanged                                           <span class="comment"># 显示提交历史对应的文件修改</span></span><br><span class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       <span class="comment"># 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span></span><br><span class="line">git ls-tree HEAD                                          <span class="comment"># 内部命令：显示某个git对象</span></span><br><span class="line">git rev-parse v2.0                                        <span class="comment"># 内部命令：显示某个ref对于的SHA1 HASH</span></span><br><span class="line">git reflog                                                <span class="comment"># 显示所有提交，包括孤立节点</span></span><br><span class="line">git show HEAD@&#123;5&#125;</span><br><span class="line">git show master@&#123;yesterday&#125;                               <span class="comment"># 显示master分支昨天的状态</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=format:<span class="string">&#x27;%h %s&#x27;</span> --graph                   <span class="comment"># 图示提交日志</span></span><br><span class="line">git show HEAD~3</span><br><span class="line">git show -s --pretty=raw 2be7fcb476</span><br><span class="line">git stash                                                 <span class="comment"># 暂存当前修改，将所有至为HEAD状态</span></span><br><span class="line">git stash list                                            <span class="comment"># 查看所有暂存</span></span><br><span class="line">git stash show -p stash@&#123;0&#125;                               <span class="comment"># 参考第一次暂存</span></span><br><span class="line">git stash apply stash@&#123;0&#125;                                 <span class="comment"># 应用第一次暂存</span></span><br><span class="line">git grep <span class="string">&quot;delete from&quot;</span>                                    <span class="comment"># 文件中搜索文本“delete from”</span></span><br><span class="line">git grep -e <span class="string">&#x27;#define&#x27;</span> --and -e SORT_DIRENT</span><br><span class="line">git gc</span><br><span class="line">git fsck</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA对象-序列化反序列化</title>
    <url>/2018/01/08/JAVA%E5%AF%B9%E8%B1%A1-%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package wanglei.com;</span><br><span class="line">import java.io.ByteArrayInputStream;</span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.ObjectInputStream;</span><br><span class="line">import java.io.ObjectOutputStream;</span><br><span class="line">/**</span><br><span class="line"> * Created by wanglei on 16/9/1.</span><br><span class="line"> */</span><br><span class="line">public class ObjectUtils &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 序列化对象</span><br><span class="line">     *</span><br><span class="line">     * @param data data实现序列化</span><br><span class="line">     * @return</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; String serialize(T data) throws IOException &#123;</span><br><span class="line">        String serStr = null;</span><br><span class="line">        if (data != null) &#123;</span><br><span class="line">            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();</span><br><span class="line">            ObjectOutputStream objectOutputStream = new ObjectOutputStream(</span><br><span class="line">                    byteArrayOutputStream);</span><br><span class="line">            objectOutputStream.writeObject(data);</span><br><span class="line">            serStr = byteArrayOutputStream.toString(&quot;ISO-8859-1&quot;);</span><br><span class="line">            serStr = java.net.URLEncoder.encode(serStr, &quot;UTF-8&quot;);</span><br><span class="line">            objectOutputStream.close();</span><br><span class="line">            byteArrayOutputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">        return serStr;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 反序列化对象</span><br><span class="line">     *</span><br><span class="line">     * @param str</span><br><span class="line">     * @return</span><br><span class="line">     * @throws IOException</span><br><span class="line">     * @throws ClassNotFoundException</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; T deSerialization(String str) throws IOException,</span><br><span class="line">            ClassNotFoundException &#123;</span><br><span class="line">        T data = null;</span><br><span class="line">        if (str != null) &#123;</span><br><span class="line">            String redStr = java.net.URLDecoder.decode(str, &quot;UTF-8&quot;);</span><br><span class="line">            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(</span><br><span class="line">                    redStr.getBytes(&quot;ISO-8859-1&quot;));</span><br><span class="line">            ObjectInputStream objectInputStream = new ObjectInputStream(</span><br><span class="line">                    byteArrayInputStream);</span><br><span class="line">            data = (T) objectInputStream.readObject();</span><br><span class="line">            objectInputStream.close();</span><br><span class="line">            byteArrayInputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">        return data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript与android通信框架实现</title>
    <url>/2018/01/05/JavaScript%E4%B8%8Eandroid%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="Android端使用说明：">Android端使用说明：</h3>
<figure class="highlight java"><figcaption><span>CODE:</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> <span class="keyword">implements</span> <span class="title class_">H5CallHelper</span>.ReqListener &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        H5CallHelper.getInstance().initEventsBox().addEvent(<span class="keyword">new</span> <span class="title class_">H5CallHelper</span>.Event(<span class="string">&quot;&quot;</span>, <span class="built_in">this</span>)).startBatchRegister((WLWebView) findViewById(R.id.wv));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> H5CallHelper.Result <span class="title function_">doRequest</span><span class="params">(String type, Map&lt;String, Object&gt; params, CallBackFunction function)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>xml文件中引入WLWebView组件，代码中调用方法看截图。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;test.wanglei.com.testsdk.MainActivity&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Hello World!&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.tuhu.paysdk.bridge.WLWebView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/wv&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.tuhu.paysdk.bridge.WLWebView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>H5CallerHelper是快捷辅助类，可以用来添加单个事件，也可以批处理添加多个事件。registerOneEvent()注册一个事件；startBatchRegister()批注册多个事件。</p>
<h3 id="Javascript端使用说明：">Javascript端使用说明：</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WebViewJavascriptBridge.registerHandler(<span class="string">&quot;functionInJs&quot;</span>, function(data, responseCallback) &#123;</span><br><span class="line">       document.getElementById(<span class="string">&quot;show&quot;</span>).innerHTML = (<span class="string">&quot;data from Java: = &quot;</span> + data);</span><br><span class="line">       <span class="type">var</span> <span class="variable">responseData</span> <span class="operator">=</span> <span class="string">&quot;Javascript Says Right back aka!&quot;</span>;</span><br><span class="line">       responseCallback(responseData);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>
<p>Javascript通过WebViewJavascriptBridge注册一个方法，提供给Android端进行调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bridge.init(function(message, responseCallback) &#123;</span><br><span class="line">        console.log(<span class="string">&#x27;JS got a message&#x27;</span>, message);</span><br><span class="line">        <span class="type">var</span> <span class="variable">data</span> <span class="operator">=</span> &#123;</span><br><span class="line">            <span class="string">&#x27;Javascript Responds&#x27;</span>: <span class="string">&#x27;Wee!&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        console.log(<span class="string">&#x27;JS responding with&#x27;</span>, data);</span><br><span class="line">        responseCallback(data);</span><br><span class="line">    &#125;);    </span><br></pre></td></tr></table></figure>
<p>Javascript注册一个匿名方法，提供给Android调用。不建议使用！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WebViewJavascriptBridge.callHandler(</span><br><span class="line">        <span class="string">&#x27;submitFromWeb&#x27;</span></span><br><span class="line">        , &#123;<span class="string">&#x27;param&#x27;</span>: str1&#125;</span><br><span class="line">        , function(responseData) &#123;</span><br><span class="line">            document.getElementById(<span class="string">&quot;show&quot;</span>).innerHTML = <span class="string">&quot;send get responseData from java, data = &quot;</span> + responseData</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>
<p>Javascript通过这种方式调用Android端定义的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">window.WebViewJavascriptBridge.send(</span><br><span class="line">       data</span><br><span class="line">       , function(responseData) &#123;</span><br><span class="line">           document.getElementById(<span class="string">&quot;show&quot;</span>).innerHTML = <span class="string">&quot;repsonseData from java, data = &quot;</span> + responseData</span><br><span class="line">       &#125;</span><br><span class="line">   );</span><br></pre></td></tr></table></figure>
<p>这种方式是Javascript的匿名调用，没有方法名。不建议使用！</p>
<blockquote>
<p>注意：此framework将向window对象注入WebViewJavascriptBridge对象。所以在你的js中，在使用WebViewJavascriptBridge之前，你必须检测WebViewJavascriptBridge是否存在。如果WebViewJavascriptBridge不退出，您可以监听听WebViewJavascriptBridgeReady事件，如下代码所示：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (window.WebViewJavascriptBridge) &#123;</span><br><span class="line">        <span class="comment">//do your work here</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        document.addEventListener(</span><br><span class="line">            <span class="string">&#x27;WebViewJavascriptBridgeReady&#x27;</span></span><br><span class="line">            , function() &#123;</span><br><span class="line">                <span class="comment">//do your work here</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="literal">false</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android研发</category>
      </categories>
      <tags>
        <tag>Android研发</tag>
        <tag>通信</tag>
      </tags>
  </entry>
  <entry>
    <title>LocalBroadcastManager的使用方式</title>
    <url>/2018/01/08/LocalBroadcastManager%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>在android-support-v4.jar中引入了LocalBroadcastManager，称为局部通知管理器，这种通知的好处是安全性高，效率也高，适合局部通信，可以用来代替Handler更新UI.</p>
</blockquote>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class LocalServiceBroadcasterActivity extends Activity &#123;</span><br><span class="line">    static final String ACTION_STARTED = &quot;com.example.android.supportv4.STARTED&quot;;</span><br><span class="line">    static final String ACTION_UPDATE = &quot;com.example.android.supportv4.UPDATE&quot;;</span><br><span class="line">    static final String ACTION_STOPPED = &quot;com.example.android.supportv4.STOPPED&quot;;</span><br><span class="line"></span><br><span class="line">    LocalBroadcastManager mLocalBroadcastManager;</span><br><span class="line">    BroadcastReceiver mReceiver;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        setContentView(R.layout.main);</span><br><span class="line"></span><br><span class="line">        final TextView callbackData = (TextView) findViewById(R.id.callback);</span><br><span class="line">        callbackData.setText(&quot;No broadcast received yet&quot;);</span><br><span class="line">        mLocalBroadcastManager = LocalBroadcastManager.getInstance(this);</span><br><span class="line"></span><br><span class="line">        IntentFilter filter = new IntentFilter();</span><br><span class="line">        filter.addAction(ACTION_STARTED);</span><br><span class="line">        filter.addAction(ACTION_UPDATE);</span><br><span class="line">        filter.addAction(ACTION_STOPPED);</span><br><span class="line">        </span><br><span class="line">        mReceiver = new BroadcastReceiver() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">                if (intent.getAction().equals(ACTION_STARTED)) &#123;</span><br><span class="line">                    callbackData.setText(&quot;STARTED&quot;);</span><br><span class="line">                &#125; else if (intent.getAction().equals(ACTION_UPDATE)) &#123;</span><br><span class="line">                    callbackData.setText(&quot;Got update: &quot; + intent.getIntExtra(&quot;value&quot;, 0));</span><br><span class="line">                &#125; else if (intent.getAction().equals(ACTION_STOPPED)) &#123;</span><br><span class="line">                    callbackData.setText(&quot;STOPPED&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        mLocalBroadcastManager.registerReceiver(mReceiver, filter);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        Button button = (Button) findViewById(R.id.start);</span><br><span class="line">        button.setOnClickListener(mStartListener);</span><br><span class="line">        button = (Button) findViewById(R.id.stop);</span><br><span class="line">        button.setOnClickListener(mStopListener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        mLocalBroadcastManager.unregisterReceiver(mReceiver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private OnClickListener mStartListener = new OnClickListener() &#123;</span><br><span class="line">        public void onClick(View v) &#123;</span><br><span class="line">            startService(new Intent(LocalServiceBroadcasterActivity.this, LocalService.class));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    private OnClickListener mStopListener = new OnClickListener() &#123;</span><br><span class="line">        public void onClick(View v) &#123;</span><br><span class="line">            stopService(new Intent(LocalServiceBroadcasterActivity.this, LocalService.class));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public static class LocalService extends Service &#123;</span><br><span class="line">        LocalBroadcastManager mLocalBroadcastManager;</span><br><span class="line">        int mCurUpdate;</span><br><span class="line"></span><br><span class="line">        static final int MSG_UPDATE = 1;</span><br><span class="line"></span><br><span class="line">        Handler mHandler = new Handler() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleMessage(Message msg) &#123;</span><br><span class="line">                switch (msg.what) &#123;</span><br><span class="line">                case MSG_UPDATE: &#123;</span><br><span class="line">                    mCurUpdate++;</span><br><span class="line">                    Intent intent = new Intent(ACTION_UPDATE);</span><br><span class="line">                    intent.putExtra(&quot;value&quot;, mCurUpdate);</span><br><span class="line">                    mLocalBroadcastManager.sendBroadcast(intent);</span><br><span class="line">                    Message nmsg = mHandler.obtainMessage(MSG_UPDATE);</span><br><span class="line">                    mHandler.sendMessageDelayed(nmsg, 1000);</span><br><span class="line">                &#125;</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    super.handleMessage(msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onCreate() &#123;</span><br><span class="line">            super.onCreate();</span><br><span class="line">            mLocalBroadcastManager = LocalBroadcastManager.getInstance(this);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">            // Tell any local interested parties about the start.</span><br><span class="line">            mLocalBroadcastManager.sendBroadcast(new Intent(ACTION_STARTED));</span><br><span class="line"></span><br><span class="line">            // Prepare to do update reports.</span><br><span class="line">            mHandler.removeMessages(MSG_UPDATE);</span><br><span class="line">            Message msg = mHandler.obtainMessage(MSG_UPDATE);</span><br><span class="line">            mHandler.sendMessageDelayed(msg, 1000);</span><br><span class="line">            return ServiceCompat.START_STICKY;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onDestroy() &#123;</span><br><span class="line">            super.onDestroy();</span><br><span class="line"></span><br><span class="line">            // Tell any local interested parties about the stop.</span><br><span class="line">            mLocalBroadcastManager.sendBroadcast(new Intent(ACTION_STOPPED));</span><br><span class="line"></span><br><span class="line">            // Stop doing updates.</span><br><span class="line">            mHandler.removeMessages(MSG_UPDATE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public IBinder onBind(Intent intent) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android研发</category>
      </categories>
      <tags>
        <tag>Android研发</tag>
        <tag>LocalBroadcastManager</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac m1芯片 安装homebrew</title>
    <url>/2023/04/18/Mac-m1%E8%8A%AF%E7%89%87-%E5%AE%89%E8%A3%85homebrew/</url>
    <content><![CDATA[<blockquote>
<p>本文简单介绍了M1芯片Mac上安装Homebrew的方法，同时建议小伙伴结合下面文章一起阅读并安装。</p>
</blockquote>
<h4 id="安装-ARM-版-Homebrew">安装 ARM 版 Homebrew</h4>
<p>ARM版Homebrew需要安装在/opt/homebrew路径下，早期的时候需要手动创建目录执行命令，目前使用最新脚本不需要手动操作。</p>
<p>直接执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/bin/bash -c &quot;$(curl -fsSL https://gitee.com/ineo6/homebrew-install/raw/master/install.sh)&quot;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>然后还需设置环境变量，具体操作步骤如下，一定要仔细阅读。</p>
<p>PS: 终端类型根据执行命令echo $SHELL显示的结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/bin/bash =&gt; bash =&gt; .bash_profile</span><br><span class="line">/bin/zsh =&gt; zsh =&gt; .zprofile</span><br></pre></td></tr></table></figure>
<p>如果遇到环境变量无效问题，建议回过头来查看终端类型，再做正确的设置。</p>
<p>从macOS Catalina(10.15.x) 版开始，Mac使用zsh作为默认Shell，使用.zprofile，所以对应命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27; &gt;&gt; ~/.zprofile</span><br><span class="line">eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;</span><br></pre></td></tr></table></figure>
<p>如果是macOS Mojave 及更低版本，并且没有自己配置过zsh，使用.bash_profile：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27; &gt;&gt; ~/.bash_profile</span><br><span class="line">eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;</span><br></pre></td></tr></table></figure>
<p>扩展阅读：<a href="https://link.zhihu.com/?target=https%3A//support.apple.com/zh-cn/HT208050">在 Mac 上将 zsh 用作默认 Shell</a></p>
<h4 id="安装-X86-版-Homebrew">安装 X86 版 Homebrew</h4>
<p>因为目前很多软件包没有支持ARM架构，我们也可以考虑使用x86版的Homebrew。</p>
<p>在命令前面添加arch -x86_64，就可以按X86模式执行该命令，比如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">arch -x86_64 /bin/bash -c &quot;$(curl -fsSL https://gitee.com/ineo6/homebrew-install/raw/master/install.sh)&quot;</span><br></pre></td></tr></table></figure>
<h4 id="多版本共存">多版本共存</h4>
<p>如果你同时安装了ARM和X86两个版本，那你需要设置别名，把命令区分开。</p>
<p>同样是.zprofile或者.bash_profile里面添加：</p>
<p>至于操作哪个文件，请参考前文关于终端类型的描述，下文如有类似文字，保持一样的操作。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias abrew=&#x27;arch -arm64 /opt/homebrew/bin/brew&#x27;</span><br><span class="line">alias ibrew=&#x27;arch -x86_64 /usr/local/bin/brew&#x27;</span><br></pre></td></tr></table></figure>
<p>abrew、ibrew可以根据你的喜好自定义。</p>
<p>然后再执行source ~/.zprofile或source ~/.bash_profile命令更新文件。</p>
<h4 id="设置镜像">设置镜像</h4>
<blockquote>
<p>注意：本文中的安装脚本会设置中科大源镜像，如果你也想设置cask和bottles的镜像，请按下面注释部分选择执行代码。</p>
</blockquote>
<p>更详细的教程可以参考前面「mac下镜像飞速安装Homebrew教程」</p>
<p>执行时根据实际情况修改&quot;$(brew --repo)&quot;代码中的brew。</p>
<p>意思是如果你只是使用一个版本Homebrew，直接执行命令即可，如果你想多个版本共存或者使用了别名，就把brew关键字替换为别名名称，如前面的abrew、ibrew。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">brew</span></span><br><span class="line">git -C &quot;$(brew --repo)&quot; remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">core</span></span><br><span class="line">git -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cask</span></span><br><span class="line">git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bottles <span class="keyword">for</span> zsh 和下面2选1</span></span><br><span class="line">echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles/bottles&#x27; &gt;&gt; ~/.zprofile</span><br><span class="line">source ~/.zprofile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bottles <span class="keyword">for</span> bash 和上面2选1</span></span><br><span class="line">echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles/bottles&#x27; &gt;&gt; ~/.bash_profile</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>具体镜像设置参考 <a href="https://zhuanlan.zhihu.com/p/90508170">mac下镜像飞速安装Homebrew教程</a> “设置镜像”一节。</p>
]]></content>
      <tags>
        <tag>homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title>ORM映射的利弊以及对DB优化的影响</title>
    <url>/2018/01/08/ORM%E6%98%A0%E5%B0%84%E7%9A%84%E5%88%A9%E5%BC%8A%E4%BB%A5%E5%8F%8A%E5%AF%B9DB%E4%BC%98%E5%8C%96%E7%9A%84%E5%BD%B1%E5%93%8D/</url>
    <content><![CDATA[<p>首先简单的介绍下ORM关系对象映射的概念。虽然NOSQL现在在迅速崛起，但大多数人仍然在使用稳定的关系型数据库，我们将数据组织成记录存储在关系数据库中，每一行代表一条记录。现代编程中，面向对象技术应用已经非常广泛，关系型数据库的数据组织形式与面向对象的数据组织形式存在根本上的差异。ORM的任务就是将关系型数据库中的数据通过ORM层映射为对象，使之能够应用于面向对象程序，方便编程。</p>
<p>它确实为大多数程序员提供了便利：<br>
1、程序员不需要再动手写SQL语句，或者说大部分情况下不需要动手写，只需要调用一系列函数即可完成数据库CURD操作。<br>
2、对不同数据库管理系统的连接以及操作进行了抽象，程序员完全可以不考虑使用的是什么数据库以及数据库的版本。总之，在中小型的项目开发中，它的确为我们带来了高效的开发效率。</p>
<span id="more"></span>
<p>以上即是它的优点，下面进入正题，即ORM的弊端以及它对数据库优化的影响。缺点：<br>
1、对于复杂的SQL有心无力。<br>
2.、无法完全屏蔽数据库底层细节（这也将是下面讨论的），开发人员仍然要熟悉数据库底层操作。<br>
3、关系-对象映射的实现是以性能为代价，方便了开发，牺牲了效率。<br>
4、多余的工作：大多数ORM框架为了达到屏蔽某些细节问题或者对数据库进行抽象，做了很多额外的工作，而这些工作对于大多数人来说是不需要的。比如，TP的ORM为防止SQL注入，做了很多类似强制类型转换的工作。这样做不仅仅降低了性能，同时也改变了数据本身的意义，对数据造成了污染。</p>
<p>ORM对数据库优化的影响。<br>
ORM由于其屏蔽了数据库的CURD细节，程序员大多数情况下不需要再编写SQL语句，在一个小型的网站中，这样基本是没有什么问题的。即使效率低下，如今的硬件水平也可以弥补软件本身的性能问题。但如果在大型项目中盲目的使用ORM，定会造成性能的低下。原因如下：<br>
1、上面关于ORM缺点已经提到了关于性能的两点问题。<br>
2、数据库优化问题。</p>
<p>我将会重点解释数据库优化这个影响。大型项目中，数据库关系、索引结构等都是经过严格控制的。程序员编写的SQL语句直接影响到数据库的执行效率（通过影响SQL执行计划），有经验的程序员可以自己动手写出高效的SQL语句，但毫无经验的程序员可能会使用ORM调用先关函数执行数据库操作，或许他能够获得好的执行计划，但我们不能将效率交给上帝来决定。问题出现了， 根据上面的说法，我们是否需要完全自己动手写出SQL语句呢？我觉得在性能要求较高的情景中，应该是这样的。ORM虽然屏蔽了SQL语句，提高了开发效率，同样的，它也屏蔽了SQL优化的细节。如果大部分的SQL语句是自己动手写出来的，这时候ORM框架本身也不在有什么值得我们依赖的优势了。我们既然要自己动手写出SQL语句，那么就可以自己动手写出关系-对象映射的简单框架。同样可以实现关系型数据库与面向对象编程的连接。</p>
]]></content>
      <categories>
        <category>Android研发</category>
      </categories>
      <tags>
        <tag>ORM</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Pos项目计划书</title>
    <url>/2018/01/10/Pos%E9%A1%B9%E7%9B%AE%E8%AE%A1%E5%88%92%E4%B9%A6/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="659bfedb0d5e3d25965840b100bf907ac2e8fb20a673929a1c3d853526b8fce0">2f95905209dd33c3b7943ae67169d10152621e2b6a236ea1596f7735e125cecb414c22fecf552cc9e9fa8afbc141fd24d8816c0cd6a0734d941ef221f34fb697d434cc118f5e43fbf4cf223eaf7fdb08bd9265bf65fba2b288d525eaa19957000c825f870d83a044ab89b094f79d335d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章需要解密才可以阅读.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Android研发</category>
      </categories>
  </entry>
  <entry>
    <title>Staruml安装与破解，纯净方法(Mac版)</title>
    <url>/2023/12/29/StarXm%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<p><img src="/uploads/andrew-liu-2nx1Z70CT8I-unsplash.jpg" alt="avatar"></p>
<h5 id="一、从官方网站下载，网址：http-staruml-io-或者直接使用brew进行下载安装">一、从官方网站下载，网址：<a href="https://staruml.io/?q=the">http://staruml.io/</a> 或者直接使用brew进行下载安装</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install --cask staruml</span><br></pre></td></tr></table></figure>
<h5 id="二、安装npm">二、安装npm</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install npm</span><br></pre></td></tr></table></figure>
<p>注意：如果出现“Error: Calling fails_with :gcc_4_0 is disabled! There is no replacement.</p>
<p>Please report this to the homebrew/core tap:<br>
/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/node.rb:32”类似的问题，</p>
<p>说明需要科学上网。</p>
<h5 id="三、安装asar工具">三、安装asar工具</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g asar</span><br></pre></td></tr></table></figure>
<h5 id="四、进行反编译打包操作">四、进行反编译打包操作</h5>
<ol>
<li>进入StartUML的resources文件路径，在终端输入：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /Applications/StarUML.app/Contents/Resources/</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>解包app文件夹内容</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">asar extract app.asar app</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>打开license-manager.js 文件，在终端输入：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open app/src/engine/license-manager.js</span><br></pre></td></tr></table></figure>
<p>找到第125行的checkLicenseValidity函数，并执行如下修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checkLicenseValidity () &#123; </span><br><span class="line">    this.validate().then(() =&gt; &#123; setStatus(this, true) &#125;, () =&gt; &#123; setStatus(this, true) &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>重新打包app</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">asar pack app app.asar</span><br></pre></td></tr></table></figure>
<h5 id="四、检查是否成功">四、检查是否成功</h5>
<p><img src="../uploads/20210513175842458.png" alt=""><br>
弹出<br>
<img src="../uploads/20210513175851387.png" alt=""></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>StarXml</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>ViewModel原理分析</title>
    <url>/2023/10/03/ViewModel%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p><img src="/uploads/andrew-liu-2nx1Z70CT8I-unsplash.jpg" alt="avatar"></p>
<h2 id="ViewModel是什么">ViewModel是什么</h2>
<p>viewModel是google官方提供给Android进行数据存储的组件，包含在JetPack工具包中。<br>
viewModel在页面因为“配置变更”发生改变时依然存在。</p>
<blockquote>
<p>配置变更包括：横竖屏切换，分辨率的改变，权限的变更，系统字体样式的改变等等。</p>
</blockquote>
<h2 id="viewModel的用法">viewModel的用法</h2>
<ul>
<li>常规用法，保存数据，在页面因为配置变更销毁重新构建时，viewModel能够保证数据依然存在，实质是viewModel实例的重用，很多的作者在博客都是说<br>
viewModel的数据的重用，这里实质是不严谨的，容易产生误导。</li>
<li>进阶用法 这个时候就不论是配置变更还是电量过低，内存不足等系统问题导致的页面被回收重建，都可以保证数据的复用，即便viewModel此时不是同一个实例。</li>
<li>进阶用法在页面发生正常的销毁的时候，数据还是会被清空的。</li>
<li>进阶用法依赖savedState组件。</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">api <span class="string">&#x27;androidx.lifecycle:lifecycle-viewmodel-savedstate;2.2.0&#x27;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BViewModel</span>(<span class="keyword">val</span> savedStateHandle: SavedStateHandle) : ViewModel() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> KEY_HOME_PAGE_DATA = <span class="string">&quot;key_home_page_data&quot;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> liveData = MutableLiveData&lt;List&lt;GoodsModel&gt;&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">loadInitData</span><span class="params">()</span></span>: LiveData&lt;List&lt;GoodsModel&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (liveData.value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//1.from memory</span></span><br><span class="line">            <span class="keyword">val</span> memoryData = savedStateHandle.<span class="keyword">get</span>&lt;List&lt;GoodsModel&gt;&gt;(KEY_HOME_PAGE_DATA)</span><br><span class="line">            liveData.postValue(memoryData)</span><br><span class="line">            <span class="keyword">return</span> liveData</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.from remote repo</span></span><br><span class="line">            <span class="keyword">val</span> remoteData = fetchDataFromRemote()</span><br><span class="line">            savedStateHandle.<span class="keyword">set</span>(KEY_HOME_PAGE_DATA, remoteData)</span><br><span class="line">            liveData.postValue(remoteData)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> liveData</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">fetchDataFromRemote</span><span class="params">()</span></span>: List&lt;GoodsModel&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> mutableListOf()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JetPack</category>
      </categories>
      <tags>
        <tag>“ViewModel”</tag>
        <tag>JetPack</tag>
      </tags>
  </entry>
  <entry>
    <title>Android MPos参数和结果汇总</title>
    <url>/2018/03/01/androidpos/</url>
    <content><![CDATA[<h3 id="易POS">易POS</h3>
<h4 id="1、判断条件">1、判断条件</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&quot;success&quot;</span>.equals(payStatus) || (<span class="string">&quot;1&quot;</span>.equals(payStatus) &amp;&amp; (<span class="string">&quot;支付成功&quot;</span>.equals(orderState) || <span class="string">&quot;交易成功&quot;</span>.equals(orderState)))) &#123;</span><br><span class="line">            <span class="comment">//支付成功</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">//支付失败</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="2、参数">2、参数</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PosParamsYI</span> &#123;</span><br><span class="line">	String posType;</span><br><span class="line">    String orderNo;</span><br><span class="line">    String sourcePlatform;<span class="comment">//android</span></span><br><span class="line">	result:&#123;</span><br><span class="line">		String payStatus;</span><br><span class="line">		String orderState;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPosType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> posType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getResultType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> resultType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPosType</span><span class="params">(String posType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.posType = posType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResultType</span><span class="params">(String resultType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resultType = resultType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="通联支付">通联支付</h3>
<h4 id="1、判断条件-2">1、判断条件</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> serverReturnCode.equals(<span class="string">&quot;00&quot;</span>) &#123;</span><br><span class="line">	=&gt; 交易成功</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> serverReturnCode == <span class="literal">null</span></span><br><span class="line">    &#123; </span><br><span class="line">        =&gt;交易失败 </span><br><span class="line">	&#125; </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;   <span class="keyword">if</span>(result==<span class="literal">null</span>||result字段不存在)&#123;</span><br><span class="line">        =&gt;交易失败，冲正失败</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> serverReturnCode.equals(<span class="string">&quot;10&quot;</span>) &#123;</span><br><span class="line">		=&gt; 交易失败, 已冲正</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> serverReturnCode.equals(<span class="string">&quot;50&quot;</span>) &#123;</span><br><span class="line">		=&gt; 交易异常</span><br><span class="line">	    &#125; <span class="keyword">else</span> <span class="keyword">if</span> serverReturnCode.equals(<span class="string">&quot;20&quot;</span>)&#123;</span><br><span class="line">		=&gt; 交易撤销</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> serverReturnCode.equals(<span class="string">&quot;13&quot;</span>)&#123;</span><br><span class="line">        =&gt;无效的金额</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2、参数-2">2、参数</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">param = &#123;</span><br><span class="line">	<span class="string">&quot;posType&quot;</span>: <span class="string">&quot;tonglian&quot;</span></span><br><span class="line">    <span class="string">&quot;orderNo&quot;</span>:<span class="string">&quot;121212111&quot;</span></span><br><span class="line">    <span class="string">&quot;sourcePlatform&quot;</span>:<span class="string">&quot;android&quot;</span></span><br><span class="line">	<span class="string">&quot;result&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;returnCode&quot;</span>: <span class="string">&quot;00&quot;</span></span><br><span class="line">		<span class="string">&quot;tradeTime&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">		<span class="string">&quot;resultDescription&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="商赢支付">商赢支付</h3>
<h4 id="1、判断条件-3">1、判断条件</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> code == <span class="number">0</span> &#123;</span><br><span class="line">	=&gt; 扣款成功需签名</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> code == <span class="number">1</span> &#123;</span><br><span class="line">	=&gt; 签名上传成功，交易成功</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> code == <span class="number">2</span> &#123;</span><br><span class="line">	=&gt; 签名上传失败，提示用户，交易视为成功</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> code == <span class="number">4</span> &#123;	<span class="comment">// 交易失败</span></span><br><span class="line">		<span class="keyword">if</span> msgCode 包含 <span class="string">&quot;0F&quot;</span> &#123;</span><br><span class="line">			=&gt; 需要结算</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!resCode.equals(<span class="string">&quot;00&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">			 <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(isNeedAutoVOID)&#123;</span><br><span class="line">				    <span class="comment">//需要充正处理</span></span><br><span class="line">             &#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> code == <span class="number">5</span> &#123;</span><br><span class="line">	=&gt; 流水结算失败</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> code ==<span class="number">6</span>&#123;</span><br><span class="line">    =&gt; 流水结算成功</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> code ==<span class="number">7</span>&#123;</span><br><span class="line">    =&gt; 冲正成功</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> code ==<span class="number">8</span>&#123;</span><br><span class="line">    =&gt; 冲正失败</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2、参数-3">2、参数</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">param = &#123;</span><br><span class="line">	<span class="string">&quot;posType&quot;</span>: <span class="string">&quot;shangying&quot;</span></span><br><span class="line">	 <span class="string">&quot;orderNo&quot;</span>:<span class="string">&quot;121212111&quot;</span></span><br><span class="line">    <span class="string">&quot;sourcePlatform&quot;</span>:<span class="string">&quot;android&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;result&quot;</span>: &#123;<span class="comment">// TradeResult</span></span><br><span class="line">		<span class="string">&quot;code&quot;</span>: <span class="number">0</span>	<span class="comment">// 自定义字段：0</span></span><br><span class="line">		<span class="string">&quot;resCode&quot;</span>: <span class="string">&quot;00&quot;</span> <span class="comment">// 交易返回码</span></span><br><span class="line">		<span class="string">&quot;isLogined&quot;</span>: <span class="number">0</span>	<span class="comment">// 0 - false </span></span><br><span class="line">		<span class="string">&quot;isNeedAutoVOID&quot;</span>: <span class="number">0</span> <span class="comment">// 0 - false</span></span><br><span class="line">		<span class="string">&quot;tradeinfo&quot;</span>: <span class="string">&quot;....&quot;</span>	<span class="comment">// 交易信息</span></span><br><span class="line">		<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;...&quot;</span></span><br><span class="line">		<span class="string">&quot;msgCode&quot;</span>: <span class="string">&quot;00&quot;</span></span><br><span class="line">		<span class="string">&quot;sessionid&quot;</span>: <span class="string">&quot;&quot;</span><span class="comment">//nullable</span></span><br><span class="line">		... (其他交易信息)</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android研发</category>
      </categories>
      <tags>
        <tag>Android研发</tag>
        <tag>文档</tag>
        <tag>pos</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter构建</title>
    <url>/2018/10/31/flutter%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<p>​										<strong>flutter构建</strong></p>
<p>1、组件的构建是需要使用state来实现的，而flutter的state实现又需要去build。组件是继承自stateFullwidget或者是statelesswidget类的；而state的实现则是需要继承自state<subClass-wediget>。最终可变状态的widget组件的生成是根绝属性state来生成。</p>
<p>2、在flutter的世界里，一切皆为widget。一个应用的启动也是从main函数开始启动的。书写的格式为。void main()=&gt;runApp(启动的任意组件)</p>
]]></content>
      <categories>
        <category>Android研发</category>
      </categories>
  </entry>
  <entry>
    <title>getDimension、getDimensionPixelOffset、getDimensionPixelSize三者的区别</title>
    <url>/2023/09/15/getDimension%E3%80%81getDimensionPixelOffset%E3%80%81getDimensionPixelSize%E4%B8%89%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p><img src="/uploads/andrew-liu-2nx1Z70CT8I-unsplash.jpg" alt="avatar"></p>
<h1>getDimension、getDimensionPixelOffset、getDimensionPixelSize三者的区别</h1>
<p>对于这三者的理解，就从功能上来讲，三者的功能上是没什么区别的。他们的功能都是获取attr.xml文件中的dp尺寸后以px的形式进行展示；不同的是，getDimension的获取值是浮点数，保留了最高的精度，而getDimensionPixelOffset直接舍弃了小数位后面的数值，而getDimensionPixelSize则是直接将数值尽心了四舍五入的运算方式。</p>
<p>从上面的比较可以看出，getDimension是保留了最精确的精度的，但是，日常的开发，我们如果不知道具体用哪个，其实用哪个都是一样的，因为具体也不差那么一丢丢的精度，当然如果你跟我一样对数值有精确度的强迫症要求，那么我建议大家直接使用精确度最高的getDimension的方式来获取数值，这种方式获取的精确度是最高的，也是最为准确的。</p>
<p>本篇文章完全是给我本人作为记录的，具体的测试代码我就不做展示了，大家记住这个知识点就行了，谢谢大家的欣赏，如果有疑问大家不妨进行测试下，这样我相信大家会获取更好的结果。也能够加深大家对这个知识点的知识程度，你们说呢？</p>
]]></content>
      <categories>
        <category>Android研发</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Git commit提交前缀</title>
    <url>/2023/10/03/git%E6%8F%90%E4%BA%A4%E5%89%8D%E7%BC%80/</url>
    <content><![CDATA[<p><img src="/uploads/andrew-liu-2nx1Z70CT8I-unsplash.jpg" alt="avatar"></p>
<p>feat: 新功能（feature）</p>
<p>fix: 修补bug</p>
<p>docs: 文档（documentation）</p>
<p>style: 格式（不影响代码运行的变动）</p>
<p>refactor: 重构（即不是新增功能，也不是修改bug的代码变动）</p>
<p>chore: 构建过程或辅助工具的变动</p>
<p>revert: 撤销，版本回退</p>
<p>perf: 性能优化</p>
<p>test：测试</p>
<p>improvement: 改进<br>
————————————————</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>git</tag>
        <tag>研发</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建静态博客</title>
    <url>/2023/04/18/hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<p>本文详细记录一下本站的建立过程，以便查阅。本文的运行环境：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">node</span>: v16<span class="number">.13</span><span class="number">.0</span></span><br><span class="line"><span class="attr">npm</span>: <span class="number">8.1</span><span class="number">.4</span></span><br><span class="line"><span class="attr">hexo</span>: <span class="number">5.4</span><span class="number">.0</span></span><br><span class="line">hexo-<span class="attr">cli</span>: <span class="number">4.3</span><span class="number">.0</span></span><br><span class="line"><span class="title class_">NexT</span>: <span class="number">8.8</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>
<h4 id="准备工作">准备工作</h4>
<p>准备工作主要参考了 <a href="https://hexo.io/zh-cn/docs/">Hexo 官方文档</a>。</p>
<h4 id="安装-Git-与-Node-js">安装 Git 与 Node.js</h4>
<span id="more"></span>
<p>在 Mac 上最方便的方法当然是通过 <a href="https://brew.sh/">Homebrew</a>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，可能在安装之前需要先安装 Command Line Tools for Xcode。直接在终端输入 xcode-select --install 安装。</p>
</blockquote>
<p>安装好 Homebrew 后，直接使用以下命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">brew install git</span><br><span class="line">brew install node</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在安装以上两个依赖之前，可以先运行 brew update 来更新 Homebrew。此外，还可以运行 brew doctor 检查一下有没有什么冲突，可以及时处理。也可以把以下语句加入你的.bash_profile 或者.zshrc，取决于你使用的 shell：<br>
.bash_profile:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="variable constant_">PATH</span>=<span class="string">&quot;/usr/local/bin:$PATH&quot;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>安装好后，可以用以下命令查看是否安装成功，成功则会返回版本号：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git --version</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<h4 id="安装-Hexo">安装 Hexo</h4>
<p>直接使用 npm 安装：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>查看一下 hexo 是否安装成功，会返回当前的 hexo 版本号：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
<h4 id="注册-GitHub-并新建个人仓库">注册 GitHub 并新建个人仓库</h4>
<p>GitHub 就不用多说了。注册完成后，新建公有仓库，<a href="http://xn--GitHub-vy7im2f09qia9990brrzccydl2o.github.io">名称为你的GitHub用户名.github.io</a>，比如我的就叫做 <a href="http://bambrow.github.io">bambrow.github.io</a>。这个仓库用来存放渲染好的页面。</p>
<p>此外，我们再新建一个私有仓库，用来存放源文件本身。仓库的名字任意取，我取的名字是 blog。</p>
<p>这两个仓库最好不要初始化任何东西，也就是 README，.gitignore 和 license 都不要。这样新建的仓库完全是空的。</p>
<h4 id="设置-Git-与密钥文件">设置 Git 与密钥文件</h4>
<p>首先运行以下两句进行 Git 配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git config --<span class="variable language_">global</span> user.<span class="property">name</span> <span class="string">&quot;GitHub用户名&quot;</span></span><br><span class="line">git config --<span class="variable language_">global</span> user.<span class="property">email</span> <span class="string">&quot;GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>
<p>其中把用户名和邮箱替换成你自己的。然后我们生成密钥文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>
<p>直接一路回车下去就好，结束后会在 ~/.ssh/ 文件夹里生成 id_rsa 私钥文件与 id_rsa.pub 公钥文件。我们读取一下公钥的内容并且手动拷贝：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cat ~<span class="regexp">/.ssh/i</span>d_rsa.<span class="property">pub</span></span><br></pre></td></tr></table></figure>
<p>手动复制显示的内容。随后打开这个页面设置 SSH Key。你也可以在 GitHub 主页点击你的右上角头像，选择 Settings，然后选择 SSH and GPG Keys 找到这个界面。点击 New SSH Key，标题可以随便写，内容就是你刚才复制的公钥内容，随后保存。</p>
<h4 id="开始建站">开始建站</h4>
<h6 id="博客初始化">博客初始化</h6>
<p>首先选择一个你喜欢的地方作为你的博客根目录。我自己选择了与 <a href="http://lenonwang.github.io">lenonwang.github.io</a> 的同名目录。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mkdir ~<span class="regexp">/git/</span>lenonwang.<span class="property">github</span>.<span class="property">io</span></span><br></pre></td></tr></table></figure>
<p>随后按照官方教程，依次运行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo init ~<span class="regexp">/git/</span>bambrow.<span class="property">github</span>.<span class="property">io</span></span><br><span class="line">cd ~<span class="regexp">/git/</span>bambrow.<span class="property">github</span>.<span class="property">io</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>现在博客已经初始化完成了。使用以下命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>就可以在 <a href="http://localhost:4000">http://localhost:4000</a> 看到你的站点了。可以在终端里使用 control+c 关掉本地服务器。下面列举一些常用的命令，更多命令与参数可以参考这里：</p>
<ul>
<li>hexo clean 用于清除缓存与静态文件。</li>
<li>hexo new “文章标题” 用于新建文章。</li>
<li>hexo server 用于启动本地服务器查看渲染好的网页，可简写为 hexo s。</li>
<li>hexo generate 用于生成静态文件，可简写为 hexo g。</li>
<li>hexo deploy 用于部署网站，需要先设置好_config.yml，可简写为 hexo d。</li>
</ul>
<h6 id="设置-config-yml">设置_config.yml</h6>
<p>首先，可以参考官方的<a href="https://hexo.io/zh-cn/docs/configuration">设置页面</a>，这里只涉及一些核心设置。</p>
<p>用你喜欢的编辑器打开根目录下的_config.yml。在 Site 下面你可以更改网页的标题、副标题、描述、作者、语言、时区等等。语言这里选择 zh-CN。在 URL 下面可以把 url 改为你的 GitHub Pages 的 URL，<a href="https://xn--GitHub-on9im33ani7aou3bged.github.io">https://你的GitHub用户名.github.io</a>。中间的大部分设置跳过，你也可以参照上面的网页进行修改。</p>
<p>最后，我们重点关注一下# Deployment。在这里，我们需要把它改为如下的样式：<br>
_config.yml</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy</span>:</span><br><span class="line">  <span class="attr">type</span>: git</span><br><span class="line">  <span class="attr">repo</span>: 你的<span class="title class_">GitHub</span>目录地址</span><br><span class="line">  <span class="attr">branch</span>: master</span><br></pre></td></tr></table></figure>
<p>其中 repo 要根据自己的情况修改。你可以在 GitHub 主页点击你的头像，选择 Your repositories，<a href="http://xn--GitHub-on9ia511dx0fu90cdnzb3bm8seba.github.io">点击你的你的GitHub用户名.github.io</a> 仓库，点击 Code 按钮，然后点击 Use SSH（如果目前显示为 Clone with HTTPS），然后复制框中的内容到这里。</p>
<p>修改好后，保存文件。</p>
<h4 id="首次部署">首次部署</h4>
<p>我们需要再安装一个依赖：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>随后一切就绪，依次运行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后你就可以在 <a href="https://xn--GitHub-on9im33ani7aou3bged.github.io">https://你的GitHub用户名.github.io</a> 看到渲染好的网页了。</p>
<h4 id="设置自动部署">设置自动部署</h4>
<p>在这一步里我们不仅备份了博客的源文件，也实现了修改 push 到 blog 私有仓库后触发 GitHub Actions 完成自动部署。</p>
<h6 id="将源文件备份至私有仓库">将源文件备份至私有仓库</h6>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin git@github.<span class="property">com</span>:bambrow/blog.<span class="property">git</span></span><br></pre></td></tr></table></figure>
<p>这里的远程仓库就是你的 blog 仓库。把上面的 <a href="mailto:git@github.com">git@github.com</a>:bambrow/blog.git 修改成你自己的仓库地址。方法同样是在网页进入 blog 仓库，点击 Code 按钮，然后点击 Use SSH（如果目前显示为 Clone with HTTPS），然后复制框中的内容到这里。</p>
<p>随后我们编辑一下.gitignore 文件。可以使用你喜欢的编辑器。一般来讲，.gitignore 应该有如下内容：<br>
.gitignore</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">DS_Store</span></span><br><span class="line"><span class="title class_">Thumbs</span>.<span class="property">db</span></span><br><span class="line">db.<span class="property">json</span></span><br><span class="line">*.<span class="property">log</span></span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.<span class="property">deploy</span>*/</span><br></pre></td></tr></table></figure>
<p>编辑好之后，先做：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>
<p>随后把所有应该备份的文件 push 到 GitHub：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;initial commit&quot;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<p>此时去 GitHub 上查看 blog 仓库，会发现内容已经更新。</p>
<h6 id="设置-GitHub-Actions">设置 GitHub Actions</h6>
<p>请注意，在做这一步之前，请务必确认自己的 blog 仓库是私有仓库，如果不是，一定要在设置里将其设置为私有。</p>
<p>之前建立好的密钥文件，有公钥也有私钥。我们已经用过了公钥，这次使用私钥。首先读取其内容并手动拷贝：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cat ~<span class="regexp">/.ssh/i</span>d_rsa</span><br></pre></td></tr></table></figure>
<p>手动复制全部内容。随后在网页上打开自己的 blog 仓库，点击 Settings，再点击左侧的 Secrets，随后新建。名称可以随意写，这里推荐 HEXO_DEPLOY_KEY；内容则是刚才复制的私钥全部内容。随后点击添加。</p>
<p>随后，我们开始设置工作流。点击你的仓库标签下的 Actions，选择新建 New workflow。随后选择 set up a workflow yourself，将 main.yml 的内容替换如下，你也可以自行修改：</p>
<p>.github/workflows/main.yml</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"># 工作流名称</span><br><span class="line"><span class="attr">name:</span> Hexo Blog Deploy</span><br><span class="line"></span><br><span class="line"># 只在push到master分支的时候启动</span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="symbol">push:</span></span><br><span class="line">    <span class="symbol">branches:</span></span><br><span class="line">      - master</span><br><span class="line"></span><br><span class="line"># 使用ubuntu虚拟机</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="symbol">build:</span></span><br><span class="line">    runs-<span class="attr">on:</span> ubuntu-latest</span><br><span class="line"></span><br><span class="line">    # 工作流步骤</span><br><span class="line">    <span class="symbol">steps:</span></span><br><span class="line">    - <span class="attr">name:</span> Checkout repository master branch</span><br><span class="line">      <span class="symbol">uses:</span> actions/checkout<span class="meta">@master</span></span><br><span class="line"></span><br><span class="line">    # 安装Node.js</span><br><span class="line">    - <span class="attr">name:</span> Install node.js</span><br><span class="line">      <span class="symbol">uses:</span> actions/setup-node<span class="meta">@master</span></span><br><span class="line">      <span class="symbol">with:</span></span><br><span class="line">        node-<span class="attr">version:</span> <span class="string">&quot;16.x&quot;</span></span><br><span class="line"></span><br><span class="line">    # 安装Hexo</span><br><span class="line">    - <span class="attr">name:</span> Install hexo</span><br><span class="line">      <span class="symbol">run:</span> |</span><br><span class="line">        npm install hexo-cli -g</span><br><span class="line">        npm install</span><br><span class="line"></span><br><span class="line">    # 设置SSH密钥，读取HEXO_DEPLOY_KEY</span><br><span class="line">    - <span class="attr">name:</span> Setup <span class="keyword">private</span> key</span><br><span class="line">      <span class="symbol">env:</span></span><br><span class="line">        <span class="symbol">HEXO_DEPLOY_KEY:</span> $&#123;&#123; secrets.HEXO_DEPLOY_KEY &#125;&#125;</span><br><span class="line">      <span class="symbol">run:</span> |</span><br><span class="line">        mkdir -p <span class="regexp">~/.ssh/</span></span><br><span class="line">        echo <span class="string">&quot;$HEXO_DEPLOY_KEY&quot;</span> &gt; <span class="regexp">~/.ssh/</span>id_rsa</span><br><span class="line">        chmod <span class="number">600</span> <span class="regexp">~/.ssh/</span>id_rsa</span><br><span class="line">        ssh-keyscan github.com &gt;&gt; <span class="regexp">~/.ssh/</span>known_hosts</span><br><span class="line"></span><br><span class="line">    # 配置Git设置</span><br><span class="line">    - <span class="attr">name:</span> Setup git settings</span><br><span class="line">      <span class="symbol">run:</span> |</span><br><span class="line">        git config --global user.name <span class="string">&quot;GitHub用户名&quot;</span></span><br><span class="line">        git config --global user.email <span class="string">&quot;GitHub邮箱&quot;</span></span><br><span class="line">    # 更改上面的用户名和邮箱</span><br><span class="line"></span><br><span class="line">    # 部署</span><br><span class="line">    - <span class="attr">name:</span> Deploy hexo</span><br><span class="line">      <span class="symbol">run:</span> |</span><br><span class="line">        hexo clean</span><br><span class="line">        hexo generate</span><br><span class="line">        hexo deploy</span><br></pre></td></tr></table></figure>
<p>随后点击 Start commit 结束设置。这样以后只要有新的改动被 push 到 blog 的主分支，就会触发这个工作流，将网页渲染出来，同时也会 push <a href="http://xn--GitHub-on9i35q4we8x8b7s7beod.github.io">到你的GitHub用户名.github.io</a> 这个仓库里。</p>
<h4 id="安装-Markdown-语法扩展">安装 Markdown 语法扩展</h4>
<p>Hexo 原生的 Markdown 渲染插件支持的 Markdown 语法不够丰富，比如不支持 GitHub Flavored Markdown、CommonMark、上标下标、脚注等等。因此，我们在写文章之前，可以把原生的插件 hexo-renderer-marked 改为 hexo-renderer-markdown-it。</p>
<p>首先，根据该插件的<a href="https://github.com/hexojs/hexo-renderer-markdown-it/wiki/Getting-Started">安装指南</a>，运行以下命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked</span><br><span class="line">npm install hexo-renderer-markdown-it</span><br></pre></td></tr></table></figure>
<p>随后在_config.yml 里添加如下语句（可以添加在 deploy 前面）：</p>
<p>_config.yml</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># <span class="title class_">Markdown</span>-it config</span><br><span class="line">## <span class="title class_">Docs</span>: <span class="attr">https</span>:<span class="comment">//github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class="line"><span class="attr">markdown</span>:</span><br><span class="line">  <span class="attr">preset</span>: <span class="string">&#x27;default&#x27;</span></span><br><span class="line">  <span class="attr">render</span>:</span><br><span class="line">    <span class="attr">html</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut</span>: <span class="literal">false</span></span><br><span class="line">    <span class="attr">langPrefix</span>: <span class="string">&#x27;language-&#x27;</span></span><br><span class="line">    <span class="attr">breaks</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attr">linkify</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attr">quotes</span>: <span class="string">&#x27;“”‘’&#x27;</span></span><br><span class="line">  <span class="attr">enable_rules</span>:</span><br><span class="line">  <span class="attr">disable_rules</span>:</span><br><span class="line">  <span class="attr">plugins</span>:</span><br><span class="line">    - markdown-it-abbr</span><br><span class="line">    - markdown-it-cjk-breaks</span><br><span class="line">    - markdown-it-emoji</span><br><span class="line">    - markdown-it-footnote</span><br><span class="line">    - markdown-it-ins</span><br><span class="line">    - markdown-it-mark</span><br><span class="line">    - markdown-it-sub</span><br><span class="line">    - markdown-it-sup</span><br><span class="line">  <span class="attr">anchors</span>:</span><br><span class="line">    <span class="attr">level</span>: <span class="number">2</span></span><br><span class="line">    <span class="attr">collisionSuffix</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">permalink</span>: <span class="literal">false</span></span><br><span class="line">    <span class="attr">permalinkClass</span>: <span class="string">&#x27;header-anchor&#x27;</span></span><br><span class="line">    <span class="attr">permalinkSide</span>: <span class="string">&#x27;left&#x27;</span></span><br><span class="line">    <span class="attr">permalinkSymbol</span>: <span class="string">&#x27;¶&#x27;</span></span><br><span class="line">    <span class="attr">case</span>: <span class="number">0</span></span><br><span class="line">    <span class="attr">separator</span>: <span class="string">&#x27;-&#x27;</span></span><br></pre></td></tr></table></figure>
<p>随后你就可以使用扩展语法了。使用方法可以参看这里和这里，尤其是后一个网页给出了很详细的例子。</p>
<p>如果你觉得脚注字体偏大，可以看Hexo NexT 主题的<a href="https://bambrow.com/20200718-hexo-next-font-settings/">字体更换</a>，看完后就知道怎么修改了。我个人做了如下设置：<br>
source/_data/styles.styl</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">footnotes</span> &#123;</span><br><span class="line">    font-<span class="attr">size</span>: <span class="number">75</span>%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为我们上一步卸载了一个插件，所以也要改一下工作流文件，在安装Hexo 那一步加一个步骤，卸载这个依赖。你可以在本地修改.github/workflows/main.yml 的内容，也可以在 GitHub 的 blog 仓库，点击 Actions，选择最近的一次部署，点击右侧的省略号中的 View workflow file，然后点击右侧的铅笔按钮进行修改。将卸载依赖写在 npm install 那一行后面即可。如果你采用后者，在你将本地新的改动 push 到 GitHub 之前，要记得先做 git pull，否则会报错显示远程仓库有新的改动。推荐在本地修改，一步到位。</p>
<p>.github/workflows/main.yml</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">run</span>: |</span><br><span class="line">  npm install hexo-cli -g</span><br><span class="line">  npm install</span><br><span class="line">+ npm uninstall hexo-renderer-marked</span><br></pre></td></tr></table></figure>
<h4 id="更换主题">更换主题</h4>
<p>我们这里选择的是 NexT 主题。Hexo 支持许多主题，你也可以选择自己喜欢的主题。</p>
<h4 id="安装-NexT">安装 NexT</h4>
<p>NexT 是非常流行的 Hexo 主题。根据这个网站，该项目几经易手，经历过很多不同的版本。我们现在当然是采用目前的最新版本。</p>
<p>首先我们运行 hexo -v 与 npm -v 查看一下 Hexo 与 Node.js 的版本，确保它们大于<a href="https://github.com/next-theme/hexo-theme-next#readme">这个链接</a>里所示的版本最低要求。</p>
<p>以下步骤主要参考了 NexT <a href="https://theme-next.js.org/docs/getting-started/">官方文档</a>。还是在博客的根目录里，运行如下命令（同时卸载默认主题，同样，卸载语句也应加入工作流）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next</span><br><span class="line">npm uninstall hexo-theme-landscape # 加入工作流 <span class="title class_">Install</span> hexo 部分</span><br></pre></td></tr></table></figure>
<p>新主题就下载好了。下一步，我们打开站点配置文件_config.yml，找到 theme 那一行并改为 theme: next，主题就更换完毕了。接下来需要拷贝主题的配置文件（以及删除旧主题的配置文件）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rm -f _config.<span class="property">landscape</span>.<span class="property">yml</span></span><br><span class="line">cp node_modules/hexo-theme-next/_config.<span class="property">yml</span> _config.<span class="property">next</span>.<span class="property">yml</span></span><br></pre></td></tr></table></figure>
<p>你可以运行 hexo clean; hexo g; hexo s 来查看效果。</p>
<h4 id="修改主题配置">修改主题配置</h4>
<p>主题配置的修改主要在_config.next.yml 中进行。这里讲几个主要的配置。</p>
<h6 id="主题样式与暗色模式">主题样式与暗色模式</h6>
<p>主题样式在# Schemes 下面。一共有四种样式，分别是 Muse，Mist，Pisces 和 Gemini。其中前两种是单栏样式，后两种是双栏样式，如果要更改，只需注释掉当前样式，再取消注释想要更改的样式即可。</p>
<p>在下方的 Dark Mode 选项里，你可以选择为网页开启暗色模式，只需要把 false 变成 true 即可。</p>
<h6 id="菜单与侧边栏项目">菜单与侧边栏项目</h6>
<p>在# Menu Settings 下面你可以选择开启菜单项目。它们都是默认关闭（被注释掉）的。需要哪一项，取消注释即可。</p>
<p>注意，除了 home 与 archives，其他的页面需要手动添加。比如，你想要开启 about 页面，那么就要在 Hexo 根目录下运行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page <span class="string">&quot;about&quot;</span></span><br></pre></td></tr></table></figure>
<p>随后在 source 文件夹下面就会生成 about 目录，里面有 <a href="http://index.md">index.md</a> 文件。你可以更改文件内的标题，随后在 date 行下面加一句：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">+ <span class="attr">type</span>: <span class="string">&quot;about&quot;</span></span><br></pre></td></tr></table></figure>
<p>如果需要还可以加上 comments: false 来为这个页面关闭评论（后文会讲到如何添加评论功能）。</p>
<p>这里举个简单的例子，假如我们要新建一个菜单项目叫做 notes，首先在# Menu Settings 的 menu 下面新建一行：</p>
<p>_config.next.yml</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu</span>:</span><br><span class="line">  <span class="attr">home</span>: / || fa fa-home</span><br><span class="line">  <span class="attr">about</span>: <span class="regexp">/about/</span> || fa fa-user</span><br><span class="line">  <span class="attr">tags</span>: <span class="regexp">/tags/</span> || fa fa-tags</span><br><span class="line">  <span class="attr">categories</span>: <span class="regexp">/categories/</span> || fa fa-th</span><br><span class="line">  <span class="attr">archives</span>: <span class="regexp">/archives/</span> || fa fa-archive</span><br><span class="line">  #<span class="attr">schedule</span>: <span class="regexp">/schedule/</span> || fa fa-calendar</span><br><span class="line">  #<span class="attr">sitemap</span>: /sitemap.<span class="property">xml</span> || fa fa-sitemap</span><br><span class="line">  #<span class="attr">commonweal</span>: <span class="regexp">/404/</span> || fa fa-heartbeat</span><br><span class="line">+ <span class="attr">notes</span>: <span class="regexp">/notes/</span> || fa fa-sticky-note</span><br></pre></td></tr></table></figure>
<p>图标的代码可以去 <a href="https://fontawesome.com/">Font Awesome</a> 网页上查找。随后如前面的例子，手动添加页面即可。如要添加自定义菜单的中文翻译，需要新建 source/_data/languages.yml 文件，然后写入如下内容：<br>
source/_data/languages.yml</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">zh-<span class="attr">CN</span>:</span><br><span class="line">  <span class="attr">menu</span>:</span><br><span class="line">    <span class="attr">notes</span>: 笔记</span><br></pre></td></tr></table></figure>
<p>任何翻译都可以在这个文件里设置或覆盖。</p>
<p>此外，在# Sidebar Settings 下面可以找到关于侧边栏的一些设置。除了它本身的一些参数，你还可以设置其中的一些内容，比如 social 下面可以开启你的社交网络账号与主页。另外，搜索 back2top 还可以让你把回到首页的按钮放在侧边栏，并开启阅读进度百分比功能。</p>
<h6 id="网站图标与头像">网站图标与头像</h6>
<p>网站图标可以在# Site Information Settings 的 favicon 下面找到。如果要更换，可以把图标放在 source/images/ 目录里（如果没有这个目录就自己新建）。教程还推荐了<a href="https://realfavicongenerator.net/">这个网站</a>来生成你自己的图标。</p>
<p>头像则在侧边栏设置的# Sidebar Avatar 下面。你可以把头像放在 source/uploads/ 目录里（如果没有这个目录就自己新建）。</p>
<h6 id="知识共享许可协议设置">知识共享许可协议设置</h6>
<p>Creative Commons 设置可以搜索 creative_commons。它支持多种协议，默认是 by-nc-sa。更多协议可以参考<a href="https://zh.wikipedia.org/wiki/%E7%9F%A5%E8%AF%86%E5%85%B1%E4%BA%AB%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE">维基百科的解释</a>。</p>
<p>代码块样式你可以在这里查看并选择你喜欢的样式，随后搜索 codeblock 修改。你还可以打开复制按钮，方便读者复制代码块里的内容。</p>
<h6 id="代码块样式">代码块样式</h6>
<p>你可以在<a href="https://theme-next.js.org/highlight/">这里查看</a>并选择你喜欢的样式，随后搜索 codeblock 修改。你还可以打开复制按钮，方便读者复制代码块里的内容。</p>
<h6 id="阅读进度、书签与-GitHub-横幅">阅读进度、书签与 GitHub 横幅</h6>
<p>搜索 reading_progress 即可开启阅读进度功能。还可以在 bookmark 开启书签功能，读者可以选择点击书签图标来保存阅读进度，下次进入这篇文章时就可以继续阅读。</p>
<p>下面的 github_banner 可以让你开启 GitHub 横幅，它会在网页右上角显示一个小横幅，直通你的 GitHub 主页。</p>
<h6 id="字体设置">字体设置</h6>
<p>在# Font Settings 可以更改字体设置，NexT 允许你更改全局字体、网站标题字体、h1-h6 标题字体，文章字体与代码字体。如果你的定制程度比较高，还是参看<a href="https://theme-next.js.org/docs/theme-settings/miscellaneous.html#Fonts-Customization">官方教程</a>比较好。</p>
<h6 id="设置中英文自动空格">设置中英文自动空格</h6>
<p>这个功能已经内置在 NexT 主题中。在_config.next.yml 中搜索并开启 pangu 即可。</p>
<h4 id="增加第三方服务">增加第三方服务</h4>
<p>同样，<a href="https://theme-next.js.org/docs/third-party-services/">官方教程</a>还是比较详细的，解释了很多第三方插件的用法，囊括了数学公式、评论系统、网站统计与分析、评分与分享小部件、搜索功能、即时聊天室等等。这里只讲一下我个人开启的服务。</p>
<h6 id="LeanCloud-阅读统计功能">LeanCloud 阅读统计功能</h6>
<p>这部分参考了<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md">这篇文章</a>。</p>
<p>注册 LeanCloud 时，建议注册<a href="https://leancloud.app/">国际版</a>，<a href="https://www.leancloud.cn/">国内版</a>要验证的东西比较多。然后新建一个应用，名字可以任意写。随后打开应用，点击存储条目下的结构化数据，然后点击创建 Class，名称为 Counter，其他保持默认。随后去设置里的应用Keys 记下 AppID 与 AppKey。</p>
<p>打开_config.next.yml，搜索 leancloud_visitors，将其打开，填写刚才的 AppID 与 AppKey，security 也设置为打开。随后的步骤比较多且复杂，请参考上面的文章，但是介于现在 LeanCloud 又有更新，所以做一点补充说明。</p>
<p>首先，上面的参考文章里，需要打开 NexT 主题配置文件的时候，我们统一打开_config.next.yml。其次，在博客配置文件_config.yml 里，在 theme:next 后面（你也可以添加到别的位置）添加的内容是：</p>
<p>_config.yml</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">leancloud_counter_security</span>:</span><br><span class="line">  <span class="attr">enable_sync</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id</span>: 你的<span class="title class_">AppID</span></span><br><span class="line">  <span class="attr">app_key</span>: 你的<span class="title class_">AppKey</span></span><br><span class="line">  <span class="attr">username</span>: 你用<span class="string">&quot;hexo lc-counter register&quot;</span>注册的用户名</span><br><span class="line">  <span class="attr">password</span>: 你用<span class="string">&quot;hexo lc-counter register&quot;</span>注册的密码</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>记得在这之前要安装：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install hexo-leancloud-counter-security</span><br></pre></td></tr></table></figure>
<p>然后，在配置 deploy 的时候，因为我们多加了一项，所以应该改为：<br>
_config.yml</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy</span>:</span><br><span class="line">  - <span class="attr">type</span>: git</span><br><span class="line">    <span class="attr">repo</span>: 你的<span class="title class_">GitHub</span>目录地址</span><br><span class="line">    <span class="attr">branch</span>: master</span><br><span class="line">  - <span class="attr">type</span>: leancloud_counter_security_sync</span><br></pre></td></tr></table></figure>
<p>也就是每一个 type 前面都要加上 -。</p>
<p>随后，在设置 Counter 的权限时，我们在 add_field 与 create 均选择指定用户，随后在用户名里输入你用 hexo lc-counter register 注册的用户名，它会自动找到对应的用户。在设置完后，两项都应该显示 0 Role, 1 User。对于 delete，选择指定用户留空即可，会显示显示 0 Role, 0 User。</p>
<blockquote>
<p>请注意，当前版本的 hexo-leancloud-counter-security 插件存在 bug，而且官方并未修复。这会导致 GitHub Actions 部署错误。如果你遇到了这个问题，请参考 <a href="https://bambrow.com/20211124-hexo-next-upgrade/">Hexo 静态博客升级指南</a> 里的 “远程部署” 部分进行修改。</p>
</blockquote>
<h6 id="Valine-评论系统">Valine 评论系统</h6>
<blockquote>
<p>根据这条 Github Issue，Valine 评论系统在 NexT v8.1.0 后被移除。理由如下：<br>
Valine 使用 Leancloud 作为后端，是一个深受静态博客用户喜爱的评论系统。然而 Valine 暴露出了一些令人担忧的问题：<br>
NexT 团队曾多次收到关于 Valine 评论系统存在隐私数据泄露的反馈；<br>
Valine 自 1.4 版本起不再开源，发布的打包版本中存在未告知用户的百度统计代码；<br>
2020 年 11 月下旬出现了针对 Valine 评论系统的网络攻击；<br>
CVE-2021-34801<br>
如需继续使用，需要额外安装插件。在项目根目录运行如下命令：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install next-theme/hexo-next-valine</span><br></pre></td></tr></table></figure>
<p>Valine 即可正常运行。</p>
<p>在前一步的基础上，在_config.next.yml 里的# Comments Settings 下面添加如下条目（建议添加在 Disqus 前面）：<br>
_config.next.yml</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># <span class="title class_">Valine</span></span><br><span class="line"># <span class="title class_">For</span> more <span class="attr">information</span>: <span class="attr">https</span>:<span class="comment">//valine.js.org, https://github.com/xCss/Valine</span></span><br><span class="line"><span class="attr">valine</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">appId</span>:  # your leancloud application appid</span><br><span class="line">  <span class="attr">appKey</span>:  # your leancloud application appkey</span><br><span class="line">  <span class="attr">serverURLs</span>: # <span class="title class_">When</span> the custom domain name is enabled, fill it <span class="keyword">in</span> here</span><br><span class="line">  <span class="attr">placeholder</span>: <span class="title class_">Just</span> go go # comment box placeholder</span><br><span class="line">  <span class="attr">avatar</span>: mm # gravatar style</span><br><span class="line">  <span class="attr">meta</span>: [nick, mail, link] # <span class="title class_">Custom</span> comment header</span><br><span class="line">  <span class="attr">pageSize</span>: <span class="number">10</span> # pagination size</span><br><span class="line">  <span class="attr">visitor</span>: <span class="literal">true</span> # leancloud-counter-security is not supported <span class="keyword">for</span> now. <span class="title class_">When</span> visitor is set to be <span class="literal">true</span>, appid and appkey are recommended to be the same <span class="keyword">as</span> leancloud_visitors<span class="string">&#x27; for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span></span><br><span class="line"><span class="string">  comment_count: true # If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line"><span class="string">  recordIP: false # Whether to record the commenter IP</span></span><br></pre></td></tr></table></figure>
<p>随后填写 appId、appKey 即可。在这里，我们把 visitor 设置为 true，随后把上一步的 leancloud_visitors 下的 enable 设置为 false，因为两者之间有冲突。之后会考虑将评论系统从 Valine 迁出，会另外写文章说明。</p>
<h6 id="不蒜子网页计数器功能">不蒜子网页计数器功能</h6>
<p>这个功能可以显示网站的浏览量和访客数。在_config.next.yml 里找到 busuanzi_count，将其打开，因为我们已经开启了 LeanCloud 的计数功能，所以将 post_views 关掉（否则文章内部的阅读次数会有异常），其他保持打开即可。</p>
<blockquote>
<p>如果在本地测试，你会发现统计数据非常大，这是因为不蒜子通过域名统计，所以 localhost:4000 的数字会比较大，不必担心。</p>
</blockquote>
<h6 id="Local-Search-搜索功能">Local Search 搜索功能</h6>
<p>首先在根目录安装：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>
<p>随后，在博客配置文件_config.yml 里加入：</p>
<p>_config.yml</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">search</span>:</span><br><span class="line">  <span class="attr">path</span>: search.<span class="property">xml</span></span><br><span class="line">  <span class="attr">field</span>: post</span><br><span class="line">  <span class="attr">format</span>: html</span><br><span class="line">  <span class="attr">limit</span>: <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<p>然后在_config.next.yml 里打开 local_search。</p>
<h6 id="Word-Counter-字数统计与阅读时长功能">Word Counter 字数统计与阅读时长功能</h6>
<p>首先在根目录安装：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install hexo-word-counter</span><br></pre></td></tr></table></figure>
<p>随后，在博客配置文件_config.yml 里加入：</p>
<p>_config.yml</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time</span>:</span><br><span class="line">  <span class="attr">symbols</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">time</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude_codeblock</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl</span>: <span class="number">4</span></span><br><span class="line">  <span class="attr">wpm</span>: <span class="number">275</span></span><br><span class="line">  <span class="attr">suffix</span>: <span class="string">&quot;mins.&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="外网访问">外网访问</h4>
<h6 id="购买域名">购买域名</h6>
<p>现在我们的站点已经有模有样了，那就可以准备为它绑定一个域名了。首先第一步就是购买域名。国内国外都有众多域名服务商，本着少受一些限制的原则，推荐从国外几个知名的服务商购买。在网上可以搜到许多域名商的介绍与购买指南，这里就不赘述了。</p>
<p>如果实在选择困难，可以去<a href="https://www.domcomp.com/">这里</a>比较一下各家的价格。很多域名商首年或者首次转移都有优惠，如果不想每年都折腾，一定要记得对比一下续费价格，以及有没有隐藏费用。另外最好选择有 WHOIS 隐私保护的域名商，以及在付费的时候不要错选成那些乱七八糟的套餐，只买域名即可。</p>
<h6 id="绑定域名并添加-CNAME">绑定域名并添加 CNAME</h6>
<p>这一步主要参考了两篇文章，分别讲了使用 [1] 和不使用 [2]DNSPod 的情况，你可以视情况而定。我这里参考的是第二篇，也就是 GitHub 官方的指南。</p>
<p><a href="http://xn--GitHub-on9i73ki3gwxav22jrrzccydd09m.github.io">首先去你的GitHub用户名.github.io</a> 仓库中，点击 Settings，在 GitHub Pages 的 Custom domain 下输入你买好的域名，点击 Save 保存。</p>
<p>此时你会发现下面的 Enforce HTTPS 被取消勾选，为了将其再次选中，需要以下的步骤。</p>
<p>首先配置 CNAME，在 source 文件夹下建立一个新文件叫做 CNAME（不要带任何后缀），将你买好的域名输入进去。随后向 GitHub 提交这次修改。</p>
<p>随后，打开你的域名商网站，为你的域名配置 DNS。不同的域名商可能有不太一样的步骤，你可以搜索你的域名商 + connect to github pages 来找到教程。在一般情况下，你需要设置 4 个 A 记录与 1 个 CNAME 记录，A 记录指向下面四个 IP 地址：</p>
<p>185.199.108.153<br>
185.199.109.153<br>
185.199.110.153<br>
185.199.111.153<br>
CNAME 记录则设置为 www CNAME <a href="http://xn--GitHub-on9im33ani7aou3bged.github.io">你的GitHub用户名.github.io</a>。详情可以参看教程里的设置 apex 域部分。</p>
<p>随后刷新 GitHub 的设置页，看是否可以点选 Enforce HTTPS。有时候需要等一段时间才可以。你也可以在 Terminal 测试一下 DNS 是否配置正确（可能也需要等一段时间才会生效）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ dig bambrow.<span class="property">com</span> +noall +answer</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; <span class="title class_">DiG</span> <span class="number">9.10</span><span class="number">.6</span> &lt;&lt;&gt;&gt; bambrow.<span class="property">com</span> +noall +answer</span><br><span class="line">;; <span class="variable language_">global</span> <span class="attr">options</span>: +cmd</span><br><span class="line">lenonwang.<span class="property">com</span>.		<span class="number">194</span>	<span class="variable constant_">IN</span>	A	<span class="number">185.199</span><span class="number">.109</span><span class="number">.153</span></span><br><span class="line">lenonwang.<span class="property">com</span>.		<span class="number">194</span>	<span class="variable constant_">IN</span>	A	<span class="number">185.199</span><span class="number">.111</span><span class="number">.153</span></span><br><span class="line">lenonwang.<span class="property">com</span>.		<span class="number">194</span>	<span class="variable constant_">IN</span>	A	<span class="number">185.199</span><span class="number">.110</span><span class="number">.153</span></span><br><span class="line">lenonwang.<span class="property">com</span>.		<span class="number">194</span>	<span class="variable constant_">IN</span>	A	<span class="number">185.199</span><span class="number">.108</span><span class="number">.153</span></span><br></pre></td></tr></table></figure>
<p>也可以在 dig 命令的域名前加上 www 看一下 CNAME 记录是否生效：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ dig www.<span class="property">bambrow</span>.<span class="property">com</span> +noall +answer</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; <span class="title class_">DiG</span> <span class="number">9.10</span><span class="number">.6</span> &lt;&lt;&gt;&gt; www.<span class="property">bambrow</span>.<span class="property">com</span> +noall +answer</span><br><span class="line">;; <span class="variable language_">global</span> <span class="attr">options</span>: +cmd</span><br><span class="line">www.<span class="property">bambrow</span>.<span class="property">com</span>.	<span class="number">299</span>	<span class="variable constant_">IN</span>	<span class="variable constant_">CNAME</span>	bambrow.<span class="property">github</span>.<span class="property">io</span>.</span><br><span class="line">bambrow.<span class="property">github</span>.<span class="property">io</span>.	<span class="number">3599</span>	<span class="variable constant_">IN</span>	A	<span class="number">185.199</span><span class="number">.109</span><span class="number">.153</span></span><br><span class="line">bambrow.<span class="property">github</span>.<span class="property">io</span>.	<span class="number">3599</span>	<span class="variable constant_">IN</span>	A	<span class="number">185.199</span><span class="number">.108</span><span class="number">.153</span></span><br><span class="line">bambrow.<span class="property">github</span>.<span class="property">io</span>.	<span class="number">3599</span>	<span class="variable constant_">IN</span>	A	<span class="number">185.199</span><span class="number">.111</span><span class="number">.153</span></span><br><span class="line">bambrow.<span class="property">github</span>.<span class="property">io</span>.	<span class="number">3599</span>	<span class="variable constant_">IN</span>	A	<span class="number">185.199</span><span class="number">.110</span><span class="number">.153</span></span><br></pre></td></tr></table></figure>
<h6 id="其他设置">其他设置</h6>
<p>把_config.yml 的 url 修改为你的新域名。如果你配置了 LeanCloud，在应用中点击设置，点击安全中心，在 Web 安全域名把你的新域名加进去。现在基本上就大功告成了！</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Android5.0及以上版本——WebView中https与http内容混合问题</title>
    <url>/2018/01/11/https%E4%B8%8Ehttp%E5%86%85%E5%AE%B9%E6%B7%B7%E5%90%88%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="场景复现">场景复现</h3>
<p>在Android5.0 以及以上的系统，当WebView加载的链接为Https开头，但是链接里面的内容，比如图片为Http链接，这时候，图片就会加载不出来，在浏览器中的Console会有如下警告log:</p>
<h3 id="原因">原因</h3>
<p>从Android5.0开始，WebView默认不支持同时加载Https和Http混合模式。</p>
<h3 id="官方说明">官方说明</h3>
<p>从Android5.0以后，当一个安全的站点（https）去加载一个非安全的站点（http）时，需要配置Webview加载内容的混合模式，一共有如下三种模式：</p>
<ul>
<li>MIXED_CONTENT_NEVER_ALLOW：Webview不允许一个安全的站点（https）去加载非安全的站点内容（http）,比如，https网页内容的图片是http链接。强烈建议App使用这种模式，因为这样更安全。</li>
<li>MIXED_CONTENT_ALWAYS_ALLOW：在这种模式下，WebView是可以在一个安全的站点（Https）里加载非安全的站点内容（Http）,这是WebView最不安全的操作模式，尽可能地不要使用这种模式。</li>
<li>MIXED_CONTENT_COMPATIBILITY_MODE：在这种模式下，当涉及到混合式内容时，WebView会尝试去兼容最新Web浏览器的风格。一些不安全的内容（Http）能被加载到一个安全的站点上（Https），而其他类型的内容将会被阻塞。这些内容的类型是被允许加载还是被阻塞可能会随着版本的不同而改变，并没有明确的定义。这种模式主要用于在App里面不能控制内容的渲染，但是又希望在一个安全的环境下运行。</li>
</ul>
<span id="more"></span>
<h3 id="解析">解析</h3>
<p>在Android5.0以下，默认是采用的MIXED_CONTENT_ALWAYS_ALLOW模式，即总是允许WebView同时加载Https和Http；而从Android5.0开始，默认用MIXED_CONTENT_NEVER_ALLOW模式，即总是不允许WebView同时加载Https和Http。</p>
<p>虽然官网给出的建议是，为了安全考虑，使用 MIXED_CONTENT_NEVER_ALLOW模式，但是在实际引用中，当我们的服务器已经升级到Https，但是一些页面的资源是第三方的，我们不能要求第三方也都升级到Https，所以我们只能根据系统版本，用代码去设置加载模式为MIXED_CONTENT_ALWAYS_ALLOW。</p>
<h3 id="解决方案">解决方案</h3>
<p>在webview加载页面之前，设置加载模式为MIXED_CONTENT_ALWAYS_ALLOW</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) </span><br><span class="line">&#123;</span><br><span class="line">    webView.getSettings().setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Android研发</tag>
        <tag>H5</tag>
        <tag>webview</tag>
      </tags>
  </entry>
  <entry>
    <title>【JVM之内存与垃圾回收篇】方法区</title>
    <url>/2024/01/03/java-memory-collection/</url>
    <content><![CDATA[<p><img src="/uploads/andrew-liu-2nx1Z70CT8I-unsplash.jpg" alt="avatar"></p>
<h1>- Nemo&amp; - java内存模型篇</h1>
<p>这次所讲述的是运行时数据区的最后一个部分</p>
<p><img src="1542615-20200713213213903-1357712489.png" alt=""></p>
<p>从线程共享与否的角度来看<br>
<img src="1542615-20200713213219437-1252670091.png" alt=""></p>
<p>ThreadLocal：如何保证多个线程在并发环境下的安全性？典型应用就是数据库连接管理，以及会话管理</p>
<h2 id="栈、堆、方法区的交互关系">栈、堆、方法区的交互关系</h2>
<p>下面就涉及了对象的访问定位<br>
<img src="1542615-20200713213225285-1567727957.png" alt=""></p>
<ul>
<li>Person：存放在元空间，也可以说方法区</li>
<li>person：存放在 Java 栈的局部变量表中</li>
<li>new Person()：存放在 Java 堆中</li>
</ul>
<p>⠀</p>
<h2 id="方法区的理解">方法区的理解</h2>
<p>《Java 虚拟机规范》中明确说明：“尽管所有的方法区在逻辑上是属于堆的一部分，但一些简单的实现可能不会选择去进行垃圾收集或者进行压缩。”但对于 HotSpotJVM 而言，方法区还有一个别名叫做 Non-Heap（非堆），目的就是要和堆分开。</p>
<p>所以，<strong>方法区看作是一块独立于 Java 堆的内存空间。</strong></p>
<p><img src="1542615-20200713213232981-1950057405.png" alt=""></p>
<p>方法区主要存放的是 Class，而堆中主要存放的是 实例化的对象</p>
<ul>
<li>方法区（Method Area）与 Java 堆一样，是各个线程共享的内存区域。</li>
<li>方法区在 JVM 启动的时候被创建，并且它的实际的物理内存空间中和 Java 堆区一样都可以是不连续的。</li>
<li>方法区的大小，跟堆空间一样，可以选择固定大小或者可扩展。</li>
<li>方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，导致方法区溢出，虚拟机同样会抛出内存溢出错误：java.lang.OutofMemoryError：<strong>PermGen space</strong> 或者 java.lang.OutOfMemoryError:<strong>Metaspace</strong>
<ul>
<li><strong>加载大量的第三方的 jar 包</strong></li>
<li><strong>Tomcat 部署的工程过多（30~50 个）</strong></li>
<li><strong>大量动态的生成反射类</strong></li>
</ul>
</li>
<li>关闭 JVM 就会释放这个区域的内存。</li>
</ul>
<p>⠀</p>
<h2 id="HotSpot中方法区的演进">HotSpot中方法区的演进</h2>
<p>在 jdk7 及以前，习惯上把方法区，称为永久代。jdk8 开始，使用元空间取代了永久代。</p>
<ul>
<li>JDK 1.8 后，<strong>元空间</strong>存放在堆外内存（<strong>本地内存</strong>）中</li>
</ul>
<p>⠀<br>
本质上，方法区和永久代并不等价。仅是对 hotspot 而言的。《Java 虚拟机规范》对如何实现方法区，不做统一要求。例如：BEAJRockit / IBM J9 中不存在永久代的概念。</p>
<ul>
<li>现在来看，当年使用永久代，不是好的 idea。导致 Java 程序更容易 OOM（超过 <code>-XX:MaxPermsize</code> 上限）</li>
</ul>
<p>⠀<br>
<img src="1542615-20200713213244108-302140429.png" alt=""></p>
<p>而到了 JDK8，终于完全废弃了永久代的概念，改用与 JRockit、J9 一样在本地内存中实现的元空间（Metaspace）来代替</p>
<p><img src="1542615-20200713213249908-1084189353.png" alt=""></p>
<p>元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代最大的区别在于：<strong>元空间不在虚拟机设置的内存中，而是使用本地内存</strong></p>
<p>永久代、元空间二者并不只是名字变了，内部结构也调整了</p>
<p>根据《Java 虚拟机规范》的规定，如果方法区无法满足新的内存分配需求时，将抛出 OOM 异常</p>
<h2 id="设置方法区大小与-OOM">设置方法区大小与 OOM</h2>
<p>方法区的大小不必是固定的，JVM 可以根据应用的需要动态调整。</p>
<h2 id="jdk7及以前">jdk7及以前</h2>
<ul>
<li>通过 <code>-XX:Permsize</code> 来设置永久代初始分配空间。默认值是 20.75M</li>
<li><code>-XX:MaxPermsize</code> 来设定永久代最大可分配空间。32 位机器默认是 64M，64 位机器模式是 82M</li>
<li>当 JVM 加载的类信息容量超过了这个值，会报异常 OutOfMemoryError:PermGen space。</li>
</ul>
<p>⠀<br>
<img src="1542615-20200713213256534-1081297873.png" alt=""></p>
<h2 id="JDK8以后">JDK8以后</h2>
<ul>
<li>
<p>元数据区大小可以使用参数 <code>-XX:MetaspaceSize</code> 和 <code>-XX:MaxMetaspaceSize</code> 指定，替代上述原有的两个参数。</p>
</li>
<li>
<p>默认值依赖于平台。<strong>Windows 下，<code>-XX:MetaspaceSize</code> 是 21M，<code>-XX:MaxMetaspaceSize</code>的值是 -1，即没有限制。</strong></p>
</li>
<li>
<p>与永久代不同，如果不指定大小，默认情况下，虚拟机会耗尽所有的可用系统内存。如果元数据区发生溢出，虚拟机一样会抛出异常 OutOfMemoryError:Metaspace</p>
</li>
<li>
<p><code>-XX:MetaspaceSize</code>：设置初始的元空间大小。对于一个 64 位的服务器端 JVM 来说，其默认的 <code>-XX:MetaspaceSize</code> 值为 21MB。这就是初始的高水位线，一旦触及这个水位线，FullGC 将会被触发并卸载没用的类（即这些类对应的类加载器不再存活）然后这个高水位线将会重置。新的高水位线的值取决于 GC 后释放了多少元空间。如果释放的空间不足，那么在不超过 MaxMetaspaceSize 时，适当提高该值。如果释放空间过多，则适当降低该值。</p>
</li>
<li>
<p>如果初始化的高水位线设置过低，上述高水位线调整情况会发生很多次。通过垃圾回收器的日志可以观察到 FullGC 多次调用。为了避免频繁地 GC，建议将 <code>-XX:MetaspaceSize</code> 设置为一个相对较高的值。</p>
</li>
</ul>
<p>⠀</p>
<h2 id="如何解决这些OOM">如何解决这些OOM</h2>
<ul>
<li>
<p>要解决 OOM 异常或 heap space 的异常，一般的手段是首先通过内存映像分析工具（如 Eclipse Memory Analyzer）对 dump 出来的堆转储快照进行分析，重点是确认内存中的对象是否是必要的，也就是要先分清楚到底是出现了内存泄漏（Memory Leak）还是内存溢出（Memory Overflow）</p>
<ul>
<li>内存泄漏就是 有大量的引用指向某些对象，但是这些对象以后不会使用了，但是因为它们还和 GC ROOT 有关联，所以导致以后这些对象也不会被回收，这就是内存泄漏的问题</li>
</ul>
</li>
<li>
<p>如果是内存泄漏，可进一步通过工具查看泄漏对象到 GC Roots 的引用链。于是就能找到泄漏对象是通过怎样的路径与 GCRoots 相关联并导致垃圾收集器无法自动回收它们的。掌握了泄漏对象的类型信息，以及 GCRoots 引用链的信息，就可以比较准确地定位出泄漏代码的位置。</p>
</li>
<li>
<p>如果不存在内存泄漏，换句话说就是内存中的对象确实都还必须存活着，那就应当检查虚拟机的堆参数（-Xmx 与 -Xms），与机器物理内存对比看是否还可以调大，从代码上检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期的内存消耗。</p>
</li>
</ul>
<p>⠀</p>
<h2 id="方法区的内部结构">方法区的内部结构</h2>
<p><img src="1542615-20200713213305819-860183824.png" alt=""></p>
<p>《深入理解 Java 虚拟机》书中对方法区（Method Area）存储内容描述如下：它用于存储已被虚拟机加载的<strong>类型信息、常量、静态变量、即时编译器编译后的代码缓存</strong>等。</p>
<p><img src="1542615-20200713213312363-1838469801.png" alt=""></p>
<h2 id="类型信息">类型信息</h2>
<p>对每个加载的类型（类 class、接口 interface、枚举 enum、注解 annotation），JVM 必须在方法区中存储以下类型信息：</p>
<ul>
<li>这个类型的完整有效名称（全名=包名.类名）</li>
<li>这个类型直接父类的完整有效名（对于 interface 或是 java.lang.object，都没有父类）</li>
<li>这个类型的修饰符（public，abstract，final 的某个子集）</li>
<li>这个类型直接接口的一个有序列表</li>
</ul>
<p>⠀</p>
<h2 id="域-Field-信息">域(Field)信息</h2>
<p>JVM 必须在方法区中保存类型的所有域的相关信息以及域的声明顺序。</p>
<p>域的相关信息包括：域名称、域类型、域修饰符（public，private，protected，static，final，volatile，transient 的某个子集）</p>
<h2 id="方法（Method）信息">方法（Method）信息</h2>
<p>JVM 必须保存所有方法的以下信息，同域信息一样包括声明顺序：</p>
<ul>
<li>方法名称</li>
<li>方法的返回类型（或 void）</li>
<li>方法参数的数量和类型（按顺序）</li>
<li>方法的修饰符（public，private，protected，static，final，synchronized，native，abstract 的一个子集）</li>
<li>方法的字节码（bytecodes）、操作数栈、局部变量表及大小（abstract 和 native 方法除外）</li>
<li>异常表（abstract 和 native 方法除外）</li>
</ul>
<p>⠀</p>
<blockquote>
<p>每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引</p>
</blockquote>
<h2 id="non-final的类变量">non-final的类变量</h2>
<p>静态变量和类关联在一起，随着类的加载而加载，他们成为类数据在逻辑上的一部分</p>
<p>类变量被类的所有实例共享，即使没有类实例时，你也可以访问它</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * non-final的类变量</span><br><span class="line"> *</span><br><span class="line"> * @author: Nemo</span><br><span class="line"> */</span><br><span class="line">public class MethodAreaTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Order order = new Order();</span><br><span class="line">        order.hello();</span><br><span class="line">        System.out.println(order.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Order &#123;</span><br><span class="line">    public static int count = 1;</span><br><span class="line">    public static final int number = 2;</span><br><span class="line">    public static void hello() &#123;</span><br><span class="line">        System.out.println(&quot;hello!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上代码所示，即使我们把 order 设置为 null，也不会出现空指针异常</p>
<h2 id="全局常量">全局常量</h2>
<p>全局常量就是使用 static final 进行修饰</p>
<p>被声明为 final 的类变量的处理方法则不同，每个全局常量在编译的时候就会被分配了。</p>
<h2 id="运行时常量池-VS-常量池">运行时常量池 VS 常量池</h2>
<p>运行时常量池，就是运行时常量池</p>
<p><img src="1542615-20200713213324512-711283315.png" alt=""></p>
<h2 id="常量池">常量池</h2>
<p><img src="1542615-20200713213330565-987936858.png" alt=""></p>
<p>一个有效的字节码文件中除了包含类的版本信息、字段、方法以及接口等描述符信息外，还包含一项信息就是常量池表（Constant Pool Table），包括各种字面量和对类型、域和方法的符号引用</p>
<h3 id="为什么需要常量池">为什么需要常量池</h3>
<p>一个 java 源文件中的类、接口，编译后产生一个字节码文件。而 Java 中的字节码需要数据支持，通常这种数据会很大以至于不能直接存到字节码里，换另一种方式，可以存到常量池，这个字节码包含了指向常量池的引用。在动态链接的时候会用到运行时常量池，之前有介绍。</p>
<p>比如：如下的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class SimpleClass &#123;</span><br><span class="line">    public void sayHello() &#123;</span><br><span class="line">        System.out.println(&quot;hello&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然上述代码只有 194 字节，但是里面却使用了 String、System、PrintStream 及 Object 等结构。这里的代码量其实很少了，如果代码多的话，引用的结构将会更多，这里就需要用到常量池了。</p>
<h3 id="常量池中有什么">常量池中有什么</h3>
<p>例如下面这段代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MethodAreaTest2 &#123;</span><br><span class="line">    public static void main(String args[]) &#123;</span><br><span class="line">        Object obj = new Object();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将会被翻译成如下字节码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new #2  </span><br><span class="line">dup</span><br><span class="line">invokespecial</span><br></pre></td></tr></table></figure>
<h3 id="小结">小结</h3>
<p>常量池、可以看做是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等类型</p>
<h2 id="运行时常量池">运行时常量池</h2>
<p>运行时常量池（Runtime Constant Pool）是方法区的一部分。</p>
<p>常量池表（Constant Pool Table）是 Class 文件的一部分，<strong>用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</strong></p>
<p>运行时常量池，在加载类和接口到虚拟机后，就会创建对应的运行时常量池。</p>
<p>JVM 为每个已加载的类型（类或接口）都维护一个常量池。池中的数据项像数组项一样，是通过<strong>索引访问</strong>的。</p>
<p>运行时常量池中包含多种不同的常量，包括编译期就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或者字段引用。此时不再是常量池中的符号地址了，这里换为真实地址。</p>
<ul>
<li>运行时常量池，相对于 Class 文件常量池的另一重要特征是：<strong>具备动态性。</strong></li>
<li><code>String.intern()</code></li>
</ul>
<p>⠀<br>
运行时常量池类似于传统编程语言中的符号表（symboltable），但是它所包含的数据却比符号表要更加丰富一些。</p>
<p>当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则 JVM 会抛 OutOfMemoryError 异常。</p>
<h2 id="方法区使用举例">方法区使用举例</h2>
<p>如下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MethodAreaDemo &#123;</span><br><span class="line">    public static void main(String args[]) &#123;</span><br><span class="line">        int x = 500;</span><br><span class="line">        int y = 100;</span><br><span class="line">        int a = x / y;</span><br><span class="line">        int b = 50;</span><br><span class="line">        System.out.println(a+b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字节码执行过程展示</p>
<p><img src="1542615-20200713213348107-1377674924.png" alt=""></p>
<p>首先现将操作数500放入到操作数栈中</p>
<p><img src="1542615-20200713213354970-1212597160.png" alt=""></p>
<p>然后存储到局部变量表中</p>
<p><img src="1542615-20200713213359099-483522965.png" alt=""></p>
<p>然后重复一次，把 100 放入局部变量表中，最后再将变量表中的 500 和 100 取出，进行操作</p>
<p><img src="1542615-20200713213404744-285710312.png" alt=""></p>
<p>将 500 和 100 进行一个除法运算，在把结果入栈</p>
<p><img src="1542615-20200713213412154-410049567.png" alt=""></p>
<p>在最后就是输出流，需要调用运行时常量池的常量</p>
<p><img src="1542615-20200713213418030-1870134246.png" alt=""></p>
<p>最后调用 invokevirtual（虚方法调用），然后返回</p>
<p><img src="1542615-20200713213423379-1369605517.png" alt=""></p>
<p>返回时</p>
<p><img src="1542615-20200713213428582-1126679088.png" alt=""></p>
<p>程序计数器始终计算的都是当前代码运行的位置，目的是为了方便记录方法调用后能够正常返回，或者是进行了 CPU 切换后，也能回来到原来的代码进行执行。</p>
<h2 id="方法区的演进细节">方法区的演进细节</h2>
<p>首先明确：只有 Hotspot 才有永久代。BEA JRockit、IBMJ9 等来说，是不存在永久代的概念的。原则上如何实现方法区属于虚拟机实现细节，不受《Java 虚拟机规范》管束，并不要求统一</p>
<p>Hotspot 中方法区的变化：</p>
<table>
<thead>
<tr>
<th>JDK 版本</th>
<th>方法区的变化</th>
</tr>
</thead>
<tbody>
<tr>
<td>JDK1.6 及以前</td>
<td>有永久代，静态变量存储在永久代上</td>
</tr>
<tr>
<td>JDK1.7</td>
<td>有永久代，但已经逐步“去永久代”，字符串常量池，静态变量移除，保存在堆中</td>
</tr>
<tr>
<td>JDK1.8</td>
<td>无永久代，类型信息，字段，方法，常量保存在本地内存的元空间，但字符串常量池、静态变量仍然在堆中。</td>
</tr>
<tr>
<td>JDK6 的时候</td>
<td></td>
</tr>
</tbody>
</table>
<p><img src="1542615-20200713213436180-896344092.png" alt=""></p>
<p>JDK7 的时候</p>
<p><img src="1542615-20200713213441766-2133918021.png" alt=""></p>
<p>JDK8 的时候，元空间大小只受物理内存影响</p>
<p><img src="1542615-20200713213448897-153651410.png" alt=""></p>
<h2 id="为什么永久代要被元空间替代？">为什么永久代要被元空间替代？</h2>
<p>官方解释：<a href="http://openjdk.java.net/jeps/122">http://openjdk.java.net/jeps/122</a></p>
<p>JRockit 是和 HotSpot 融合后的结果，因为 JRockit 没有永久代，所以他们不需要配置永久代</p>
<p>随着 Java8 的到来，HotSpot VM 中再也见不到永久代了。但是这并不意味着类的元数据信息也消失了。这些数据被移到了一个<strong>与堆不相连的本地内存区域，这个区域叫做元空间（Metaspace）。</strong></p>
<p>由于类的元数据分配在本地内存中，元空间的最大可分配空间就是系统可用内存空间，这项改动是很有必要的，原因有：</p>
<ul>
<li>
<p>为永久代设置空间大小是很难确定的。 在某些场景下，如果动态加载类过多，容易产生 Perm 区的 OOM。比如某个实际 Web 工 程中，因为功能点比较多，在运行过程中，要不断动态加载很多类，经常出现致命错误。 “Exception in thread‘dubbo client x.x connector’java.lang.OutOfMemoryError:PermGen space” 而元空间和永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。</p>
</li>
<li>
<p>因此，默认情况下，元空间的大小仅受本地内存限制。</p>
</li>
<li>
<p>对永久代进行调优是很困难的。</p>
</li>
</ul>
<p>⠀<br>
有些人认为方法区（如 HotSpot 虚拟机中的元空间或者永久代）是没有垃圾收集行为的，其实不然。《Java 虚拟机规范》对方法区的约束是非常宽松的，提到过可以不要求虚拟机在方法区中实现垃圾收集。事实上也确实有未实现或未能完整实现方法区类型卸载的收集器存在（如 JDK11 时期的 ZGC 收集器就不支持类卸载）。一般来说这个区域的回收效果比较难令人满意，尤其是类型的卸载，条件相当苛刻。但是这部分区域的回收有时又确实是必要的。以前 sun 公司的 Bug 列表中，曾出现过的若干个严重的 Bug 就是由于低版本的 HotSpot 虚拟机对此区域未完全回收而导致内存泄漏</p>
<p>方法区的垃圾收集主要回收两部分内容：常量池中废弃的常量和不在使用的类型</p>
<h2 id="StringTable为什么要调整位置">StringTable为什么要调整位置</h2>
<p>jdk7 中将 StringTable 放到了堆空间中。因为永久代的回收效率很低，在 full gc 的时候才会触发。而 full gc 是老年代的空间不足、永久代不足时才会触发。这就导致 stringTable 回收效率不高。而我们开发中会有大量的字符串被创建，回收效率低，导致永久代内存不足。放到堆里，能及时回收内存。</p>
<h2 id="静态变量存放在那里？">静态变量存放在那里？</h2>
<p>静态引用对应的对象实体始终都存在堆空间</p>
<p>可以使用 jhsdb.ext，需要在 jdk9 的时候才引入的</p>
<p>staticObj 随着 Test 的类型信息存放在方法区，instanceObj 随着 Test 的对象实例存放在 Java 堆，localObject 则是存放在 foo() 方法栈帧的局部变量表中。</p>
<p><img src="1542615-20200713213516630-1510588738.png" alt=""></p>
<p>测试发现：三个对象的数据在内存中的地址都落在 Eden 区范围内。所以结论：只要是对象实例必然会在 Java 堆中分配。</p>
<p>接着，找到了一个引用该 staticobj 对象的地方，是在一个 java.lang.Class 的实例里，并且给出了这个实例的地址，通过 Inspector 查看该对象实例，可以清楚看到这确实是一个 java.lang.Class 类型的对象实例，里面有一个名为 staticobj 的实例字段：</p>
<p><img src="1542615-20200713213522166-615927757.png" alt=""></p>
<p>从《Java 虚拟机规范》所定义的概念模型来看，所有 Class 相关的信息都应该存放在方法区之中，但方法区该如何实现，《Java 虚拟机规范》并未做出规定，这就成了一件允许不同虚拟机自己灵活把握的事情。JDK7 及其以后版本的 HotSpot 虚拟机选择把静态变量与类型在 Java 语言一端的映射class对象存放在一起，存储于 Java 堆之中，从我们的实验中也明确验证了这一点</p>
<h2 id="方法区的垃圾回收">方法区的垃圾回收</h2>
<p>有些人认为方法区（如 Hotspot 虚拟机中的元空间或者永久代）是没有垃圾收集行为的，其实不然。《Java 虚拟机规范》对方法区的约束是非常宽松的，提到过可以不要求虚拟机在方法区中实现垃圾收集。事实上也确实有未实现或未能完整实现方法区类型卸载的收集器存在（如 JDK11 时期的 ZGC 收集器就不支持类卸载）。</p>
<p>一般来说<strong>这个区域的回收效果比较难令人满意，尤其是类型的卸载，条件相当苛刻。<strong>但是这部分区域的回收</strong>有时又确实是必要的</strong>。以前 sun 公司的 Bug 列表中，曾出现过的若干个严重的 Bug 就是由于低版本的 HotSpot 虚拟机对此区域未完全回收而导致内存泄漏。</p>
<p><strong>方法区的垃圾收集主要回收两部分内容：常量池中废弃的常量和不再使用的类型。</strong></p>
<p>先来说说方法区内常量池之中主要存放的两大类常量：字面量和符号引用。字面量比较接近 Java 语言层次的常量概念，如文本字符串、被声明为 final 的常量值等。而符号引用则属于编译原理方面的概念，包括下面三类常量：</p>
<ul>
<li>类和接口的全限定名</li>
<li>字段的名称和描述符</li>
<li>方法的名称和描述符</li>
</ul>
<p>⠀<br>
HotSpot 虚拟机对常量池的回收策略是很明确的，<strong>只要常量池中的常量没有被任何地方引用，就可以被回收。</strong></p>
<p>回收废弃常量与回收 Java 堆中的对象非常类似。（关于常量的回收比较简单，重点是类的回收）</p>
<p>判定一个常量是否“废弃”还是相对简单，而要判定一个类型是否属于“不再被使用的类”的条件就比较苛刻了。需要同时满足下面三个条件：</p>
<ul>
<li>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类及其任何派生子类的实例。</li>
<li>加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如 OSGi、JSP 的重加载等，否则通常是很难达成的。</li>
<li>该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>
</ul>
<p>⠀<br>
Java 虚拟机被允许对满足上述三个条件的无用类进行回收，这里说的仅仅是“被允许”，而并不是和对象一样，没有引用了就必然会回收。关于是否要对类型进行回收，HotSpot 虚拟机提供了 <code>-Xnoclassgc</code> 参数进行控制，还可以使用 <code>-verbose:class</code> 以及 <code>-XX：+TraceClass-Loading</code>、<code>-XX：+TraceClassUnLoading</code> 查看类加载和卸载信息</p>
<p>在大量使用反射、动态代理、CGLib等字节码框架，动态生成 JSP 以及 oSGi 这类频繁自定义类加载器的场景中，<strong>通常都需要 Java 虚拟机具备类型卸载的能力，以保证不会对方法区造成过大的内存压力。</strong></p>
<h2 id="总结">总结</h2>
<p><img src="1542615-20200713213530555-2123448191.png" alt=""></p>
<h2 id="常见面试题">常见面试题</h2>
<p><strong>百度</strong><br>
三面：说一下 JVM 内存模型吧，有哪些区？分别干什么的？</p>
<p><strong>蚂蚁金服：</strong> Java8 的内存分代改进 JVM 内存分哪几个区，每个区的作用是什么？ 一面：JVM 内存分布/内存结构？栈和堆的区别？堆的结构？为什么两个 survivor 区？</p>
<p>二面：Eden 和 survior 的比例分配</p>
<p><strong>小米：</strong><br>
jvm 内存分区，为什么要有新生代和老年代</p>
<p><strong>字节跳动：</strong> 二面：Java 的内存分区 二面：讲讲 jvm 运行时数据库区</p>
<p>什么时候对象会进入老年代？</p>
<p><strong>京东：</strong> JVM 的内存结构，Eden 和 Survivor 比例。</p>
<p>JVM 内存为什么要分成新生代，老年代，持久代。新生代中为什么要分为 Eden 和 survivor。</p>
<p><strong>天猫：</strong> 一面：JVM 内存模型以及分区，需要详细到每个区放什么。</p>
<p>一面：JVM 的内存模型，Java8 做了什么改</p>
<p><strong>拼多多：</strong><br>
JVM 内存分哪几个区，每个区的作用是什么？</p>
<p><strong>美团：</strong> java 内存分配 jvm 的永久代中会发生垃圾回收吗？</p>
<p>一面：jvm 内存分区，为什么要有新生代和老年代？</p>
<h2 id="个人理解">个人理解</h2>
<p>元空间中的元其实跟元数据中的元是一个概念，都是描述的自身本身的基本结构属性。如 元空间中存储的是.class文件(描述类的结构属性) ，元数据中存的是描述结果集的自身结构属性信息(这里用jdbc中的结果集元数据来举例)</p>
]]></content>
      <categories>
        <category>内存管理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>内存模型</tag>
      </tags>
  </entry>
  <entry>
    <title>json解析库比对</title>
    <url>/2018/03/29/json%E8%A7%A3%E6%9E%90%E5%BA%93%E6%AF%94%E5%AF%B9/</url>
    <content><![CDATA[<h2 id="一-、各个JSON技术的简介和优劣">一 、各个JSON技术的简介和优劣</h2>
<h5 id="1-json-lib">1.json-lib</h5>
<p>json-lib最开始的也是应用最广泛的json解析工具，json-lib 不好的地方确实是依赖于很多第三方包，包括commons-beanutils.jar，commons-collections-3.2.jar，commons-lang-2.6.jar，commons-logging-1.1.1.jar，ezmorph-1.0.6.jar， 对于复杂类型的转换，json-lib对于json转换成bean还有缺陷，比如一个类里面会出现另一个类的list或者map集合，json-lib从json到bean的转换就会出现问题。 json-lib在功能和性能上面都不能满足现在互联网化的需求。</p>
<h5 id="2-开源的Jackson">2.开源的Jackson</h5>
<span id="more"></span>
<p>相比json-lib框架，Jackson所依赖的jar包较少，简单易用并且性能也要相对高些。</p>
<p>而且Jackson社区相对比较活跃，更新速度也比较快。</p>
<p>Jackson对于复杂类型的json转换bean会出现问题，一些集合Map，List的转换出现问题。</p>
<p>Jackson对于复杂类型的bean转换Json，转换的json格式不是标准的Json格式</p>
<h5 id="3-Google的Gson">3.Google的Gson</h5>
<p>Gson是目前功能最全的Json解析神器，Gson当初是为因应Google公司内部需求而由Google自行研发而来，</p>
<p>但自从在2008年五月公开发布第一版后已被许多公司或用户应用。</p>
<p>Gson的应用主要为toJson与fromJson两个转换函数，无依赖，不需要例外额外的jar，能够直接跑在JDK上。</p>
<p>而在使用这种对象转换之前需先创建好对象的类型以及其成员才能成功的将JSON字符串成功转换成相对应的对象。</p>
<p>类里面只要有get和set方法，Gson完全可以将复杂类型的json到bean或bean到json的转换，是JSON解析的神器。</p>
<p>Gson在功能上面无可挑剔，但是性能上面比FastJson有所差距。</p>
<h5 id="4-阿里巴巴的FastJson">4.阿里巴巴的FastJson</h5>
<p>Fastjson是一个Java语言编写的高性能的JSON处理器,由阿里巴巴公司开发。</p>
<p>无依赖，不需要例外额外的jar，能够直接跑在JDK上。</p>
<p>FastJson在复杂类型的Bean转换Json上会出现一些问题，可能会出现引用的类型，导致Json转换出错，需要制定引用。</p>
<p>FastJson采用独创的算法，将parse的速度提升到极致，超过所有json库。</p>
<p>综上4种Json技术的比较，在项目选型的时候可以使用Google的Gson和阿里巴巴的FastJson两种并行使用，</p>
<p>如果只是功能要求，没有性能要求，可以使用google的Gson，</p>
<p>如果有性能上面的要求可以使用Gson将bean转换json确保数据的正确，使用FastJson将Json转换Bean</p>
<h2 id="二、Google的Gson包的使用简介。">二、Google的Gson包的使用简介。</h2>
<p>Gson类：解析json的最基础的工具类</p>
<p>JsonParser类：解析器来解析JSON到JsonElements的解析树</p>
<p>JsonElement类：一个类代表的JSON元素</p>
<p>JsonObject类：JSON对象类型</p>
<p>JsonArray类：JsonObject数组</p>
<p>TypeToken类：用于创建type，比如泛型List&lt;?&gt;</p>
<h5 id="1-maven依赖">(1)maven依赖</h5>
<p>com.google.code.gson</p>
<p>gson</p>
<p>2.2.4</p>
<h5 id="2-基础转换类">(2)基础转换类</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String id;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="built_in">super</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> id;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.id = id;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;  </span><br><span class="line">    <span class="keyword">private</span> String sex;  </span><br><span class="line">    <span class="keyword">private</span> String describe;  </span><br><span class="line">    <span class="keyword">private</span> Set books;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="built_in">super</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> sex;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.sex = sex;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> Set <span class="title function_">getBooks</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> books;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBooks</span><span class="params">(Set books)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.books = books;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescribe</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> describe;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescribe</span><span class="params">(String describe)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.describe = describe;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h5 id="3-bean转换json">(3)bean转换json</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();  </span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> gson.toJson(obj);  </span><br></pre></td></tr></table></figure>
<p>obj是对象</p>
<h5 id="4-json转换bean">(4)json转换bean</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();  </span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;2\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;&quot;</span>;  </span><br><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> gson.fromJson(json, Book.class); </span><br></pre></td></tr></table></figure>
<h5 id="5-json转换复杂的bean，比如List，Set">(5)json转换复杂的bean，比如List，Set</h5>
<p>将json转换成复杂类型的bean,需要使用TypeToken</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();  </span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;[&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;,&#123;\&quot;id\&quot;:\&quot;2\&quot;,\&quot;name\&quot;:\&quot;java技术\&quot;&#125;]&quot;</span>;  </span><br><span class="line"><span class="comment">//将json转换成List  </span></span><br><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> gson.fromJson(json,<span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;LIST&gt;() &#123;&#125;.getType());  </span><br><span class="line"><span class="comment">//将json转换成Set  </span></span><br><span class="line"><span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> gson.fromJson(json,<span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;SET&gt;() &#123;&#125;.getType());  </span><br></pre></td></tr></table></figure>
<h5 id="6-通过json对象直接操作json以及一些json的工具">(6)通过json对象直接操作json以及一些json的工具</h5>
<h6 id="a-格式化Json">a)格式化Json</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;[&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;,&#123;\&quot;id\&quot;:\&quot;2\&quot;,\&quot;name\&quot;:\&quot;java技术\&quot;&#125;]&quot;</span>;  </span><br><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GsonBuilder</span>().setPrettyPrinting().create();  </span><br><span class="line"><span class="type">JsonParser</span> <span class="variable">jp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonParser</span>();  </span><br><span class="line"><span class="type">JsonElement</span> <span class="variable">je</span> <span class="operator">=</span> jp.parse(json);  </span><br><span class="line">json = gson.toJson(je);  </span><br></pre></td></tr></table></figure>
<h6 id="b-判断字符串是否是json-通过捕捉的异常来判断是否是json">b)判断字符串是否是json,通过捕捉的异常来判断是否是json</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;[&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;,&#123;\&quot;id\&quot;:\&quot;2\&quot;,\&quot;name\&quot;:\&quot;java技术\&quot;&#125;]&quot;</span>;  </span><br><span class="line"><span class="type">boolean</span> jsonFlag;  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">JsonParser</span>().parse(str).getAsJsonObject();  </span><br><span class="line">jsonFlag = <span class="literal">true</span>;  </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">jsonFlag = <span class="literal">false</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h6 id="c-从json串中获取属性">c)从json串中获取属性</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;&quot;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> <span class="string">&#x27;id&#x27;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">propertyValue</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line"><span class="type">JsonParser</span> <span class="variable">jsonParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonParser</span>();  </span><br><span class="line"><span class="type">JsonElement</span> <span class="variable">element</span> <span class="operator">=</span> jsonParser.parse(json);  </span><br><span class="line"><span class="type">JsonObject</span> <span class="variable">jsonObj</span> <span class="operator">=</span> element.getAsJsonObject();  </span><br><span class="line">propertyValue = jsonObj.get(propertyName).toString();  </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">propertyValue = <span class="literal">null</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h6 id="d-除去json中的某个属性">d)除去json中的某个属性</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;&quot;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> <span class="string">&#x27;id&#x27;</span>;  </span><br><span class="line"><span class="type">JsonParser</span> <span class="variable">jsonParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonParser</span>();  </span><br><span class="line"><span class="type">JsonElement</span> <span class="variable">element</span> <span class="operator">=</span> jsonParser.parse(json);  </span><br><span class="line"><span class="type">JsonObject</span> <span class="variable">jsonObj</span> <span class="operator">=</span> element.getAsJsonObject();  </span><br><span class="line">jsonObj.remove(propertyName);  </span><br><span class="line">json = jsonObj.toString();  </span><br></pre></td></tr></table></figure>
<h6 id="e-向json中添加属性">e)向json中添加属性</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;&quot;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> <span class="string">&#x27;desc&#x27;</span>;  </span><br><span class="line"><span class="type">Object</span> <span class="variable">propertyValue</span> <span class="operator">=</span> <span class="string">&quot;json各种技术的调研&quot;</span>;  </span><br><span class="line"><span class="type">JsonParser</span> <span class="variable">jsonParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonParser</span>();  </span><br><span class="line"><span class="type">JsonElement</span> <span class="variable">element</span> <span class="operator">=</span> jsonParser.parse(json);  </span><br><span class="line"><span class="type">JsonObject</span> <span class="variable">jsonObj</span> <span class="operator">=</span> element.getAsJsonObject();  </span><br><span class="line">jsonObj.addProperty(propertyName, <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(propertyValue));  </span><br><span class="line">json = jsonObj.toString();  </span><br></pre></td></tr></table></figure>
<h6 id="f-修改json中的属性">f)修改json中的属性</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;&quot;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> <span class="string">&#x27;name&#x27;</span>;  </span><br><span class="line"><span class="type">Object</span> <span class="variable">propertyValue</span> <span class="operator">=</span> <span class="string">&quot;json各种技术的调研&quot;</span>;  </span><br><span class="line"><span class="type">JsonParser</span> <span class="variable">jsonParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonParser</span>();  </span><br><span class="line"><span class="type">JsonElement</span> <span class="variable">element</span> <span class="operator">=</span> jsonParser.parse(json);  </span><br><span class="line"><span class="type">JsonObject</span> <span class="variable">jsonObj</span> <span class="operator">=</span> element.getAsJsonObject();  </span><br><span class="line">jsonObj.remove(propertyName);  </span><br><span class="line">jsonObj.addProperty(propertyName, <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(propertyValue));  </span><br><span class="line">json = jsonObj.toString();  </span><br></pre></td></tr></table></figure>
<h6 id="g-判断json中是否有属性">g)判断json中是否有属性</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;&quot;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> <span class="string">&#x27;name&#x27;</span>;  </span><br><span class="line"><span class="type">boolean</span> <span class="variable">isContains</span> <span class="operator">=</span> <span class="literal">false</span> ;  </span><br><span class="line"><span class="type">JsonParser</span> <span class="variable">jsonParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonParser</span>();  </span><br><span class="line"><span class="type">JsonElement</span> <span class="variable">element</span> <span class="operator">=</span> jsonParser.parse(json);  </span><br><span class="line"><span class="type">JsonObject</span> <span class="variable">jsonObj</span> <span class="operator">=</span> element.getAsJsonObject();  </span><br><span class="line">isContains = jsonObj.has(propertyName);  </span><br></pre></td></tr></table></figure>
<h6 id="h-json中日期格式的处理">h)json中日期格式的处理</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">GsonBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GsonBuilder</span>();  </span><br><span class="line">builder.setDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>);  </span><br><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> builder.create();  </span><br></pre></td></tr></table></figure>
<p>然后使用gson对象进行json的处理，如果出现日期Date类的对象，就会按照设置的格式进行处理</p>
<h6 id="i-json中对于Html的转义">i)json中对于Html的转义</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();  </span><br><span class="line"><span class="comment">// 这种对象默认对Html进行转义，如果不想转义使用下面的方法  </span></span><br><span class="line"><span class="type">GsonBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GsonBuilder</span>();  </span><br><span class="line">builder.disableHtmlEscaping();  </span><br><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> builder.create();  </span><br></pre></td></tr></table></figure>
<h2 id="三、阿里巴巴的FastJson包的使用简介。">三、阿里巴巴的FastJson包的使用简介。</h2>
<h5 id="1-maven依赖-2">(1)maven依赖</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.alibaba</span><br><span class="line"></span><br><span class="line">fastjson</span><br><span class="line"></span><br><span class="line">1.1.22</span><br></pre></td></tr></table></figure>
<h5 id="2-基础转换类-2">(2)基础转换类</h5>
<p>同上</p>
<h5 id="3-bean转换json-2">(3)bean转换json</h5>
<p>将对象转换成格式化的json</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JSON.toJSONString(obj,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>将对象转换成非格式化的json</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JSON.toJSONString(obj,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>obj设计对象</p>
<p>对于复杂类型的转换,对于重复的引用在转成json串后在json串中出现引用的字符,比如 $ref&quot;:&quot;$[0].books[1]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();  </span><br><span class="line">Set books= <span class="keyword">new</span> <span class="title class_">HashSet</span>();  </span><br><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();  </span><br><span class="line">books.add(book);  </span><br><span class="line">stu.setBooks(books);  </span><br><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();  </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)  </span><br><span class="line">list.add(stu);  </span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(list,<span class="literal">true</span>); </span><br></pre></td></tr></table></figure>
<h5 id="4-json转换bean-2">(4)json转换bean</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;2\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;&quot;</span>;  </span><br><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> JSON.parseObject(json, Book.class); </span><br></pre></td></tr></table></figure>
<h5 id="5-json转换复杂的bean，比如List，Map">(5)json转换复杂的bean，比如List，Map</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;[&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;,&#123;\&quot;id\&quot;:\&quot;2\&quot;,\&quot;name\&quot;:\&quot;java技术\&quot;&#125;]&quot;</span>;  </span><br><span class="line"><span class="comment">//将json转换成List  </span></span><br><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> JSON.parseObject(json,<span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;ARRAYLIST&gt;()&#123;&#125;);  </span><br><span class="line"><span class="comment">//将json转换成Set  </span></span><br><span class="line"><span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> JSON.parseObject(json,<span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;HASHSET&gt;()&#123;&#125;);  </span><br></pre></td></tr></table></figure>
<h5 id="6-通过json对象直接操作json">(6)通过json对象直接操作json</h5>
<h6 id="a-从json串中获取属性">a)从json串中获取属性</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> <span class="string">&#x27;id&#x27;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">propertyValue</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;&quot;</span>;  </span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(json);  </span><br><span class="line">propertyValue = obj.get(propertyName));  </span><br></pre></td></tr></table></figure>
<h6 id="b-除去json中的某个属性">b)除去json中的某个属性</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> <span class="string">&#x27;id&#x27;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">propertyValue</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;&quot;</span>;  </span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(json);  </span><br><span class="line"><span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> obj.keySet();  </span><br><span class="line">propertyValue = set.remove(propertyName);  </span><br><span class="line">json = obj.toString();  </span><br></pre></td></tr></table></figure>
<h6 id="c-向json中添加属性">c)向json中添加属性</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> <span class="string">&#x27;desc&#x27;</span>;  </span><br><span class="line"><span class="type">Object</span> <span class="variable">propertyValue</span> <span class="operator">=</span> <span class="string">&quot;json的玩意儿&quot;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;&quot;</span>;  </span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(json);  </span><br><span class="line">obj.put(propertyName, JSON.toJSONString(propertyValue));  </span><br><span class="line">json = obj.toString();  </span><br></pre></td></tr></table></figure>
<h6 id="d-修改json中的属性">d)修改json中的属性</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> <span class="string">&#x27;name&#x27;</span>;  </span><br><span class="line"><span class="type">Object</span> <span class="variable">propertyValue</span> <span class="operator">=</span> <span class="string">&quot;json的玩意儿&quot;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;&quot;</span>;  </span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(json);  </span><br><span class="line"><span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> obj.keySet();  </span><br><span class="line"><span class="keyword">if</span>(set.contains(propertyName))  </span><br><span class="line">obj.put(propertyName, JSON.toJSONString(propertyValue));  </span><br><span class="line">json = obj.toString();  </span><br></pre></td></tr></table></figure>
<h6 id="e-判断json中是否有属性">e)判断json中是否有属性</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> <span class="string">&#x27;name&#x27;</span>;  </span><br><span class="line"><span class="type">boolean</span> <span class="variable">isContain</span> <span class="operator">=</span> <span class="literal">false</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;&quot;</span>;  </span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(json);  </span><br><span class="line"><span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> obj.keySet();  </span><br><span class="line">isContain = set.contains(propertyName);  </span><br></pre></td></tr></table></figure>
<h6 id="f-json中日期格式的处理">f)json中日期格式的处理</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();  </span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONStringWithDateFormat(obj, <span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>); </span><br></pre></td></tr></table></figure>
<p>使用JSON.toJSONStringWithDateFormat,该方法可以使用设置的日期格式对日期进行转换</p>
<h2 id="四、json-lib包的使用简介。">四、json-lib包的使用简介。</h2>
<h5 id="1-maven依赖-3">(1)maven依赖</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net.sf.json-lib</span><br><span class="line"></span><br><span class="line">json-lib</span><br><span class="line"></span><br><span class="line">jdk15</span><br><span class="line"></span><br><span class="line">2.2.2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">commons-beanutils</span><br><span class="line"></span><br><span class="line">commons-beanutils</span><br><span class="line"></span><br><span class="line">1.8.3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">commons-collections</span><br><span class="line"></span><br><span class="line">commons-collections</span><br><span class="line"></span><br><span class="line">3.2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">commons-lang</span><br><span class="line"></span><br><span class="line">commons-lang</span><br><span class="line"></span><br><span class="line">2.6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">commons-logging </span><br><span class="line"></span><br><span class="line">commons-logging </span><br><span class="line"></span><br><span class="line">1.1.1 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net.sf.ezmorph</span><br><span class="line"></span><br><span class="line">ezmorph</span><br><span class="line"></span><br><span class="line">1.0.6</span><br></pre></td></tr></table></figure>
<h5 id="2-基础转换类-3">(2)基础转换类</h5>
<p>同上</p>
<h5 id="3-bean转换json-3">(3)bean转换json</h5>
<h6 id="a-将类转换成Json-obj是普通的对象，不是List，Map的对象">a)将类转换成Json,obj是普通的对象，不是List，Map的对象</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSONObject.fromObject(obj).toString(); </span><br></pre></td></tr></table></figure>
<h6 id="b-将List，Map转换成Json">b)将List，Map转换成Json</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSONArray.fromObject(list).toString();  </span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSONArray.fromObject(map).toString();  </span><br></pre></td></tr></table></figure>
<h5 id="4-json转换bean-3">(4)json转换bean</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;&quot;</span>;  </span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonObj</span> <span class="operator">=</span> JSONObject.fromObject(json);  </span><br><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> (Book)JSONObject.toBean(jsonObj,Book.class);</span><br></pre></td></tr></table></figure>
<h5 id="5-json转换List-对于复杂类型的转换会出现问题">(5)json转换List,对于复杂类型的转换会出现问题</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;[&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;,&#123;\&quot;id\&quot;:\&quot;2\&quot;,\&quot;name\&quot;:\&quot;Java技术\&quot;&#125;]&quot;</span>;  </span><br><span class="line"><span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> JSONArray.fromObject(json);  </span><br><span class="line">JSONObject jsonObject;  </span><br><span class="line">T bean;  </span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> jsonArray.size();  </span><br><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(size);  </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;  </span><br><span class="line">jsonObject = jsonArray.getJSONObject(i);  </span><br><span class="line">bean = (T) JSONObject.toBean(jsonObject, beanClass);  </span><br><span class="line">list.add(bean);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h5 id="6-json转换Map">(6)json转换Map</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;&quot;</span>;  </span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSONObject.fromObject(jsonString);  </span><br><span class="line"><span class="type">Iterator</span> <span class="variable">keyIter</span> <span class="operator">=</span> jsonObject.keys();  </span><br><span class="line">String key;  </span><br><span class="line">Object value;  </span><br><span class="line"><span class="type">Map</span> <span class="variable">valueMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();  </span><br><span class="line"><span class="keyword">while</span> (keyIter.hasNext()) &#123;  </span><br><span class="line">key = (String) keyIter.next();  </span><br><span class="line">value = jsonObject.get(key).toString();  </span><br><span class="line">valueMap.put(key, value);  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h5 id="7-json对于日期的操作比较复杂，需要使用JsonConfig-比Gson和FastJson要麻烦多了">(7)json对于日期的操作比较复杂，需要使用JsonConfig,比Gson和FastJson要麻烦多了</h5>
<p>创建转换的接口实现类，转换成指定格式的日期</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DateJsonValueProcessor</span> <span class="keyword">implements</span> <span class="title class_">JsonValueProcessor</span>&#123;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_PATTERN</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>;   </span><br><span class="line"><span class="keyword">private</span> DateFormat dateFormat;   </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DateJsonValueProcessor</span><span class="params">(String datePattern)</span> &#123;   </span><br><span class="line"><span class="keyword">try</span> &#123;   </span><br><span class="line">dateFormat = <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(datePattern);   </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;   </span><br><span class="line">dateFormat = <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(DEFAULT_DATE_PATTERN);   </span><br><span class="line">&#125;   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">processArrayValue</span><span class="params">(Object value, JsonConfig jsonConfig)</span> &#123;   </span><br><span class="line"><span class="keyword">return</span> process(value);   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">processObjectValue</span><span class="params">(String key, Object value,   </span></span><br><span class="line"><span class="params">JsonConfig jsonConfig)</span> &#123;   </span><br><span class="line"><span class="keyword">return</span> process(value);   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">private</span> Object <span class="title function_">process</span><span class="params">(Object value)</span> &#123;   </span><br><span class="line"><span class="keyword">return</span> dateFormat.format[<span class="number">1</span>];  </span><br><span class="line">Map&lt;STRING,DATE&gt; birthDays = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;STRING,DATE&gt;();  </span><br><span class="line">birthDays.put(<span class="string">&quot;WolfKing&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());  </span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSONObject.fromObject(birthDays, jsonConfig);  </span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> jsonObject.toString();  </span><br><span class="line">System.out.println(json);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h5 id="8-JsonObject-对于json的操作和处理">(8)JsonObject 对于json的操作和处理</h5>
<h6 id="a-从json串中获取属性-2">a)从json串中获取属性</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;&quot;</span>;  </span><br><span class="line"><span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;name&quot;</span>;  </span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSONObject.fromObject(jsonString);  </span><br><span class="line">value = jsonObject.get(key);  </span><br><span class="line">jsonString = jsonObject.toString(); </span><br></pre></td></tr></table></figure>
<h6 id="b-除去json中的某个属性-2">b)除去json中的某个属性</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;&quot;</span>;  </span><br><span class="line"><span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;name&quot;</span>;  </span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSONObject.fromObject(jsonString);  </span><br><span class="line">value = jsonObject.remove(key);  </span><br><span class="line">jsonString = jsonObject.toString();  </span><br></pre></td></tr></table></figure>
<h6 id="c-向json中添加和修改属性，有则修改，无则添加">c)向json中添加和修改属性，有则修改，无则添加</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;&quot;</span>;  </span><br><span class="line"><span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;desc&quot;</span>;  </span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="string">&quot;json的好东西&quot;</span>;  </span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSONObject.fromObject(jsonString);  </span><br><span class="line">jsonObject.put(key,value);  </span><br><span class="line">jsonString = jsonObject.toString();  </span><br></pre></td></tr></table></figure>
<h6 id="d-判断json中是否有属性">d)判断json中是否有属性</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;Json技术\&quot;&#125;&quot;</span>;  </span><br><span class="line"><span class="type">boolean</span> <span class="variable">containFlag</span> <span class="operator">=</span> <span class="literal">false</span>;  </span><br><span class="line"><span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;desc&quot;</span>;  </span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSONObject.fromObject(jsonString);  </span><br><span class="line">containFlag = jsonObject.containsKey(key);  </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android研发</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>jackson</tag>
        <tag>fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>编程之法</title>
    <url>/2018/05/02/method/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6f976cf31b96739fcee5febe5e155a70cf3acb1c70f2c5a144dad096e13f6ebd">2f95905209dd33c3b7943ae67169d1014da1e6f7792e93dfdfabe601f90c1abf064f76deb256fb06616ffefa3941df1f4c9aebcb6db61186b8754d9f0bf33d3227aea0baaaf69e682eec17b93160d82db48fa2916dce84298a86de71f767023fe427405abf4bd3c91faaaecd08da21d03616678499214881c7899007f98718e25a6d917b7cb9379bde2af34fa7738927774c7ccbcec3bc57083a380aed1dfdd151e08862189ee23617d56053825f4d38f5476e845ec86bc42674e9de5d77957df8eb67b491bdf16ea3c577f67ce98594848d8ba47e7d16cf9b1bf89656674ac1ee11d6e75f5031e030a1b63e5506f65ad53db45f405c5290e5924a0f167e6f534d014692226b41875027508c7b5159a1968c64fef6a0bb7ae7ae066df444e6e0a4d5ce2de8517e5f9416d6a36858a8fc4d2e0930a4cb04c0dc78a679df0004a6538628f952e8c417d77fd889152620e9d22858076140242ed421ae9070344b9a8e0faa0e8db486f2b93c63468f5bb69d814e2a8dbded75b6688084f531c8f4e27d5b7d897978a674716327f3a0691ecea444de24d9b0dcd3ec9aee868fa966868b0fb7b68c9497c3237eb3cd4a99892bee1b55c46c64d94c6f3ca427e507cb826d1ba6ab0e03fcbf9484d366fa1c4cc2eb4105dd696475d1de8c24dd7dcb44c6365540abc6a3c6d23e3808b930c8155cadd24c2c157103a531c3c23d08691729353b232ecd4316e9f921e6e311ec97478d7c648084b6b21fedd7c304ed5441c1cd4b04644da77526296b1d68e0cbb5eb1115f544b1c7dbf04a2d5ff691e5874eef8f8c90297f55fd30f97111d52d0818a1b427b3ffaa6864fa5f84640f187ef2f6b8b87d0d560a1e16059980b428c75268bd5663fb49e4b85da169cd20e31c973c7263a80320af48ea3bcd901839676ce4a17105cb7ccb1281e9f7c0e57e6d3f4fa85539cc35a58cdfcd5a26d0d2f30685f5963c5dab823a435a1a94d9f42caf0fce95d4dee18e94fdad22f8de6999bcc5bdab92525426bd0bb90f1f9091aa5771b687b756e9ad9c9d010120df6de5d5cca4b9f1d174dc1220199ede0e230a19ac0453ea6d7efdb682237432fd7ed4a59936635c0b3a6d31c4a19dc49cfbb56798287bb1efef4734895db8821f6c3983b948e109dea7a78718d69ed8ee7ee75086f452d85c7a4cdd706424cf8177d9487ceb39adf1e35ddef080cfac4cea5769d2965f62ecac1642e13e951e4548a43485340b94c311ce00de568d40df0efbf06e1762b563b5616a5738b329ef5b94ac407b2ab6e4772872a397508c2cc2328ee17786624279c672ed8f0d88b2c289f8ec0047a31ccddae080ccf9558aeed1324ef60c1c75592d79ea947212bcb55bcfc67391f8f65a60e99fcfcf0240957e4748566553ce9b84bb97008b1514f6c3f7adb4de6025b4a78055ea0a1bcdfd6c4c0602703d1a188c65b23d8b6526e8aa141af9b6e510c36079fd0ed61cb339200bd542c9c2f9ecb30cb1870028d1108ced232077766056aea48b8c195bbbda3d001ba0a902fca23a33d1f875a54a143a13d64ff879a301dffde35072d5e3a8e59a1b2ca535ceb7140cca0366a4a524c222d662b97f68905ec0f6c3b72c4447fd2d27ad9a194a86055d88b1e19e537967a97320f28f22a691518dbbc3bc96efad7d0af9e2c10285d5a27304ca0bff4cb04fea7e6dcb5a3821b0b155fcee70033788f23c07b2c3cbd87bc0624856169454da3637e43b8846c2e7d4c17bff32dfa2a82c90818f95eba6fb5e7550d9cc2a8219ab5b0699cf4316d7b8ff96a7c5459e820a32087053359379961586bef506dcb2e2c7c62430381399536a06fdaf43ba108ce22b1575017f967ba2909ef4b7a8792d1a0bc51406688e1fc5e8d4621c285a5f762030004e0097860efdf1e50ea29fb343b035d735e4af09d16373763c58126c40cb73b37c63c310076f4e1d84ea56206296d00dd07fda891d5f9aa3a7d2dbe0e7c58a740d2101522f9222ba6e439575e15dcfe5e55471f70801d8badc13266082e5e1b43c7cb44ed71ed8c2cead2e97b903ca7e4fc79048d5d3591384c98b75c8be08f595a0948a4894b7ed042324d55692cb75e88f11f345bd0e0b2b1f4fa9b70b82b124d567eb75249b3c38f2c13b212dcc2031176a89fa42982ebb8dafbf7653f83277bb0ca1cc887cb15212c84f73ced5710be613d35b6c4303ceb9af22ea10870589dc694e0188240e42a33558e524e92802b8ed6b772cfacd5311eed1685ef000b1f459637968b2dca0223ddd28b769436eb99dc73d2707e9a07f49cd2fba3b95b5c599c998a5f04893e6e15327cc9ea54a511f97119c879d90aaa47932da0be2b5790046e689748e9d68c61716ffd1e78bfea3f9d4d78769beceb252613420f7b425434f0b4c08943b7d4bcc6a3975c458dbf7ea0a2e8f65224e6258a8d70190f44011e77c01a94bbe226bf529fe2d63294f3a13b5e0f86ad9b6104442d0940525f360c1fe1fc517449a09869a5dd6eb6bf1705a8a86f02df1a474e51eaf71892858181ce3c802fde007feaa14b6d1b0417225eaef8600675ae1d9acaf89bb85297101ee99a6b16e2c9b53dc99d7cf60fa7da42f28e83e6fd2de8977772f1f4e6c650c4213ef6e775cac0a983093db05a070871003275cb5b1403a55e6f993b71a7995d5f784bce7928b1307a8f061869df4bfb8beddd758b0a8d59f39b5340b6d60be9790c49dd8de64d629f1d9be6d854bbfd9afcee36db3be9a4a049c8cc7d8ae491d71242a80903a5a37ab8e9cafe62555fc958593a87760ca965448b83b1a22d956185f85bfe391b3f75fa1b0f6b0392c061ca5dcb97490dd366e94197a38cc9d1b39c6c34f035b689e8dbc560818f4a579368fa4403f10ed1d436e425f096195ecf9a353d5b6d513a021bb99fd348258ae6896a51a3eb13d524a1849183cb058449dc15ca7773da3641afc6626892053cf6c804d9ab61faa29a81f1150bd420f3fbb7d94cd4152b17d50f707eee858ef7eba3406ef090fa88896197c28be2ff09c70593e1b3d482f71c8d9ccfd90f86b6b766b40563643f5448d3e6e58c3716f55936a95b9b339d5a100f6d2d871711a98899eddf563bd1c5c2743c26134a946067b67210b59de7c5aff0ec6beb24f7b00a215c8778818fccf12ad412f29f946edc5be31aba7e45e50413da92efc4598619a04bec5a03701fe0c010c966d88db4c64c66f6ad544cc0be4a25189f49a8137648a767ae12b96926c96150bcb9d1ac7df0f306262fb56498acf7fff00aead155cf8ae96a9013d4a0d40c45eaead2c392b9c47237e8166e88e7feac763591d4044ea8dbd91c31cc4abeae89084511dece7873b7ca117d0bc65745e08cc977b8338456e9af0dd9dfa94bae69ab1c1d1cd46f4927087431305dc85a6231e000a55d05979cf8679e1302cc4849b46eff965e8830ed50339f58d497cf246fbd9debad7055fbbac80f9a61b73ea322645baa101e9e304034f7bc930ca5f366ac11416b21ab3db6b252c2c49a5f4c8f05c5ab0fec04cf0b90e8445fe6d2995208c35267a1526bce642cabc8a8ac34ed8cd215a89a6ca56b0119afdc8d8d12aea8a488def99bb9a2c0a091d278b23b9b25cba13d49efbadb4660741931f5764ffbe902789f5ff996262c4a6be78735068bda6ac5b11b54bb0f252cf77fe29f3c71729bcd7234f8990ff4bc5bf0c59acc9db4731e942cbabeaa6a49ac9f37486000512ad58f528d282d378c1a2feb254ec7ec53faa168863901d26528cbed30e51d1553622c750d982fe2c431158bbbe6522782eda288ca09bf948a4341e67d11ed0e851f43b4fcbf711002d51edc779dc25746e1e921909df704830b68df95c57f83e99d3911f43b0ffc9ff6e3aab74f00c97a0247c1ef0debbbe5c7f0d2b58ce48da576c6cdc2e9caec7b559a8617afb302796a74c105aaec1c02d16c9c60374466a77c9a2edd8a29a44019a1f16712e46837263afb53339da7d2c877bb0b58a13921812c014ec9bde4f05a70b3e7ed004c6677323a18addeb6e283747319290301fff3e4aa0a84a2a003a73aeb7822060835aab4851c931bffbbdea761c2662205ee982481c40bb8e1827c6b96eca94d8e150bc79607909d9303c1addf6a416f5944663631993a62c1a0715ce54b8e9bfb41ea85935b5efba7be55a8b5c14a2f583fa23d878000fc3e1dc34dc0a6bc022a5fdce09da0ffc6b47a17b3a299900f3d4bebb4886579ed128447e590fe11118544c85a45906f2a19da4df5ec80417b69c69ce342bc67f62d843dbb0a6bc157d0cd52ab4a841544236da96d679dfde5bcf0b5e5d6282c4f986eda44dd9ae53388439c861660305a7b735836bcc7f444fd7f7eed6651db55a52b45584c564fa769d36c693aef9ea38690b14e8f44b86f68327ded49a7443274aa67355dcd14c443bbf713ce7f056a9f523399f6e805a39da0428ae2f759b3b946b8167d868ac44c7c9ba98508bab142b3b164580900fc1747e8d604e74e62b57d0f23b7ace2a6f38b6e0468cbaa3e37dc299faf8da184c675a1dfb367356885489ec92dfb0ce25859cb230a3414a04b027ae71c8a0920264e1b9cf8cdc48cc02a7eef428c72dc267454cdcedab8446010adf6f114b820450ad6087afe471eef280904b844d391a0d0d58a23bc66f6281dc56f0a04af8bbb44e1f009a4fc4e136898edbac8bf889b770e539a540a0a6ca225569c45d393c68542011e2e54ed573984882c87790da6937eb760ed5e434ffe2ec6b1173d80d51a0a9eb2234063968342b6b983aafd5824c0678f99c09f4c97e149b235bf43b7d2fb541ae9a5e4f1087bdab7bde40b7deb8c85514d4eea3d39abc85d3c0de306911c34ccc6ab1277b5dd99a17e48636f36d5a95a134a46ce56275c056ff23a6d78deff3b7511f763838a6a295aec9b3aa94c5a62b1d2f4aceb7202ff539b24485c284678620d584825c55ab1787a974aed09c49ea38a97d3119f5264bee27b80cec79e34cb83729dfa001d82e5a7320a3d92d717fc07896b51336639e8d2a4abc77028a3d2878a1c1ead01054aea88b432fb968d1eceb8db0809fc27485a41f6d020e1add065f34683bd27d89856f3daa33ed45b38a7ed4b578803f3d3135070e5a4a11542e87c768bc31a22316fd0ded083cf13b66d9bae0</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章需要解密才可以阅读.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Android研发</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>一种极低成本的Android屏幕适配方式</title>
    <url>/2018/10/25/%E4%B8%80%E7%A7%8D%E6%9E%81%E4%BD%8E%E6%88%90%E6%9C%AC%E7%9A%84Android%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>在Android开发中，由于Android碎片化严重，屏幕分辨率千奇百怪，而想要在各种分辨率的设备上显示基本一致的效果，适配成本越来越高。虽然Android官方提供了dp单位来适配，但其在各种奇怪分辨率下表现却不尽如人意，因此下面探索一种简单且低侵入的适配方式。</p>
<p><strong>传统dp适配方式的缺点</strong></p>
<span id="more"></span>
<p>android中的dp在渲染前会将dp转为px，计算公式：</p>
<ul>
<li>px = density * dp;</li>
<li>density = dpi / 160;</li>
<li>px = dp * (dpi / 160);</li>
</ul>
<p>而dpi是根据屏幕真实的分辨率和尺寸来计算的，每个设备都可能不一样的。</p>
<p><strong>屏幕尺寸、分辨率、像素密度三者关系</strong></p>
<p>通常情况下，一部手机的分辨率是宽x高，屏幕大小是以寸为单位，那么三者的关系是：</p>
<p>举个例子：屏幕分辨率为：1920*1080，屏幕尺寸为5寸的话，那么dpi为440。</p>
<p><strong>这样会存在什么问题呢？</strong></p>
<p>假设我们UI设计图是按屏幕宽度为360dp来设计的，那么在上述设备上，屏幕宽度其实为1080/(440/160)=392.7dp，也就是屏幕是比设计图要宽的。这种情况下， 即使使用dp也是无法在不同设备上显示为同样效果的。 同时还存在部分设备屏幕宽度不足360dp，这时就会导致按360dp宽度来开发实际显示不全的情况。</p>
<p>而且上述屏幕尺寸、分辨率和像素密度的关系，很多设备并没有按此规则来实现， 因此dpi的值非常乱，没有规律可循，从而导致使用dp适配效果差强人意。</p>
<p><strong>探索新的适配方式</strong></p>
<p><strong>梳理需求</strong></p>
<p>首先来梳理下我们的需求，一般我们设计图都是以固定的尺寸来设计的。比如以分辨率1920px * 1080px来设计，以density为3来标注，也就是屏幕其实是640dp * 360dp。如果我们想在所有设备上显示完全一致，其实是不现实的，因为屏幕高宽比不是固定的，16:9、4:3甚至其他宽高比层出不穷，宽高比不同，显示完全一致就不可能了。但是通常下，我们只需要以宽或高一个维度去适配，比如我们Feed是上下滑动的，只需要保证在所有设备中宽的维度上显示一致即可，再比如一个不支持上下滑动的页面，那么需要保证在高这个维度上都显示一致，尤其不能存在某些设备上显示不全的情况。同时考虑到现在基本都是以dp为单位去做的适配，如果新的方案不支持dp，那么迁移成本也非常高。</p>
<p>因此，总结下大致需求如下：</p>
<ol>
<li>支持以宽或者高一个维度去适配，保持该维度上和设计图一致；</li>
<li>支持dp和sp单位，控制迁移成本到最小。</li>
</ol>
<p><strong>找兼容突破口</strong></p>
<p>从dp和px的转换公式 ：px = dp * density</p>
<p>可以看出，如果设计图宽为360dp，想要保证在所有设备计算得出的px值都正好是屏幕宽度的话，我们只能修改 density 的值。</p>
<p>通过阅读源码，我们可以得知，density 是 DisplayMetrics 中的成员变量，而 DisplayMetrics 实例通过 Resources#getDisplayMetrics 可以获得，而Resouces通过Activity或者Application的Context获得。</p>
<p>先来熟悉下 DisplayMetrics 中和适配相关的几个变量：</p>
<ul>
<li>
<p>DisplayMetrics#density 就是上述的density</p>
</li>
<li>
<p>DisplayMetrics#densityDpi 就是上述的dpi</p>
</li>
<li>
<p>DisplayMetrics#scaledDensity 字体的缩放因子，正常情况下和density相等，但是调节系统字体大小后会改变这个值</p>
</li>
</ul>
<p><strong>那么是不是所有的dp和px的转换都是通过 DisplayMetrics 中相关的值来计算的呢？</strong></p>
<p>首先来看看布局文件中dp的转换，最终都是调用 TypedValue#applyDimension(int unit, float value, DisplayMetrics metrics) 来进行转换:</p>
<p>这里用到的DisplayMetrics正是从Resources中获得的。</p>
<p>再看看图片的decode，BitmapFactory#decodeResourceStream方法:</p>
<p>可见也是通过 DisplayMetrics 中的值来计算的。</p>
<p>当然还有些其他dp转换的场景，基本都是通过 DisplayMetrics 来计算的，这里不再详述。因此，想要满足上述需求，我们只需要修改 DisplayMetrics 中和 dp 转换相关的变量即可。</p>
<p><strong>最终方案</strong></p>
<p>下面假设设计图宽度是360dp，以宽维度来适配。</p>
<p>那么适配后的 density = 设备真实宽(单位px) / 360，接下来只需要把我们计算好的 density 在系统中修改下即可，代码实现如下：</p>
<p>同时在 Activity#onCreate 方法中调用下。代码比较简单，也没有涉及到系统非公开api的调用，因此理论上不会影响app稳定性。</p>
<p>于是修改后上线灰度测试了一版，稳定性符合预期，没有收到由此带来的crash，但是收到了很多字体过小的反馈：</p>
<p>原因是在上面的适配中，我们忽略了DisplayMetrics#scaledDensity的特殊性，将DisplayMetrics#scaledDensity和DisplayMetrics#density设置为同样的值，从而某些用户在系统中修改了字体大小失效了，但是我们还不能直接用原始的scaledDensity，直接用的话可能导致某些文字超过显示区域，因此我们可以通过计算之前scaledDensity和density的比获得现在的scaledDensity，方式如下：</p>
<p>但是测试后发现另外一个问题，就是如果在系统设置中切换字体，再返回应用，字体并没有变化。于是还得监听下字体切换，调用 Application#registerComponentCallbacks 注册下 onConfigurationChanged 监听即可。</p>
<p>因此最终方案如下：</p>
<p>当然以上代码只是以设计图宽360dp去适配的，如果要以高维度适配，可以再扩展下代码即可。</p>
]]></content>
      <categories>
        <category>文档</category>
      </categories>
      <tags>
        <tag>Android研</tag>
      </tags>
  </entry>
  <entry>
    <title>买基秘诀及操作技巧新手必读</title>
    <url>/2018/01/08/%E4%B9%B0%E5%9F%BA%E7%A7%98%E8%AF%80%E5%8F%8A%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7%E6%96%B0%E6%89%8B%E5%BF%85%E8%AF%BB/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="16de1a8391ba419a8deafc3c903ebfb9df9639bb714a914677031016bead0eb2">2f95905209dd33c3b7943ae67169d10139c86eeb008c163655af4d7d72cf55cb78d23b6c3da4ed3d04001980fbefc706278f623df82b5fd874881dd2623571817ec0bf58107720faf69be7912e9da313edc6cf73ffb6d11972eed3ef19efb920f05b81b0075ff8a6e0fb9048f862ff0e1b6b34b04cae20a37820cf8eec9bc9723285e7e90cabbb0ae2ef10de847100bc2bf1f23a1404118f1a43e4bf7b40e24342f50e952de505a07ef89a138e02c17ea44be96bf94dbf17eebc5c9b445fa1f2b0debdb0b91ab208f2b579fd8d49ba9d3dd44381cb74bea5faba397ccd8e15224b7cc245758f44e01e34b9e118174cb4f2a30e648a8169b3e0be985e1cbcfcb344094845d6b09ec4c525fe0c9cb316b2984cdce8d0f5739c9ce915dd66b8fd8f53a6df1c3086251f25f0b3cb8b6ff849752f82748979eec9e17659779580a3b845aeb4cfeb09846373c2f22f2098da98741a61ad09c8a15f702ecf4abf3ff51a63d7c8d11f3d5c10063fa7b5113460cde345bd5ee4c38915aca5e41c8f510bae3a60d232beeca322c0f0b44e2b72a4d4fcf417d5458b5f60c6348072871be10d67556099441c804aa2e521551020615ab213d3fb5f28ff40cd558d0ce60f0e171d9555704281c6d1729822c3d7d5d5b90c1f3ba17ba7e4e57e8b389c1f961cff37e0c6bb60b3d57cb32b3330ec289c0b0157c7f9fca616c26b29f1109db8fcf22455b08b14e49c57ff35af63e4281cd277f51d999f7a5918fc67f3133cd3ab8bd2e978cddcb92116ff225d710aa6829062368659b0f57b21c22d59d26f9505817b8bacdcfc106c468c4259e3148102810386862b2b2b8c91b73b1ae781a9c12f6c2d6947ac62734f2e9070ae61b85a062fd359978d0001dbd41a3b2b321fcee79c2b4d7132fcd6d8df5ebafb8700fc85a74693151cc4718cf63d8fdb36915be34a5bce855e1cfe429598c1f86635502210be0f8ffdcaa9e7ee35dbf115f654f27f8e798bde69a6cd350d86a5b1e916fca2d5fedc2189534ed3c9ed2a4410888d61e35bc2d2e69c6330c8b9115feccfd309a64b515eddad1ea51934aa37d25c35327e036d4dd859057977728453090c8195a7203a5dc7f5944112b297de11d13196e1faa47a0ecc4205743a1cf1941cb0c28296875f8bfc31ba59fc219b14714b48737da126eae1f4a004986aa87919c3173647961f445885a7b82c5be1769c5a459a23bfb7470be9c1a54f3a229c737653eeddd0d84c36a3caa2c1b27b4cc4a59a4a0c20d15b6c6e89743753e75a7c2fd03d6495301d53b08d64978f322dc1be4703ecd9c56fc8aa42cd56eab1585283ad1d95d62fb4960f2b1b2e82fba2ecb68a8a90f9408c978e1cc68a3f6162cf4a8b5e2f05d36d10730a97cdcc405db6eaceb38dff03b6a7d394b6f42ec52f410ad59a41ff326dd064020d534fd5e903921d689d4cd3c5dbf6d72afb18a7eee3d444abfbb53cc18d6b0fe221709b5bba1e5256b53703cc4eb83afbeff7543346ad816558b844f94793e3af98efe43462923993e6033f7e86e39eff07e47f6fd58610dae181193857843abcf0ef2458dce88c73cea70f4d2f8c3bc6f889854c8f48e13213790084a4fc98333b20b090508bb7ee331aa8c3480cf99598eef2df515b411985e31ae9b553162cc0cbfa697d35c8c97fcb13a776047ba8f38993f3409e9c780a6ca13ae12121aac40f82e56b962944dd06221a7b3f16e4c77747162eb10502f27c4d9a0aca013934ffab5b76d3f2f1b1c55ce259b9265e9320ceb3ee58dd0331ec4fdd6fda49f1f6ebe41dd09d27cfb72c4741ecb355fb0a720ed9e985356266d688be188fef1d2ca6133f474bd44dc661f5c2a6e33c665222a3234794a03d925bf8a5440c8ac68a50a35c12ecf9206fe2665f4fcf8c8d373296ab98f6eb158ef788f3653f6a476e4c3da5f4195833fd8fb4c54bab9e1d9fb77afe2e81ce0d41c881590402db01ed9da0438532b68b6db8397ce0abb5988614e10da9f8418f15b312ed7ba0c27fb4de4f9a9986f1f83d8d485d360743b2a722e8178ae7e5f284dcb3e4297537c31b896dbc9599a624d259ad390d3caa6f34ba2c013bcf2e1eff1b775d127c510979849ca778dfbb13fc0cf6d88b5fd6875046e8f32b16f15edd08da8e9f53f7c88de604250a3a0eb52bdceb5f381d03395b2adba839dc9b08ec7de6b1baf5ab2d7fe3b2194fa7d1c3a483b0045e072fb8aed7ae15861854bf99eadf71d4e36b99317596ae78a54711dd4a62615ea8d213f46e5dbd75c3dbfcf0f640cd8d722179eb2d7f3471b884ff8222c1403cc93ec137241b1b98862bcd7050ac716c28b1718258f6dab73525725f4edc67726c03d2c55ffbd50cb351ac98dbe8152fb20d8630518ede91988da9af2fa3718891f33a69c1825ed7e3bfa258c3829a257400985638c91ad26480b3b317253ed49bc86045c28a61aeea9e178dc1c54dc0ed1090c8dbc82efc4040fcef8df7d2a3a9558210322caddb339b9b77490cbd9932830e1d3676f5968ffa955d13e32e236c3e70a8c533eaf232d87cf2caa3f6d1200474f4916bf851ac1fd8d5644c973610e031139397d68f24159e9cebdbd7beca15a45eb59602fa45eec180ce4e7e18fe0314009a5881ced7c7df8e026c8eb41a0eb76bc44e96dc28eeea52f94f7825858515344594a9ed9e65a6b904a60b6d558c30f2e83ce8a4b1691f75d0977d9f88a30b88cd1841e89b4fc29014feac42c283f0483aeec167a9b3b3cf76514dae5203e494459041dc48cf22f672fa92eaf92639aa06652c3197f91bc21065e8cc2573c42e852177c8680354b4ff6929b77de5a9230e9267ea9ea9197a74face4c5f4f4de5d0bfbea91e949d2f9f24abcb1a086ae122f904e4f5f73618ae8ca0a0a6b3836038a076d25a4c43a5855f9907148e5fd6c899f2e4460574554b620321347d97239c04cd7277c8c14bfd4689fe697812b45b33f9a539bdf9e8255411512fbd25536c021ce490a958a63c2960e18a121438c50422fe824a5cfcd95576244b91cd3a7f4b3e8c09f58fa83a7f78f334a800ec6e47a1e91a44310d4da8544ed46907466a45fd42b68982eb59c4fa1ed49094f15a3eaaf51252660060686e4a53c16d2a76315129d55b9bd99111316f851004534dfb71fbac5ce20f4bfb26aed5cecb91a98215a0beb53d4e3e4a4dc8f06b2a06ab5e65d7dfffdd073db84cc92ed5510471905468330d303d7099861aff5fda1ae128edcad33552484fd3a871293815d95a8b903c95436179927a97c7f6bea283d3578fb4dabcee0c62a1d0b8fb016030eca62fa49c3e5d0c0fed60978031efb6606a348cdeaafa1647591b7ad573b6f12cfbc59a6b04c4887e620e7fe126a236721596dbf1f3f2b4adda1cd42c519a9c3b34d0e5c5ea83ccbc530996d241fe4307fbd76ce0292f5c974fe73585a0fc25a5f0df5065a65f8186009396a461b1026178829f8c91e5fbab79c40611e41a9c86093057cb2d11719a1c23cc2e40cc102811c79fc6dec4ac8e9b01977e33283c60786b38eaa90a2f4ded3f17400fce0a113eb903bb95565dbc1020d7a0d0548333a7ec698b96f67af1de37215a3b558801c6c59cb2c64ce47696f8ce706a7692d13dbdbda791ca77026abeefac8314206c2157e37c</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章需要解密才可以阅读.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>基金</category>
      </categories>
      <tags>
        <tag>基金</tag>
      </tags>
  </entry>
  <entry>
    <title>使用iterm打造超级Mac终端</title>
    <url>/2023/04/18/%E4%BD%BF%E7%94%A8iterm%E6%89%93%E9%80%A0%E8%B6%85%E7%BA%A7Mac%E7%BB%88%E7%AB%AF/</url>
    <content><![CDATA[<p><img src="/uploads/3562004085-5b05127a06ce8_fix732.png" alt="avatar"><br>
苹果电脑自带的终端使用起来不够强大，今天分享一个终端利器-iterm，使用了这个利器之后，你将会再也不想使用老的终端了。接下来让我们看下，这个终端的相关配置吧。</p>
<h4 id="下载iTerm2">下载iTerm2</h4>
<p>可以直接去官网下载：<a href="https://www.iterm2.com/">下载地址</a></p>
<p>安装完成后，在/bin目录下会多出一个zsh的文件。</p>
<p>Mac系统默认使用dash作为终端，可以使用命令修改默认使用zsh：</p>
<span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>
<p>如果想修改回默认dash，同样使用chsh命令即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/bash</span><br></pre></td></tr></table></figure>
<p>OK，这就是iTerm2初始的样子，下面我们来美化它，让它变得更好用！</p>
<h4 id="安装Oh-my-zsh">安装Oh my zsh</h4>
<p>安装方法有两种，可以使用curl或wget，看自己环境或喜好：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># curl 安装方式</span><br><span class="line">sh -c <span class="string">&quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># wget 安装方式</span><br><span class="line">sh -c <span class="string">&quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</span></span><br></pre></td></tr></table></figure>
<p>安装命令和安装完成后的截图：<br>
<img src="/uploads/2039984698-5b05120c32271_fix732.png" alt=""><br>
oh-my-zsh开源地址：<a href="https://github.com/robbyrusse">https://github.com/robbyrusse</a>…</p>
<h4 id="安装powerline">安装powerline</h4>
<p>powerline官网：<a href="http://powerline.readthedocs">http://powerline.readthedocs</a>…</p>
<p>安装powerline的方式依然简单，也只需要一条命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pip install powerline-status --user</span><br></pre></td></tr></table></figure>
<p>安装pip的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo easy_install pip</span><br></pre></td></tr></table></figure>
<h4 id="安装PowerFonts">安装PowerFonts</h4>
<p>安装字体库需要首先将项目git clone至本地，<a href="http://xn--install-f43k205bp38an71anwgsssm2es97e.sh">然后执行源码中的install.sh</a>。</p>
<p>在你习惯的位置新建一个文件夹，如：~/Desktop/OpenSource/</p>
<p>在此文件夹下执行git clone命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># git clone</span><br><span class="line">git clone <span class="attr">https</span>:<span class="comment">//github.com/powerline/fonts.git --depth=1</span></span><br><span class="line"># cd to folder</span><br><span class="line">cd fonts</span><br><span class="line"># run install shell</span><br><span class="line">./install.<span class="property">sh</span></span><br></pre></td></tr></table></figure>
<p>执行结果如下：<img src="/uploads/1794016931-5b05120434a2e_fix732.png" alt=""><br>
安装好字体库之后，我们来设置iTerm2的字体，具体的操作是iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text，在Font区域选中Change Font，然后找到Meslo LG字体。有L、M、S可选，看个人喜好：</p>
<h4 id="安装配色方案">安装配色方案</h4>
<p>配色方案在使用VIM或Colorful Log时会变得非常有用，同时界面也不会一片黑绿一样死板。</p>
<p>同样使用git clone的方式下载源码进行安装：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd ~<span class="regexp">/Desktop/</span><span class="title class_">OpenSource</span></span><br><span class="line">git clone <span class="attr">https</span>:<span class="comment">//github.com/altercation/solarized</span></span><br><span class="line">cd solarized/iterm2-colors-solarized/</span><br><span class="line">open .</span><br></pre></td></tr></table></figure>
<p>在打开的finder窗口中，双击Solarized Dark.itermcolors和Solarized Light.itermcolors即可安装明暗两种配色</p>
<p><img src="/uploads/3382026926-5b051276bc82c_fix732.png" alt=""></p>
<p>再次进入iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Colors -&gt; Color Presets中根据个人喜好选择这两种配色中的一种即可：<br>
<img src="/uploads/741009946-5b051277cb93b_fix732.png" alt=""></p>
<h4 id="安装主题">安装主题</h4>
<p>下载agnoster主题，执行脚本安装：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd ~<span class="regexp">/Desktop/</span><span class="title class_">OpenSource</span></span><br><span class="line">git clone <span class="attr">https</span>:<span class="comment">//github.com/fcamblor/oh-my-zsh-agnoster-fcamblor.git</span></span><br><span class="line">cd oh-my-zsh-agnoster-fcamblor/</span><br><span class="line">./install</span><br></pre></td></tr></table></figure>
<p>执行上面的命令会将主题拷贝到oh my zsh的themes中：<img src="/uploads/3636870524-5b051201a058f_fix732.png" alt=""><br>
拷贝完成后，执行命令打开zshrc配置文件，将ZSH_THEME后面的字段改为agnoster。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vi ~/.<span class="property">zshrc</span></span><br></pre></td></tr></table></figure>
<p><img src="source/uploads/3184259857-5b05120b42f4e_fix732.png" alt=""><br>
修改完成后按一下esc调出vi命令，输入:wq保存并退出vi模式。</p>
<p>此时command+Q或source配置文件后，iTerm2变了模样：</p>
<p><img src="source/uploads/3269984675-5b0511feddd2f_fix732.png" alt=""></p>
<h4 id="安装高亮插件">安装高亮插件</h4>
<p>这是oh my zsh的一个插件，安装方式与theme大同小异：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd ~<span class="regexp">/.oh-my-zsh/</span>custom/plugins/</span><br><span class="line">git clone <span class="attr">https</span>:<span class="comment">//github.com/zsh-users/zsh-syntax-highlighting.git</span></span><br><span class="line">vi ~/.<span class="property">zshrc</span></span><br></pre></td></tr></table></figure>
<p>这时我们再次打开zshrc文件进行编辑。找到plugins，此时plugins中应该已经有了git，我们需要把高亮插件也加上：<br>
<img src="source/uploads/326093881-5b0511fccffcd_fix732.png" alt=""></p>
<p>请务必保证插件顺序，zsh-syntax-highlighting必须在最后一个。</p>
<p>然后在文件的最后一行添加：source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</p>
<p>按一下esc调出vi命令，输入:wq保存并退出vi模式。</p>
<p>执行命令使刚才的修改生效：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">source ~/.<span class="property">zshrc</span></span><br></pre></td></tr></table></figure>
<p>至此大功告成，请看最终效果图：<img src="source/uploads/3562004085-5b05127a06ce8_fix732.png" alt=""><br>
背景图片取自微软Surface Studio的4K壁纸(将近12MB大小)，非常漂亮，需要的可以自取：链接: <a href="https://pan.baidu.com/s/17zGm">https://pan.baidu.com/s/17zGm</a>…<br>
提取码: hg67</p>
<p>更换背景图片方式：iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Window -&gt; BackGround Image勾选图片即可。</p>
<h4 id="可选择、命令补全">可选择、命令补全</h4>
<p>跟代码高亮的安装方式一样，这也是一个zsh的插件，叫做zsh-autosuggestion，用于命令建议和补全。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd ~<span class="regexp">/.oh-my-zsh/</span>custom/plugins/</span><br><span class="line">git clone <span class="attr">https</span>:<span class="comment">//github.com/zsh-users/zsh-autosuggestions</span></span><br><span class="line">vi ~/.<span class="property">zshrc</span></span><br></pre></td></tr></table></figure>
<p>找到plugins，加上这个插件即可：</p>
<p><img src="source/uploads/120393975-5b0511fcbec18_fix732.png" alt=""></p>
<p>插件效果：</p>
<p><img src="source/uploads/3642435405-5b0511fdc3c47_fix732.png" alt=""></p>
<p>Github地址：<a href="https://github.com/lenonwang/iterm2-with-oh-my-zsh">跳转</a></p>
]]></content>
      <tags>
        <tag>IT</tag>
        <tag>Iterm</tag>
      </tags>
  </entry>
  <entry>
    <title>使用java编写shell</title>
    <url>/2018/04/18/%E4%BD%BF%E7%94%A8java%E7%BC%96%E5%86%99shell/</url>
    <content><![CDATA[<blockquote>
<p>使用java编写shell脚本，其实，shell的脚本也可以用java或者其他的语言来编写。</p>
</blockquote>
<h3 id="一、准备">一、准备</h3>
<p>1、Beanshell下载<br>这个工具的作用是使的shell可以支持java语言。下载地址：<a href ="www.beanshell.org">www.beanshell.org</a>。</p>
<p>2、需要配置java sdk这个不赘述，网上有很多的mac os配置教程。</p>
<h3 id="二、配置">二、配置</h3>
<p>1、将下载好的包放入放到一个目录（例如/opt/beanshell/beanshell.jar） ，并将这个位置，配置到classPath路径下，记住了，是classPath路径而不是path路径。不然，运行时会报错的。</p>
<p>2、编写shell脚本文件，文件头标注为<font color=red>#!/usr/bin/java bsh.Interpreter<br>
</font>前者时java命令的位置，mac os配置好java后，命令的位置就是上面的位置，其他的系统另当别论了。后者就是bean shell中的解释器了，很好理解不是吗？</p>
<p>3、使用java语言编写一个脚本试试看吧。应该是可以成功运行了Java编写的shell脚本了。而且，现在的版本的beanshell比以往更加的强大了点。不需要你进行手动的类型引入了。</p>
<p>总结：教程很简单，就是为了给已经掌握一门开发语言的人，提供下便利的通道，这样写shell就会简单的多了不是吗？😁</p>
]]></content>
      <categories>
        <category>Android研发</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>使用merge代替FrameLayout嵌套层次</title>
    <url>/2018/01/17/%E4%BD%BF%E7%94%A8merge%E4%BB%A3%E6%9B%BFFrameLayout%E5%B5%8C%E5%A5%97%E5%B1%82%E6%AC%A1/</url>
    <content><![CDATA[<p>Android开发中可以使用merge来取代Framelayout从而达到减少嵌套层次的问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FrameLayout&gt;</span><br><span class="line">    include layout2</span><br><span class="line">&lt;/FrameLayout&gt;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>像是上面的布局，嵌套一个layout2，这里的layout2就可以在最外层使用merge作为parent容器。从而减少嵌套层次。假设，layout2布局如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FrameLayout&gt;</span><br><span class="line">    ....</span><br><span class="line">&lt;/FrameLayout&gt;</span><br></pre></td></tr></table></figure>
<p>在不使用merge标签的情况下，最上面layout在嵌套了layout2后的样子应该是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FrameLayout&gt;</span><br><span class="line">    &lt;FrameLayout&gt;</span><br><span class="line">    ....</span><br><span class="line">    &lt;/FrameLayout&gt;</span><br><span class="line">&lt;/FrameLayout&gt;</span><br></pre></td></tr></table></figure>
<p>当我们使用了merge标签后呢？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FrameLayout&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/FrameLayout&gt;</span><br></pre></td></tr></table></figure>
<p>很明显，使用merge嵌入的布局，依然保持着简洁的单层parent容器；而没有使用的则是多余的嵌套的了一层布局。这就是merge的使用的必要性了。</p>
]]></content>
      <categories>
        <category>Android研发</category>
      </categories>
      <tags>
        <tag>merge</tag>
        <tag>FrameLayout</tag>
      </tags>
  </entry>
  <entry>
    <title>关于位运算的探究</title>
    <url>/2023/09/04/%E5%85%B3%E4%BA%8E%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9A%84%E6%8E%A2%E7%A9%B6/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span> | <span class="number">2</span> &amp; <span class="number">4</span> | <span class="number">3</span>);<span class="comment">//按位与要比按位或的优先级要高</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这个的运算结果，有谁知道吗？</p>
<p>今天探究发现实际上在位运算里也会有先后顺序，就类似我们小学学习的数学一样，在计算机的世界里，位运算也是遵循着先后的执行顺序；</p>
<p>比方说，这个代码的执行结果应该是先执行的位运算的“&amp;”，而后才是执行了“｜”，是不是没有想到，这个小知识点是我在探究用一个整型表示多个状态的时候发现的。</p>
<p>我们经常探讨的java或者Android的线程池也是采用的这个知识点进行状态表示的，因为占用内存少，方便高效，所以很是推崇。这里就是写一篇文章mark一下自己发现的新大陆。</p>
]]></content>
      <categories>
        <category>二进制</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>android</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>图片加载库Glide介绍</title>
    <url>/2018/02/24/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%BA%93Glide%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<blockquote>
<p>英文原文 Introduction to Glide, Image Loader Library for Android, recommended by Google<br>
摘录来自：Google推荐的图片加载库Glide介绍</p>
</blockquote>
<p>在泰国举行的谷歌开发者论坛上，谷歌为我们介绍了一个名叫 Glide 的图片加载库，作者是bumptech。这个库被广泛的运用在google的开源项目中，包括2014年google I/O大会上发布的官方app。它的成功让我非常感兴趣。我花了一整晚的时间把玩，决定分享一些自己的经验。在开始之前我想说，Glide和Picasso有90%的相似度，准确的说，就是Picasso的克隆版本。但是在细节上还是有不少区别的。</p>
<span id="more"></span>
<h3 id="导入库">导入库</h3>
<p>Picasso和Glide都在jcenter上。在项目中添加依赖非常简单：</p>
<h4 id="Picasso">Picasso</h4>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;  </span><br><span class="line">    compile <span class="string">&#x27;com.squareup.picasso:picasso:2.5.1&#x27;</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Glide">Glide</h3>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;  </span><br><span class="line">    compile <span class="string">&#x27;com.github.bumptech.glide:glide:3.5.2&#x27;</span>  </span><br><span class="line">    compile <span class="string">&#x27;com.android.support:support-v4:22.0.0&#x27;</span>  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>Glide需要依赖Support Library v4，别忘了。其实Support Library v4已经是应用程序的标配了，这不是什么问题。</p>
<h3 id="基础">基础</h3>
<p>就如我所说的Glide和Picasso非常相似，Glide加载图片的方法和Picasso如出一辙。</p>
<h4 id="Picasso-2">Picasso</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Picasso.with(context)  </span><br><span class="line">    .load(<span class="string">&quot;http://inthecheesefactory.com/uploads/source/glidepicasso/cover.jpg&quot;</span>)  </span><br><span class="line">    .into(ivImg); </span><br></pre></td></tr></table></figure>
<h4 id="Glide-2">Glide</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Glide.with(context)  </span><br><span class="line">    .load(<span class="string">&quot;http://inthecheesefactory.com/uploads/source/glidepicasso/cover.jpg&quot;</span>)  </span><br><span class="line">    .into(ivImg);  </span><br></pre></td></tr></table></figure>
<p>虽然两者看起来一样，但是Glide更易用，因为Glide的with方法不光接受Context，还接受Activity 和 Fragment，Context会自动的从他们获取。<img src="/images/glide1.png" alt="glide和picasso不同点"><br>
同时将Activity/Fragment作为with()参数的好处是：图片加载会和Activity/Fragment的生命周期保持一致，比如Paused状态在暂停加载，在Resumed的时候又自动重新加载。所以我建议传参的时候传递Activity 和 Fragment给Glide，而不是Context。</p>
<h3 id="默认Bitmap格式是RGB-565">默认Bitmap格式是RGB_565</h3>
<p>下面是加载图片时和Picasso的比较（1920x1080 像素的图片加载到768x432的ImageView中）<img src="/images/glide2.jpg" alt="glide和Picasso比较"><br>
可以看到Glide加载的图片质量要差于Picasso（ps：我看不出来哈），为什么？这是因为Glide默认的Bitmap格式是RGB_565 ，比ARGB_8888格式的内存开销要小一半。下面是Picasso在ARGB8888下与Glide在RGB565下的内存开销图（应用自身占用了8m，因此以8为基准线比较）：<img src="/images/glide3.png" alt="内存开销对比图"><br>
如果你对默认的RGB_565效果还比较满意，可以不做任何事，但是如果你觉得难以接受，可以创建一个新的GlideModule将Bitmap格式转换到ARGB_8888：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlideConfiguration</span> <span class="keyword">implements</span> <span class="title class_">GlideModule</span> &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">applyOptions</span><span class="params">(Context context, GlideBuilder builder)</span> &#123;  </span><br><span class="line">        <span class="comment">// Apply options to the builder here.  </span></span><br><span class="line">        builder.setDecodeFormat(DecodeFormat.PREFER_ARGB_8888);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerComponents</span><span class="params">(Context context, Glide glide)</span> &#123;  </span><br><span class="line">        <span class="comment">// register ModelLoaders here.  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>同时在AndroidManifest.xml中将GlideModule定义为meta-data</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta-data</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;com.inthecheesefactory.lab.glidepicasso.GlideConfiguration&quot;</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:value</span>=<span class="string">&quot;GlideModule&quot;</span>/&gt;</span>  </span><br></pre></td></tr></table></figure>
<p><img src="/images/glide4.jpg" alt="效果对比"><br>
这样看起来就会好很多。</p>
<p>我们再来看看内存开销图，这次貌似Glide花费了两倍于上次的内存，但是Picasso的内存开销仍然远大于Glide。<img src="/images/glide5.png" alt="内存开销比对"><br>
原因在于Picasso是加载了全尺寸的图片到内存，然后让GPU来实时重绘大小。而Glide加载的大小和ImageView的大小是一致的，因此更小。当然，Picasso也可以指定加载的图片大小的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Picasso.with(<span class="built_in">this</span>)</span><br><span class="line">    .load(“http:<span class="comment">//nuuneoi.com/uploads/source/playstore/cover.jpg“)</span></span><br><span class="line">    .resize(<span class="number">768</span>, <span class="number">432</span>)</span><br><span class="line">    .into(ivImgPicasso);</span><br></pre></td></tr></table></figure>
<p>但是问题在于你需要主动计算ImageView的大小，或者说你的ImageView大小是具体的值（而不是wrap_content），你也可以这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Picasso.with(<span class="built_in">this</span>)</span><br><span class="line">    .load(“http:<span class="comment">//nuuneoi.com/uploads/source/playstore/cover.jpg“)</span></span><br><span class="line">    .fit()</span><br><span class="line">    .centerCrop()</span><br><span class="line">    .into(ivImgPicasso);</span><br></pre></td></tr></table></figure>
<p>现在Picasso的内存开销就和Glide差不多了。<img src="/images/glide6.png" alt="修改后开销对比图"><br>
虽然内存开销差距不到，但是在这个问题上Glide完胜Picasso。因为Glide可以自动计算出任意情况下的ImageView大小。</p>
<h3 id="Image质量的细节">Image质量的细节</h3>
<p>这是将ImageView还原到真实大小时的比较。<img src="/images/glide7.png" alt="真实大小比较图片"><br>
你可以看到，Glide加载的图片没有Picasso那么平滑，我还没有找到一个可以直观改变图片大小调整算法的方法。</p>
<p>但是这并不算什么坏事，因为很难察觉。</p>
<h3 id="磁盘缓存">磁盘缓存</h3>
<p>Picasso和Glide在磁盘缓存策略上有很大的不同。Picasso缓存的是全尺寸的，而Glide缓存的是跟ImageView尺寸相同的。<img src="/images/glide8.jpg" alt="磁盘缓存"><br>
上面提到的平滑度的问题依然存在，而且如果加载的是RGB565图片，那么缓存中的图片也是RGB565。</p>
<p>我尝试将ImageView调整成不同大小，但不管大小如何Picasso只缓存一个全尺寸的。Glide则不同，它会为每种大小的ImageView缓存一次。尽管一张图片已经缓存了一次，但是假如你要在另外一个地方再次以不同尺寸显示，需要重新下载，调整成新尺寸的大小，然后将这个尺寸的也缓存起来。</p>
<p>具体说来就是：假如在第一个页面有一个200x200的ImageView，在第二个页面有一个100x100的ImageView，这两个ImageView本来是要显示同一张图片，却需要下载两次。</p>
<p>不过，你可以改变这种行为，让Glide既缓存全尺寸又缓存其他尺寸：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Glide.with(<span class="built_in">this</span>)</span><br><span class="line">     .load(“http:<span class="comment">//nuuneoi.com/uploads/source/playstore/cover.jpg“)</span></span><br><span class="line">     .diskCacheStrategy(DiskCacheStrategy.ALL)</span><br><span class="line">     .into(ivImgGlide);</span><br></pre></td></tr></table></figure>
<p>下次在任何ImageView中加载图片的时候，全尺寸的图片将从缓存中取出，重新调整大小，然后缓存。</p>
<p>Glide的这种方式优点是加载显示非常快。而Picasso的方式则因为需要在显示之前重新调整大小而导致一些延迟，即便你添加了这段代码来让其立即显示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Picasso.noFade();</span><br></pre></td></tr></table></figure>
<p><img src="/images/g.gif" alt="gif显示效果图"><br>
Picasso和Glide各有所长，你根据自己的需求选择合适的。</p>
<p>对我而言，我更喜欢Glide，因为它远比Picasso快，虽然需要更大的空间来缓存。</p>
<h3 id="特性">特性</h3>
<p>你可以做到几乎和Picasso一样多的事情，代码也几乎一样。</p>
<h4 id="Image-Resizing">Image Resizing</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Picasso.resize(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">Glide.override(<span class="number">300</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure>
<h4 id="Center-Cropping">Center Cropping</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Picasso.centerCrop();</span><br><span class="line">Glide.centerCrop();</span><br></pre></td></tr></table></figure>
<h4 id="Transforming">Transforming</h4>
<p>Picasso.transform(new CircleTransform())<br>
Glide.transform(new CircleTransform(context))</p>
<h4 id=""></h4>
<p>设置占位图或者加载错误图：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Picasso.placeholder(R.drawable.placeholder).error(R.drawable.imagenotfound)</span><br><span class="line">Glide.placeholder(R.drawable.placeholder).error(R.drawable.imagenotfound)</span><br></pre></td></tr></table></figure>
<p>几乎和Picasso一样，从Picasso转换到Glide对你来说就是小菜一碟。</p>
<h3 id="有什么Glide可以做而Picasso做不到">有什么Glide可以做而Picasso做不到</h3>
<p>Glide可以加在GIF动态图，而Picasso不能。<img src="/images/diff.gif" alt="picasso做不到而glide可以做到的"><br>
同时因为Glide和Activity/Fragment的生命周期是一致的，因此gif的动画也会自动的随着Activity/Fragment的状态暂停、重放。Glide 的缓存在gif这里也是一样，调整大小然后缓存。</p>
<p>但是从我的一次测试结果来看Glide 动画会消费太多的内存，因此谨慎使用。</p>
<p>除了gif动画之外，Glide还可以将任何的本地视频解码成一张静态图片。</p>
<p>还有一个特性是你可以配置图片显示的动画，而Picasso只有一种动画：fading in。</p>
<p>最后一个是可以使用thumbnail()产生一个你所加载图片的thumbnail。</p>
<p>其实还有一些特性，不过不是非常重要，比如将图像转换成字节数组等。</p>
<h4 id="配置">配置</h4>
<p>有许多可以配置的选项，比如大小，缓存的磁盘位置，最大缓存空间，位图格式等等。可以在这个页面查看这些配置 Configuration。</p>
<h3 id="库大小">库大小</h3>
<p>Picasso (v2.5.1)的大小约118kb，而Glide (v3.5.2)的大小约430kb。<br>
<img src="/images/size.png" alt="库大小比较图"><br>
Anyway 312KB difference might not be that significant.</p>
<p>不过312kb的差距并不是很重要。</p>
<p>Picasso和Glide的方法个数分别是840和2678个。</p>
<p>必须指出，对于DEX文件65535个方法的限制来说，2678是一个相当大的数字了。建议在使用Glide的</p>
<p>时候开启ProGuard。</p>
<h3 id="总结">总结</h3>
<p>Glide和Picasso都是非常完美的库。Glide加载图像以及磁盘缓存的方式都要优于Picasso，速度更快，并且Glide更有利于减少OutOfMemoryError的发生，GIF动画是Glide的杀手锏。不过Picasso的图片质量更高。你更喜欢哪个呢？</p>
<p>虽然我使用了很长事件的Picasso，但是我得承认现在我更喜欢Glide。我的建议是使用Glide，但是将Bitmap格式换成 ARGB_8888、让Glide缓存同时缓存全尺寸和改变尺寸两种。</p>
]]></content>
      <categories>
        <category>第三方框架</category>
      </categories>
      <tags>
        <tag>Glide</tag>
        <tag>图片</tag>
      </tags>
  </entry>
  <entry>
    <title>实现可定制Drawable</title>
    <url>/2018/01/08/%E5%AE%9E%E7%8E%B0%E5%8F%AF%E5%AE%9A%E5%88%B6Drawable/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.hupu.android.util;</span><br><span class="line"></span><br><span class="line">import android.graphics.Color;</span><br><span class="line">import android.graphics.drawable.Drawable;</span><br><span class="line">import android.graphics.drawable.GradientDrawable;</span><br><span class="line">import android.view.View;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* Created by wanglei on 16/8/1.</span><br><span class="line">*/</span><br><span class="line">public class HPDrawableGenerator &#123;</span><br><span class="line">private int roundRadius = 15; // 8dp 圆角半径</span><br><span class="line">private int strokeColor = Color.parseColor(&quot;#2E3135&quot;);//边框颜色</span><br><span class="line">private int fillColor = Color.parseColor(&quot;#DFDFE0&quot;);//内部填充颜色</span><br><span class="line">private int strokeWidth = 5;//设置边框宽度</span><br><span class="line"></span><br><span class="line">private HPDrawableGenerator() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static class LazyHolder &#123;</span><br><span class="line">private static final HPDrawableGenerator INSTANCE = new HPDrawableGenerator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static final HPDrawableGenerator getInstance() &#123;</span><br><span class="line">return LazyHolder.INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public HPDrawableGenerator setRoundRadius(int roundRadius) &#123;</span><br><span class="line">this.roundRadius = roundRadius;</span><br><span class="line">return getInstance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public HPDrawableGenerator setFillColor(int fillColor) &#123;</span><br><span class="line">this.fillColor = fillColor;</span><br><span class="line">return getInstance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public HPDrawableGenerator setStrokeColor(int strokeColor) &#123;</span><br><span class="line">this.strokeColor = strokeColor;</span><br><span class="line">return getInstance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setStrokeWidth(int strokeWidth) &#123;</span><br><span class="line">this.strokeWidth = strokeWidth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private Drawable generateDrawable() &#123;</span><br><span class="line">GradientDrawable gd = new GradientDrawable();//创建drawable</span><br><span class="line">gd.setColor(fillColor);</span><br><span class="line">gd.setCornerRadius(roundRadius);</span><br><span class="line">gd.setStroke(strokeWidth, strokeColor);</span><br><span class="line">return gd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//设置视图边框</span><br><span class="line">public void setViewBg(View v) &#123;</span><br><span class="line">v.setBackgroundDrawable(generateDrawable());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>使用方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HPDrawableGenerator.getInstance().</span><br><span class="line">                setRoundRadius(15).</span><br><span class="line">                setStrokeWidth(0).</span><br><span class="line">                setFillColor(getResources().getColor(dialogSolidAv.resourceId)).</span><br><span class="line">setViewBg(dialog_layout_wl); </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android研发</category>
      </categories>
      <tags>
        <tag>Android研发</tag>
        <tag>drawable</tag>
      </tags>
  </entry>
  <entry>
    <title>开始使用Android Gradle Plugin来帮助你进行项目的构建</title>
    <url>/2023/04/18/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8Android%20Gradle%20Plugin%E6%9D%A5%E5%B8%AE%E5%8A%A9%E4%BD%A0%E8%BF%9B%E8%A1%8C%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<h1>开始使用Android Gradle Plugin来帮助你进行项目的构建</h1>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.clwater.top%2F2023%2F02%2F10%2F%25E5%25BC%2580%25E5%25A7%258B%25E4%25BD%25BF%25E7%2594%25A8Android_Gradle_Plugin%25E6%259D%25A5%25E5%25B8%25AE%25E5%258A%25A9%25E4%25BD%25A0%25E8%25BF%259B%25E8%25A1%258C%25E9%25A1%25B9%25E7%259B%25AE%25E7%259A%2584%25E6%259E%2584%25E5%25BB%25BA%2F"></a></p>
<blockquote>
<p>一切的一切到要从 <code>阿里云emas移动推送</code> 说起, 这玩意的接入过程暂且不表, 有兴趣的可以看一看, 尤其是其控制台. 接入后主要需要在 <code>build.gradle</code> 中进行配置, 同时还有一份配置文件在 <code>app</code> 目录下. 但是emas的配置文件只能配置一份, (甚至不能实时更新, 需要 <code>gradle clean</code> ), 而实际的开发使用中可能包含开发,测试和上线环境的配置. 这些配置就需要我们在构架的时候自动匹配为最近的配置文件.</p>
</blockquote>
<span id="more"></span>
<h2 id="0-在开始之前">0.在开始之前</h2>
<p>其实最开始的实现方式并不是这篇文章使用的 <code>Android Gradle Plugin</code> 的方法来解决, 遇到这个情况的时候, 第一个想到的方法是在 <code>build.gradle</code> 中修改task来实现, 但是 <code>阿里云emas移动推送</code> 是通过Gradle Plugin的形式引入的, 如果task来实现的话会在 <code>emas plugin</code> 执行后再执行我们的task, 这样就导致了对应的配置文件可能没有更新成功问题的发生.</p>
<p>第二个的想到的方法是通过shell在 <code>gradle build</code> 执行前处理对应的文件. 不过由于是团队合作的项目, 更改项目的构架方法可能会影响到其他人, 秉承着对他人影响最小的原则, 这个方法就不合适了.</p>
<p>最后就是现在的实现方法, 根据 <code>Gradle Plugin</code> 的相关特性, 我们通过自定义我们自己的 <code>Android Gradle Plugin</code> 来帮我们构架我们的项目.</p>
<h2 id="1-开始使用Android-Gradle-Plugin来帮助你构建的项目">1.开始使用Android Gradle Plugin来帮助你构建的项目</h2>
<p>当我们创建一个新的项目的时候, 在默认的配置文件中我们就能看到以下使用的插件信息. 当然不仅仅官方可以发布插件, 我们也可以创建和发布我们自己的插件. 用官方的解释来说就是 <a href="https://juejin.cn/post/7201052651755913277#user-content-fn-1">1</a>:“Android Gradle 插件 (AGP) 是官方的 Android 应用构建系统。该系统支持编译多种不同类型的源代码，以及将其链接到可在实体 Android 设备或模拟器上运行的应用中。” 简单概括来说, Android Gradle Plugin就是可以在Android构架的时候将那些可重复使用的构建逻辑抽出来, 作为一个独立的项目/插件, 应用在不同的项目构建中. 例如多渠道打包, 修改图片, 压缩图片等相关的操作都可以作为一个插件来应用到不同的项目中.</p>
<h3 id="Gradle和Android-Gradle-Plugin的区别">Gradle和Android Gradle Plugin的区别?</h3>
<p>Gradle和Android Gradle Plugin是两个不同的方向和功能, Gradle是用来进行项目的构建, 而Android Gradle Plugin是一个构建的动作, 和我们项目中的.gradle文件功能相同.</p>
<h2 id="2-为什么要使用Android-Gradle-Plugin">2.为什么要使用Android Gradle Plugin?</h2>
<p>可能在初次接触到类似问题的时候都会有这样的问题, 这玩应到底有啥用?</p>
<p>如果你打包过.apk, 那么你就是 <code>Android Gradle Plugin</code> 的头号潜在用户.</p>
<p>我们可以构建我们自己的 <code>Android Gradle Plugin</code> 来帮助我们实现以下的功能</p>
<ul>
<li>资源的预处理: 压缩图片, 修改资源内容</li>
<li>配置文件的处理: 根据不同flavor更新不同的配置文件内容</li>
<li>自定义规则添加: 针对项目中自定的规则进行检查</li>
<li>AOP: 切面添加相关代码</li>
</ul>
<p>当然, <code>Android Gradle Plugin</code> 能做的不仅仅是这些, 我们还可以根据我们自己的需求来修改创建满足自己的特殊功能的 <code>Android Gradle Plugin</code></p>
<h2 id="3-创建我们自己的Android-Gradle-Plugin">3. 创建我们自己的Android Gradle Plugin</h2>
<p><code>Android Gradle Plugin</code> 有三种创建的方法,</p>
<h2 id="3-1-build-gradle">3.1 build.gradle</h2>
<p>第一种就是直接在app module的build.gradle文件中添加以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 编写plugin类</span><br><span class="line">class DemoPlugin implements Plugin&lt;Project&gt;&#123; @Override void apply(Project project) &#123; println &quot;===============&quot; println &quot;DemoPlugin&quot; println &quot;===============&quot; &#125;</span><br><span class="line">&#125; // 使用自定义Plugin</span><br><span class="line">apply plugin: DemoPlugin 复制代码</span><br></pre></td></tr></table></figure>
<p>我们Sync后就可以在 <code>Build</code> 窗口中看到以下的数据了.</p>
<p>这种使用的方法最大的有点就是简单简洁, 最大的缺点是太过简单简洁, 最适合的是小功能, 并且没有可移植性, 只能跟着build.gradle文件走.</p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fclwater%2FFirst_Gradle_Plugin_of_Android%2Fblob%2Fmaster%2FFirst_Gradle_Plugin_of_Android_Test_1%2Fapp%2Fbuild.gradle">GitHub文件地址:https://github.com/clwater/First_Gradle_Plugin_of_Android/blob/master/First_Gradle_Plugin_of_Android_Test_1/app/build.gradle</a></p>
<h2 id="3-2-buildSrc">3.2 buildSrc</h2>
<p>第二章方法是在项目中创建新的module, 并且命名为 <code>buildSrc</code>.</p>
<p>构建后的文件目录结构如下, 具体的详情说明会在后面进行详细的说明.</p>
<p>当然, 在使用的使用仍需要在 <code>build.gradle</code> 中添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apply plugin: &#x27;com.clwater.plugin&#x27; // 这个名字和我们.properties文件的名字一致</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>
<p>此时我们再sync项目, 可以看到如下输出</p>
<p>这种方法具有一定的复用性, 在项目中的每个module可以使用, 但是对外仍不可使用.</p>
<blockquote>
<p>Tips: module只能命名为 <code>buildSrc</code>, 并且在 <code>settings.gradle</code> 将自动添加的 <code>include ':buildSrc'</code> 移除</p>
</blockquote>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fclwater%2FFirst_Gradle_Plugin_of_Android%2Fblob%2Fmaster%2FFirst_Gradle_Plugin_of_Android_Test_2%2Fapp%2Fbuild.gradle">GitHub文件地址:https://github.com/clwater/First_Gradle_Plugin_of_Android/blob/master/First_Gradle_Plugin_of_Android_Test_2/app/build.gradle</a></p>
<h2 id="3-3-Android-Gradle-Plugin-Project">3.3 Android Gradle Plugin Project</h2>
<p>顾名思义, 我们可以在独立的Project中创建我们的 <code>Android Gradle Plugin</code>,</p>
<p>当然创建的方法也不止一种, 可以酌情根据时间情况来选择如果进行创建, 以下推荐与否, 全凭主观臆断.</p>
<h3 id="3-3-1-手动创建">3.3.1 手动创建</h3>
<blockquote>
<p>纯主观臆断不推荐</p>
</blockquote>
<p>因为自己创建的时候需要手动配置关联的内容, 但是这些关联的内容对刚刚接触此部分的开发者来说, 又十分的零碎, 往往最后不得其法, 导致由于各种或理解或遗漏的小问题造成的运行结果不达预期.</p>
<h3 id="3-3-2-通过Gradle创建">3.3.2 通过Gradle创建</h3>
<p>既然是 <code>Android Gradle Plugin</code>, 那得先是 <code>Gradle</code> 中能用的, 才能扩展到 <code>Android Gradle</code> 中, Gradle也提供了一个自动创建的方法, 来避免我们手动创建时引发的各种问题. 也方便相关流程的规范化.</p>
<h4 id="创建Android-Gradle-Plugin-Project所在的文件夹">创建Android Gradle Plugin Project所在的文件夹</h4>
<p>这里我们之间创建一个文件夹, 用作我们Android Gradle Plugin对应Project的所在目录</p>
<h4 id="使用gradle-init构建项目">使用gradle init构建项目</h4>
<blockquote>
<p>此章节使用的gradle指令时, 如无法找到相关指令, 检查gradle是否安装配置, 详情参考 <a href="https://link.juejin.cn?target=">Gradle | Installation: https://gradle.org/install/</a></p>
</blockquote>
<p>我们在终端中打开刚刚创建的目录, 并进行以下操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gradle init Select type of project to generate: 1: basic 2: application 3: library 4: Gradle plugin</span><br><span class="line">Enter selection (default: basic) [1..4] 4</span><br><span class="line"># 选择生成的Gradle项目类型, 我们需要选择4: Gradle plugin Select implementation language: 1: Groovy 2: Java 3: Kotlin</span><br><span class="line">Enter selection (default: Java) [1..3] 1</span><br><span class="line"># 选择插件的编码使用语言, 这里推荐使用Groovy(相关教程及内容最多) Select build script DSL: 1: Groovy 2: Kotlin</span><br><span class="line">Enter selection (default: Groovy) [1..2] 1</span><br><span class="line"># 选择项目的编译脚本语言(类似build.gradle文件), 推荐使用Groovy, 理由同上 Generate build using new APIs and behavior (some features may change in the next minor release)? (default: no) [yes, no] no</span><br><span class="line"># 是否启用一些新的实验性的APIs来进行构建, 如果没有特殊需求的话不启用即可 Project name (default: First_Gradle_Plugin_of_Android_Test_3): plugin</span><br><span class="line"># Project的名称, 默认为你对应文件的名称, 实际上是你对应module的名称 Source package (default: plugin): com.clwater.plugin</span><br><span class="line"># 包名的完整地址, 更改为你的地址即可 &gt; Task :init</span><br><span class="line">Get more help with your project: https://docs.gradle.org/8.0/userguide/custom_plugins.html BUILD SUCCESSFUL in 1m 19s</span><br><span class="line">2 actionable tasks: 2 executed 复制代码</span><br></pre></td></tr></table></figure>
<p>最终的构建结果如下:</p>
<h4 id="编写我们自己的Plugin">[编写我们自己的Plugin]</h4>
<p>打开默认生成的 <code>.groovy</code> 文件, 我就就此文件进行简单的修改, 方便后面的步骤进行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 更改下默认生成的文件名</span><br><span class="line">class ClwaterPlugin implements Plugin&lt;Project&gt; &#123; void apply(Project project) &#123; // 输出一下插件被调用 println(&quot;Hello from plugin&quot;) // 注册一个名叫greeting的task project.tasks.register(&quot;greeting&quot;) &#123; doLast &#123; println(&quot;Hello from plugin &#x27;com.clwater.plugin.greeting&#x27;&quot;) &#125; &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>
<blockquote>
<p>关于Gradle Task的相关内容, 这里不再额外赘述, 如果大家感喜欢我的文章风格的话, 我可以再帮大家整理一下.</p>
</blockquote>
<h4 id="发布插件">发布插件</h4>
<p>当我们在Project中创建好并完成了我们自己的 <code>Android Gradle Plugin</code> 后, 下一步就是将它提供给第三方,</p>
<h5 id="配置build-gradle">配置build.gradle</h5>
<p>接下来就是在 <code>build.gradle</code> 中添加额外的发布配置, 构建出来的插件如不配置指定的 <code>repositories</code> 会在系统默认的mavenLocal中生成, 这里为了更直观便捷的使用, 我们将其生成在项目内.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">plugins &#123; ... id &#x27;maven-publish&#x27;</span><br><span class="line">&#125; ...</span><br><span class="line">publishing &#123; publications &#123; // 此处clwater可以随便写，但是后面的MavenPublication不能随便写 clwater(MavenPublication) &#123; // 插件的组ID groupId = &#x27;com.clwater.plugin&#x27; // 插件的ID artifactId = &#x27;Plugin&#x27; // 插件的版本 version = &#x27;1.0.0&#x27; // 插件的发布类型 from components.java &#125; &#125; repositories &#123; maven &#123; // 插件的发布仓库 name = &#x27;repo&#x27; // 插件的发布仓库地址 url = &quot;../repo&quot; &#125; &#125;</span><br><span class="line">&#125; ... 复制代码</span><br></pre></td></tr></table></figure>
<p>此时我们再使用 <code>gradle tasks</code> 就可以看到我们的发布task了.</p>
<h5 id="配置插件调用信息">配置插件调用信息</h5>
<p>我们可以看到在 <code>main</code> 文件夹下有 <code>groovy</code> 和 <code>resources</code> 两个文件夹, <code>groovy</code> 包含了我们的插件代码, 而 <code>resources</code> 文件夹则需要包含我们的插件声明文件.</p>
<p>为了使得我们的插件可以被调用, 我们需要配置相关的声明. 主要是在 <code>resources</code> 目录下添加 <code>META-INF</code>, 并在 <code>META-INF</code> 中添加 <code>gradle-plugins</code>, 在 <code>gradle-plugins</code> 添加 <code>com.clwater.plugin.properties</code>, 当然这个文件的名字我们可以随便定义. 没有约束性要求. 最后的文件目录结果如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main</span><br><span class="line">├── groovy</span><br><span class="line">│ └── com</span><br><span class="line">│ └── clwater</span><br><span class="line">│ └── plugin</span><br><span class="line">│ └── ClwaterPlugin.groovy</span><br><span class="line">└── resources └── META-INF └── gradle-plugins └── com.clwater.plugin.properties</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>
<p>关于 <code>com.clwater.plugin.properties</code>, 我们需要配置我们插件的入口, 形式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation-class=com.clwater.plugin.ClwaterPlugin</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>
<h5 id="生成到本地">生成到本地</h5>
<p>由于我的 <code>build.gradle</code> 文件中配置的名称为 <code>clwater</code>, 所以我的最终的文件生成task应该使用 <code>publishClwaterPublicationToRepoRepository</code>, 当我们自己开发的时候, 酌情根据自己的情况进行修改.</p>
<p>当然, 你也可以在Android Studio的Gradle窗口中找到相关的构建Task</p>
<p>当我们的发布task完成后, 就可以发现项目中多了一个repo的目录, 同时我们的插件也发布到了此处.</p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fclwater%2FFirst_Gradle_Plugin_of_Android%2Fblob%2Fmaster%2FFirst_Gradle_Plugin_of_Android_Test_3">GitHub文件地址:https://github.com/clwater/First_Gradle_Plugin_of_Android/blob/master/First_Gradle_Plugin_of_Android_Test_3</a></p>
<h4 id="项目引入和使用">项目引入和使用</h4>
<p>当我们的项目构建完成后, 就可以提供给别的项目进行使用了, 我们先构建一个新的项目,</p>
<blockquote>
<p>由于使用的gradle版本为gradle-7.5, 项目中gradle相关文件可能有所不用, 酌情根据项目实际情况来进行配置.</p>
</blockquote>
<h5 id="引入">引入</h5>
<p>首先是将我们生成好的 <code>Android Gradle Plugin</code> 所在的 <code>repo</code> 文件夹复制到项目中, 然后依次修改以下文件</p>
<h6 id="settings-gradle">settings.gradle</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pluginManagement &#123; repositories &#123;</span><br><span class="line">+ gradlePluginPortal() google() mavenCentral()</span><br><span class="line">- gradlePluginPortal()</span><br><span class="line">+ //增加本地仓库</span><br><span class="line">+ maven &#123;</span><br><span class="line">+ allowInsecureProtocol(true)</span><br><span class="line">+ url uri(&#x27;./repo&#x27;)</span><br><span class="line">+ &#125; &#125; &#125; dependencyResolutionManagement &#123;</span><br><span class="line">@@ -10,6 +15,11 @@ dependencyResolutionManagement &#123; repositories &#123; google() mavenCentral()</span><br><span class="line">+ //增加本地仓库</span><br><span class="line">+ maven &#123;</span><br><span class="line">+ allowInsecureProtocol(true)</span><br><span class="line">+ url uri(&#x27;./repo&#x27;)</span><br><span class="line">+ &#125; &#125; &#125;</span><br><span class="line">rootProject.name = &quot;First_Gradle_Plugin_of_Android_Test_4&quot;</span><br><span class="line">include &#x27;:app&#x27;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>
<p>简单来说就是向两个 <code>repositories</code> 中添加我们使用的本地仓库</p>
<h6 id="project下的build-gradle">project下的build.gradle</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+ buildscript &#123;</span><br><span class="line">+ dependencies &#123;</span><br><span class="line">+ classpath(&#x27;com.clwater.plugin:Plugin:1.0.0&#x27;)</span><br><span class="line">+ &#125;</span><br><span class="line">+ &#125;</span><br><span class="line">+ // Top-level build file where you can add configuration options common to all sub-projects/modules.</span><br><span class="line">plugins &#123; id &#x27;com.android.application&#x27; version &#x27;7.4.0&#x27; apply false id &#x27;com.android.library&#x27; version &#x27;7.4.0&#x27; apply false id &#x27;org.jetbrains.kotlin.android&#x27; version &#x27;1.7.21&#x27; apply false</span><br><span class="line">&#125; 复制代码</span><br></pre></td></tr></table></figure>
<p>添加我们的插件(groupId:Id:version的格式)</p>
<h6 id="app-module下的build-gradle">app module下的build.gradle</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugins &#123; id &#x27;com.android.application&#x27; id &#x27;org.jetbrains.kotlin.android&#x27;</span><br><span class="line">+ id &#x27;com.clwater.plugin&#x27;</span><br><span class="line">&#125; android &#123; namespace &#x27;com.clwater.first_gradle_plugin_of_android_test_4&#x27; compileSdk 33 ...</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tips: id 'com.clwater.plugin’中的内容和我们配置 <code>resources</code> 文件夹下的 <code>.properties</code> 需要完全一致</p>
</blockquote>
<h6 id="早期版本构建项目配置文件参考">早期版本构建项目配置文件参考</h6>
<p>早期的项目修改起来比较容易, <code>app</code> 下的 <code>build.gradle</code> 配置完全一致, 我们要修改的只有项目根目录下的 <code>build.gradle</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Top-level build file where you can add configuration options common to all sub-projects/modules. buildscript &#123; repositories &#123;</span><br><span class="line">+ maven &#123;</span><br><span class="line">+ url uri(&#x27;./repo&#x27;)</span><br><span class="line">+ &#125; mavenCentral() google() jcenter() &#125; dependencies &#123; classpath &#x27;com.android.tools.build:gradle:4.2.1&#x27; classpath &#x27;org.owasp:dependency-check-gradle:6.0.5&#x27; // ★追加</span><br><span class="line">+ classpath &#x27;com.clwater.plugin:Plugin:1.0.0&#x27; &#125;</span><br><span class="line">&#125; apply plugin: &#x27;org.owasp.dependencycheck&#x27; // ★追加 allprojects &#123; repositories &#123;</span><br><span class="line">+ maven &#123;</span><br><span class="line">+ url uri(&#x27;./repo&#x27;)</span><br><span class="line">+ &#125; mavenCentral() google() jcenter() &#125;</span><br><span class="line">&#125; 复制代码</span><br></pre></td></tr></table></figure>
<h5 id="使用">使用</h5>
<p>其实当然引入之后就已经再使用了, 当我们重新构建项目的时候就可以在 <code>build</code> 视图中看到如下内容</p>
<p>我们可以看到在 <code>ClwaterPlugin</code> 中的输出语句被调用了. 说明我们的插件已经被执行了.</p>
<p>同时我们执行 <code>./gradlew tasks --all</code>, 就可以找到我们定义的 <code>greeting</code> task,</p>
<p>当然, 直接执行的时候也是可以的.</p>
<blockquote>
<p>Tips: 截止此处, 我们已经可以通过任意方式来创建一个 <em>Android Gradle Plugin</em> 并将其在任意的项目中使用了, 但是其实还有一个疑问, <em>Android Gradle Plugin</em> 可以帮助我们做什么?</p>
</blockquote>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fclwater%2FFirst_Gradle_Plugin_of_Android%2Fblob%2Fmaster%2FFirst_Gradle_Plugin_of_Android_Test_4e">GitHub文件地址:https://github.com/clwater/First_Gradle_Plugin_of_Android/blob/master/First_Gradle_Plugin_of_Android_Test_4</a></p>
<h2 id="4-通过Android-Gradle-Plugin来帮助我们修改配置文件-以修改阿里云EMAS推送为例">4.通过Android Gradle Plugin来帮助我们修改配置文件(以修改阿里云EMAS推送为例)</h2>
<p>前文提到过&quot;如果你打包过.apk, 那么你就是 <code>Android Gradle Plugin</code> 的头号潜在用户.&quot;, 因为 <code>Android Gradle Plugin</code> 可以帮助我们做许多不得不做, 有具有重复性的事情.比如此章的情况: <em>通过Android Gradle Plugin来帮助我们修改配置文件(以修改阿里云EMAS推送为例)</em></p>
<blockquote>
<p>阿里云EMAS是一个第三方的推送插件, 可以进行数据的推送, 接入过程不过去描述, 我们使用 <code>Android Gradle Plugin</code> 来解决的问题是: EMAS的配置文件唯一, 无法配置多个文件, 如果不自动化配置的话, 那么上线和测试开发时使用的配置文件要不只能使用一个, 要不需要打包前手动修改, 而只有一套配置文件来开发上线显然是不应该的, 同时如果多套的话, 手动来进行打包前的修改也是不可靠的. 最终还是需要进行自动化配置.</p>
</blockquote>
<p>参考代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.clwater.plugin import org.gradle.TaskExecutionRequest</span><br><span class="line">import org.gradle.api.GradleException</span><br><span class="line">import org.gradle.api.Plugin</span><br><span class="line">import org.gradle.api.Project</span><br><span class="line">import org.gradle.api.invocation.Gradle class ClwaterPlugin implements Plugin&lt;Project&gt;&#123; // 不同的渠道 enum BuildType &#123; PRODUCT, DEV, TEST, NONE ; &#125; // project持有 private Project project // 配置文件路径 // ali push 配置文件路径(preBuild使用) private String emasFromFile // ali push 配置文件路径(/app实际构建) private String emasToFile private buildType = BuildType.NONE; /** * 插件入口 * step1: 检查xxx(配置文件路径)文件夹是否存在 * step2: 检查是否构建为生产环境 * step3: 拷贝xxx内容文件夹到app文件夹 * step3.1: 拷贝ali push配置文件 * step4: 构建完成后删除相关文件 * @param project */ @Override void apply(Project project) &#123; println(&#x27;==================================================&#x27;) println(&#x27;ClwaterPlugin is applying&#x27;) this.project = project buildType = getBuildType(project) println(&quot;ClwaterPlugin: buildType: $buildType&quot;) deleteEAMSCache() initBaseConfig() if (checkPreBuildFile())&#123; throw new GradleException(&quot;File not found: $emasFromFile&quot;) &#125; movePreBuildFile() project.gradle.buildFinished &#123; println(&#x27;==================================================&#x27;) println(&#x27;ClwaterPlugin: finished&#x27;) println(&#x27;ClwaterPlugin: delete cache file&#x27;) deleteCache() println(&#x27;==================================================&#x27;) &#125; &#125; /** * 删除阿里推送emas缓存文件, 避免新的配置文件无法生效 */ private void deleteEAMSCache()&#123; Gradle gradle = project.gradle println(&quot; del: $project.rootDir/app/build/generated/res/emas-services&quot;) project.delete(&quot;$project.rootDir/app/build/generated/res/emas-services&quot;) List&lt;TaskExecutionRequest&gt; taskExecutionRequests = gradle.getStartParameter().getTaskRequests() for (TaskExecutionRequest taskExecutionRequest: taskExecutionRequests) &#123; if (taskExecutionRequest.args.toString().contains(&quot;assemble&quot;))&#123; String variant = taskExecutionRequest.args.toString() variant = variant.replace(&quot;[&quot;, &quot;&quot;) variant = variant.replace(&quot;]&quot;, &quot;&quot;) variant = variant.replace(&quot;:app:&quot;, &quot;&quot;) variant = variant.replace(&quot;assemble&quot;, &quot;&quot;) variant = &quot;merge&quot; + variant + &quot;Resources&quot; // 提取构建variant println(&quot; del: $project.rootDir/app/build/intermediates/incremental/$variant/merger.xml&quot;) project.delete(&quot;$project.rootDir/app/build/intermediates/incremental/$variant/merger.xml&quot;) &#125; &#125; &#125; /** * 初始化基础配置 */ private void initBaseConfig()&#123; switch (buildType)&#123; case BuildType.PRODUCT: emasFromFile = &quot;xxx/product/aliyun-emas-services.json&quot; break case BuildType.DEV: emasFromFile = &quot;xxx/dev/aliyun-emas-services.json&quot; break case BuildType.TEST: emasFromFile = &quot;xxx/test/aliyun-emas-services.json&quot; break &#125; emasToFile = &quot;$project.rootDir/app&quot; &#125; /** * 拷贝preBuild对应文件到app文件夹 */ private void movePreBuildFile()&#123; moveEmas() &#125; /** * 拷贝文件 * @param fromPath * @param toPath */ private void copyFile(String fromPath, String toPath)&#123; project.copy &#123; from fromPath into toPath &#125; &#125; /** * 复制配置文件 */ private void moveEmas()&#123; copyFile(emasFromFile, emasToFile) &#125; /** * 检查是否构建为生产环境 * @param project * @return */ private static BuildType getBuildType(Project project)&#123; Gradle gradle = project.gradle List&lt;TaskExecutionRequest&gt; taskExecutionRequests = gradle.getStartParameter().getTaskRequests() for (TaskExecutionRequest taskExecutionRequest: taskExecutionRequests)&#123; if(taskExecutionRequest.args.toString().contains(&quot;assemble&quot;))&#123; // 检查是否为Dev/Test/Product &#125; &#125; return BuildType.DEV &#125; /** * 检查预构建文件是否存在 * @return */ private boolean checkPreBuildFile()&#123; // 检查emas配置文件是否存在 File emasFile = new File(emasFromFile) return !emasFile.isFile() &#125; /** * 删除相关文件 */ private void deleteCache()&#123; project.delete(emasToFile+ &quot;/aliyun-emas-services.json&quot;) &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>
<p>至此, 我们就完成了针对阿里EMAS的多版本配置文件的自动化配置, 再也不用担心人工配置可能引起的各种问题了.</p>
<h2 id="1-最后">-1. 最后</h2>
<p>相信至此大家已经对 <code>Android Gradle Plugin</code> 有了一定的了解, 也希望此文可以帮助到大家, 更欢迎大家一起交流.</p>
<h2 id="2-最后的最后">-2 最后的最后</h2>
<p>项目完整代码可以访问:<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fclwater%2FFirst_Gradle_Plugin_of_Android">我的GitHub: https://github.com/clwater/First_Gradle_Plugin_of_Android</a></p>
<h2 id="Footnotes">Footnotes</h2>
<ol>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.android.com%2Fstudio%2Fbuild%2Fextend-agp%3Fhl%3Dzh-cn">developer.android.com/studio/buil…</a> <a href="https://juejin.cn/post/7201052651755913277#user-content-fnref-1">↩</a></li>
</ol>
]]></content>
      <tags>
        <tag>AGP</tag>
        <tag>Gradle</tag>
        <tag>plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>收银台SDK</title>
    <url>/2018/01/01/%E6%94%B6%E9%93%B6%E5%8F%B0SDK/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0d57aff540532d0ee2d52f0cdf553e5baf83f50ca3240215a63e3ecc0600e031"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章需要解密才可以阅读.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>文档</category>
      </categories>
      <tags>
        <tag>文档</tag>
        <tag>收银台</tag>
        <tag>sdk</tag>
      </tags>
  </entry>
  <entry>
    <title>收银台SDK版本列表</title>
    <url>/2018/07/04/%E6%94%B6%E9%93%B6%E5%8F%B0sdk%E5%8C%85/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3765289abfe41e0d1321e9f690ba43cb56505644d9dac32d4d15e7bc1c3b2a84">08ac525c96211a3092fa3b7d11fbe1fb93f8d0a851d1bdd2c1ff4573bcd60a0062a64774ede854099700e93817a98a56d312918402007435d53f87ef809fec5632ad90ed88c4fc800a11a6162f2f1f3410dc0ddfd5a4a068b7b591b95039dda1b418631d00482a1cb3a38c323cbf4f8930f5f7e519cae11fc684bad38863b75e6142c9d50966f9f934987cac35f735c44dabd1d3d726cc57567685b6a5d35c63339e6392acce0109872097be1ab78ca05fed5560191855bcea6c359400ac6c8ff3e3f9df3ca2ddbd3ec429dee8283407e77a369e9509cb344d34e15a50fb1c102299bc2a62429a688ec6171b9db94ccd4471f7b4e89f3cad1941c00d6bb9209aa83d32542973a5527ed29716bf0a397e6a89aeb0289adcef63d5b750ecc7e61a0c3b9fd6ebf84e9f2dbc1cbc8f8602e76b4604658ca201755806262bc062bd2692e0d2c51e8063cd7f79a9c5f3641f0813abac13eb1d48cd938423b76866a9a4f7e0cbc7507773ba5eb37dbb5df3f1df4e0fa647a379479f4729964d106d8c70d1f9a6ec039f6d5466a9162d5d8a9b0eb3ec025d7d328efe049a0f76c68f04f907769902b9e7c51ed6ce27f88404c712fc64a5a6e4c875aa91b87798097d480de341eeef7c9efa7a8db03ac98bfd4808592f93bc58f076f670e6dafc2f0c889374352d1a8b8889727cef534a6a16b7d691c0d9bac18066db2d35cfaed2bb967c6ac8b58601726ae5e99bdacf97ca27ae8e38ebdb6b5106fbc3c57e00bbb34df7aa0fc589b215ae1e3ee42c733ad93cc3af904ab54cce6bd2be555f1ded262b6b7ae25e54bbf4570a55e4c0d71a5034f249d5c1616484a80d4243d93849122abf8f5b11459c4761231259b2df05ba66651ae07eb35a1fd9f1fe83256c200e9df989f7e7fa945221a4b080661c37c89fcc22f2c6fc36b0a1c0852aba21d6af25c61b89b680af623d867cc2b8f2a5c39c2f457bc1b2ffd8cd91c8b9d55b33dadc16203dcf3d6c5fb94ea80a98075e6733ceb90b291cf23ef824a9d712480f4de3175a01f0435cf27d51f23ce41676542b4c68e86b20bad74a035f0ee1430f5b257e43479deba4b413a225eec08fdf5ed171771d459140a2643a4ded7660aea1548feb139b68bfae6073ece7098d6fe9e389bd222322571b5ed952e7322879dee17a9d268c97cc57bbb95342b4306ea68d785956b37bd037e632058e88cc1c44fc9c1534bcb444f1a780db5f9a784b46dbea4de83292f795d62a51ba7fb7365e1e9fbb968afb3d1617c201dcc439e3491f3f768e9be84e1d21df2f5aa29aa7778ef5f2a417d24a88b7b144dd16a1b7200d01b42a0c5124ceb31e9cc82877f62dba07cc1de66d4ccd21b7a80c79a6cce453a2b285f29d5521de078e10f70bd17400fae171dba2bcb1fd0528978a78e2668081bb6b13e4d43f2110b97c09fd07e232d850b3d564ce598edf64efac6fe79da1c4241443e3644a6deeac09fe819e07838178670a39e71d3c60047173451fcd590617bd13fff61f28da15120d6c2d956459be8ce0a54b217344ced04a68f03a27f31bf48f7d2d13049aba4c0c499cd08f9174d9cc8021984f2e9a8d3c0f30e878f213da7c8e28d7880468f5ee7b92af72f557845cc68d079b3667b5fc9b0611f9b01dc71182166a175d8346a40a67a9ed9956d68c5f209d134ef6d2f6b50effc9bf1719f0ce8336ea647271836bece6864066dcb183b52229a4bec53b85537a8f561307c461b468dc502c6f41abc4045a37e0ddf2ff323309900024428e24ec490a73ee26df7fd98be5932fca5c79a382189b02f59f15e4e824d5c3d9ac2fe0283d9253512ec5653e7c68422448783e4d595ba465ae1842f081ea6ddc2f60341ed265fc6d283994cec2271f07207ca743a320b6c152296a7c010a6f7c1554e33bfbe4de4739c79c5ef48d5f0e7f14cf6fa230b64d384998729e0fdd427d32e20e431077485eed0825a7df09a3c38b58ae8cd33ab8b5f374b0e9b7218c5031cafe6f451786c08b0f77f25e269a804fa18ae4df1624b91e8b4dfc3f702c79e9bd06794c84777a9851748a28a89409121a9d2cf0f72c694c009c655675944b61666bfee7aa66ef7f5e091b46b9894464f8c65e2d97b30cf89eed424a53cb63fbe8edf7fba1cebc0cda65ea79d55a830bf0ab85f550c2a57bd52d459f2a28f95cf17632f2daae41245414d7321975ceff1614a29510f5b5c6aa270d8888005735eaa56db59678f9b9c9e78b9d65eb13eb32cb00620ceb4f2c96fb17dc8b725cb4269ab31612050ca668e4633189e9b26f4973a660f42b6039c952169815d0e478d23f83b1f9667cda18ff4840f89c8516554ddf43d123f7d0a51452893471bc3fde9c914dd276b6c28aed69bcd0cc3bc2e1a1e2d0b903d13580eb676691969231eabd4ceafbd8dc532adcde571532c8ce6ec5da10b4600b5a30d59cbf63d8223833d830007eed2cc43e270354f578ba53afe40b7f833502ac665fd9f1d3dac1da011952c8d88b5a0e59c4222b476426ee95c3e5a0fb8bdbf479bfb00b9942f51fb9add9ea1a783f6901f53ac34e32c07cdf1a312908452d2d037073c1426519794da77b0f569dd682afc5624abed56abc04147afcdc6580efa8ad979e0202d94fc723fb2da72f55f8fd59e3dd1c576f9fa959f478da44ceee85c9846bc1b572eac457ce55d322e361fdc2d1c3e2f8cc28ac49675d086efbb002647d1a0d61baa87ddd58be02a741828a8111dabc3523f58c48a3536ecbdfca7ab14d34154081a31060eeb850df6a979aafa564ac44fbdea447a987173d0ded23f1eefcc50f57bac1783adee2651607a6347728978d88863d6396aa4b13e7397e2c823292e0fa67b6e92c57d56bc029c0bff3947efd33a3beac073d7fafee0ade977e728a48bfc0f2cfbb34f671ad8e1454214cc2aeb3cbb5a0d0c728bc92a569ab941b0ad75a5dbf73d2760b65d2187aa4ef56411eb1046446a1e07304b054a67a5351d2712f3b56630af3fe93ffbd5c7137b82b3ee09eb1705c90be7424059eaeae79482b597015ad0b4d1e5ce6ebf57ed0548b71d7f137a90c05cffafdccba497a3da0f860b9e7d59ac5c59306bf19e0030fbdbcdc4e6f444fb9614929b7d95e317bd83fecef6953a131413ab343c354ec02280e66b39190632cb79379d928eedc1b230851a8b1c8443e4dc6e383df3d75707b95caa345a08fea781ce9fbfd17e71dcf9baa16e00a689de25ba31aa25241dfe6639cbddbcda1b693eb679778ef8ab5e5b28102438a6b5391017da0a135f7671e217d7847b729097dfdc747842b6cc84ede22b550fd1243d7b48487247b762b03640921b0fb6895688953173cddd7e6802770193c357675e74664d9e7fcece58bcea1351132f58f3967ba913178b85b849eeb09ed25a468b1585853098114c3e543e7865bd60d334664232991ba8271711d74a486f3e874a6acfa607a893904af68470822287da9499c1eb3d37a0a262f4b5466df7602f9737865e36121fa172de663793a60873c1ca1e3ba4b7f4e740bf86ee8c041c8f323488d4321b64ca9ebd6c4a35998b0d2d7695b6401408330ba8e4f41579e2880f27ad95058b7a8bbf83e2ad6b4f48f5ab7e217287651f063bd9e36521171d5f707fa0d522c7185e149ed2b286f6752f51e84d229fe9f491d972cea098ebe42812cf1c185f24588ae2f6ea3da41a581d1c2ba83523be8be8f902af9a958d4e8c51299154227c707399cb0e21d444cb20e2ac2a431bd3d0c1da6cb0e7683a36bceafbd017cb96d4f76457f7f870a771ebffd01e4a796df67c2d7864842a34e748c5322e84aa772a436c823926f6d22c97d0bfeda795e9414d28ca3bd4d7df3f15a72d5eb78a52ec304d35adda36764dbe49f8f8c648b1640598eaf4ca201a84abd5ec7da031f5c0a13ef23586f878851112fdbcf994a2313b245c57d648cc644f4d8c68818fe56a5d2ad5d02d72b24015f6553939e9899ad4647fda01bc6e4428e044c74ae747a15257adcffc3598d5f718ecaf12222b84afc2af1eba824885c8ad6350b66397444930b4dceac39c4b97c5879f73672c57c43a68b53976b9a740be7339ee04d9541b2e956d26cec10033b484566bcbe5001c35712f208b350812854d4a1115395e185e89ee4fb701cbcc05193832740d0a7d840f82d327676fda84a3d9768aff1eb8ad9cc63f6ef70a0f9813bb20d432beae69481747eaf7d5c7fb83227a26465eb52725a3e25fd9f71ae3e35732a2b1ee15ebc94892af11bb3da0cd123e3bb80ec8b029a91ffcd3a3a0180d276afbebd48d60be79955b7b82746f67f302a542256873b269e8c16440cce51520efc8c6e3563a4f31ed31290e9daa0864977f45a18db3dd693629265448128a97506e23d083d400f7b2d8965bf8731ec89f073c8cae826b2a67d2b20884f09b54c654b141646dd2c77f9062ad1da67a520b134f3d17a56541c4a2d7bc3dbeec8be74f775b1ca6ed2cfcc67eef0</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">金融端SDK需要输入解密密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>文档</category>
      </categories>
      <tags>
        <tag>Android研发</tag>
        <tag>文档</tag>
        <tag>收银台</tag>
        <tag>sdk</tag>
      </tags>
  </entry>
  <entry>
    <title>收银台埋点</title>
    <url>/2018/10/16/%E6%94%B6%E9%93%B6%E5%8F%B0%E5%9F%8B%E7%82%B9%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<span id="more"></span>
<p><strong>事件类型定义：</strong></p>
<table>
<thead>
<tr>
<th><strong>event_type</strong></th>
<th><strong>desc</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>cashier_event</strong></td>
<td><strong>info埋点</strong></td>
</tr>
<tr>
<td><strong>cashier_error</strong></td>
<td><strong>error埋点</strong></td>
</tr>
</tbody>
</table>
<p><strong>事件名称定义：</strong></p>
<table>
<thead>
<tr>
<th><strong>event_action</strong></th>
<th><strong>desc</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>cashier_webview</strong></td>
<td><strong>初始化webview</strong></td>
</tr>
<tr>
<td><strong>cashier_resource_load</strong></td>
<td><strong>资源加载（js、css、html等）</strong></td>
</tr>
<tr>
<td><strong>cashier_evoking_pay</strong></td>
<td><strong>Android/iOS唤起支付</strong></td>
</tr>
<tr>
<td><strong>cashier_prestain</strong></td>
<td><strong>调用预加载接口</strong></td>
</tr>
<tr>
<td><strong>cashier_render</strong></td>
<td><strong>调用渲染接口</strong></td>
</tr>
<tr>
<td><strong>cashier_pay</strong></td>
<td><strong>调用pay接口</strong></td>
</tr>
<tr>
<td><strong>cashier_paysync</strong></td>
<td><strong>支付状态查询接口</strong></td>
</tr>
<tr>
<td><strong>cashier_click</strong></td>
<td><strong>收银台点击事件</strong></td>
</tr>
<tr>
<td><strong>cashier_get_info</strong></td>
<td><strong>其它</strong></td>
</tr>
<tr>
<td><strong>cashier_webview_http_error</strong></td>
<td><strong>webview与后台应答产生的错误，例如：404，500</strong></td>
</tr>
<tr>
<td><strong>cashier_webview_error</strong></td>
<td><strong>webview内部错误，例如：超时等。</strong></td>
</tr>
<tr>
<td><strong>cashier_webview_native_interact_with_js</strong></td>
<td><strong>native与js通过webview进行交互时，所需要的事件，进行埋点，比如：thp_info,post_result等。</strong></td>
</tr>
<tr>
<td><strong>cashier_code_error</strong></td>
<td><strong>编码层面上的错误</strong></td>
</tr>
</tbody>
</table>
<p><strong>MPOS埋点ACTION：</strong></p>
<table>
<thead>
<tr>
<th>event_action</th>
<th>desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>cashier_pos_scan</td>
<td>唤起扫码</td>
</tr>
<tr>
<td>cashier_pos_scan_result</td>
<td>扫码结果</td>
</tr>
<tr>
<td>cashier_pos_swipe</td>
<td>刷卡事件</td>
</tr>
<tr>
<td>cashier_pos_swipe_result</td>
<td>刷卡事件结果</td>
</tr>
<tr>
<td>cashier_pos_bluetooth_scan</td>
<td>扫描蓝牙事件</td>
</tr>
<tr>
<td>cashier_pos_connect</td>
<td>连接蓝牙事件</td>
</tr>
<tr>
<td>cashier_pos_pay</td>
<td>支付事件</td>
</tr>
<tr>
<td>cashier_pos_correct</td>
<td>冲正事件</td>
</tr>
<tr>
<td>cashier_pos_settle</td>
<td>结算事件</td>
</tr>
<tr>
<td>cashier_pos_result</td>
<td>结果上报</td>
</tr>
<tr>
<td>webview_http_error_action</td>
<td>上报webview网络错误</td>
</tr>
<tr>
<td>webview_error_action</td>
<td>上报非webview非网络错误</td>
</tr>
<tr>
<td>webview_page_start_action</td>
<td>页面开始加载</td>
</tr>
<tr>
<td>webview_page_finish_action</td>
<td>页面加载结束</td>
</tr>
</tbody>
</table>
<p><strong>埋点信息参数如下：</strong></p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>desc</strong></th>
<th><strong>示例值</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>metadata</strong></td>
<td><strong>拓展信息，接收需要额外添加的字段，json格式的数据  见下方定义</strong></td>
<td><strong>记录额外K-V类型数据</strong></td>
</tr>
<tr>
<td><strong>device_id</strong></td>
<td><strong>设备id，途虎APP内嵌页面可获取</strong></td>
<td><strong>C3C86986-970E-4E2E-A88A-F84C209D7595</strong></td>
</tr>
<tr>
<td><strong>client_time</strong></td>
<td><strong>时间发生时客户端设备的时间</strong></td>
<td><strong>1519970651</strong></td>
</tr>
<tr>
<td><strong>level</strong></td>
<td><strong>埋点日志级别</strong></td>
<td><strong>info/error</strong></td>
</tr>
<tr>
<td><strong>log_from</strong></td>
<td><strong>日志来源,默认为collector</strong></td>
<td><strong>collector</strong></td>
</tr>
<tr>
<td><strong>ip</strong></td>
<td><strong>客户端IP</strong></td>
<td><strong>180.169.188.82</strong></td>
</tr>
<tr>
<td><strong>uuid</strong></td>
<td><strong>用户标识</strong></td>
<td><strong>20171012105128572Zm.1</strong></td>
</tr>
<tr>
<td><strong>url</strong></td>
<td><strong>cashierUrl</strong></td>
<td><strong><a href="https://wx.tuhu.work/vue/vueTest/pages/home/index?_project=newcashier&amp;token=d7cc9245-6552-4d69-8450-6ac555e5ca6a&amp;outBizNo=testOutBizNo2018090909">https://wx.tuhu.work/vue/vueTest/pages/home/index?_project=newcashier&amp;token=d7cc9245-6552-4d69-8450-6ac555e5ca6a&amp;outBizNo=testOutBizNo2018090909</a></strong></td>
</tr>
<tr>
<td><strong>network</strong></td>
<td><strong>网络类型</strong></td>
<td><strong>wifi</strong></td>
</tr>
<tr>
<td><strong>sid</strong></td>
<td><strong>会话标识</strong></td>
<td><strong>2018030214033702133.1</strong></td>
</tr>
<tr>
<td><strong>event_action</strong></td>
<td><strong>当前统计事件名称 见上方</strong></td>
<td><strong>Android_cashier_webview</strong></td>
</tr>
<tr>
<td><strong>event_type</strong></td>
<td><strong>当前统计事件类型 见上方</strong></td>
<td><strong>cashier_event</strong></td>
</tr>
<tr>
<td><strong>user_id</strong></td>
<td><strong>系统内部user的id</strong></td>
<td></td>
</tr>
<tr>
<td><strong>app_id</strong></td>
<td><strong>用来区分环境及平台：tuhu_web, tuhu_wap等</strong></td>
<td><strong>h5_android_app</strong></td>
</tr>
<tr>
<td><strong>app_version</strong></td>
<td><strong>APP版本号</strong></td>
<td></td>
</tr>
<tr>
<td><strong>app_name</strong></td>
<td><strong>APP名称</strong></td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>metadata拓展信息定义：</strong></p>
<table>
<thead>
<tr>
<th><strong>字段名</strong></th>
<th><strong>desc</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>sourcePlatform</strong></td>
<td><strong>来源平台，默认为cashier</strong></td>
</tr>
<tr>
<td><strong>outBizNo</strong></td>
<td><strong>外部订单号</strong></td>
</tr>
<tr>
<td><strong>cashierRequestNo</strong></td>
<td><strong>cashierRequestNo</strong></td>
</tr>
<tr>
<td><strong>paymentInsId</strong></td>
<td><strong>支付指令ID</strong></td>
</tr>
<tr>
<td><strong>terminalType</strong></td>
<td><strong>终端类型</strong></td>
</tr>
<tr>
<td><strong>cashierUrl</strong></td>
<td><strong>收银台请求url</strong></td>
</tr>
<tr>
<td><strong>invokeUrl</strong></td>
<td><strong>调用外部url</strong></td>
</tr>
<tr>
<td><strong>req</strong></td>
<td><strong>调用外部url请求对象</strong></td>
</tr>
<tr>
<td><strong>resp</strong></td>
<td><strong>调用外部url请求响应</strong></td>
</tr>
<tr>
<td><strong>status</strong></td>
<td><strong>http状态码</strong></td>
</tr>
<tr>
<td><strong>msg</strong></td>
<td><strong>错误信息</strong></td>
</tr>
<tr>
<td><strong>payChannel</strong></td>
<td><strong>支付渠道(ALIPAY|WX|BESTPAY|APPLEPAY等)</strong></td>
</tr>
<tr>
<td><strong>jsFuncName</strong></td>
<td><strong>native to js/js to native function name</strong></td>
</tr>
</tbody>
</table>
<p><strong>注意事项：</strong></p>
<p>1、日志级别：LEVEL分为INFO、ERROR</p>
<p>2、hi.tuhu.cn添加开关配置，提供接口供H5、SDK异步获取开关配置，实现日志上报可配置</p>
<p>​      如：{“INFO”:true,“ERROR”:false}</p>
<p>3、能够捕获异常的地方，都需要上报ERROR日志（Html渲染异常、js加载异常、js执行异常等）</p>
<p>4、系统间访问的地方必须埋点上报</p>
<p>5、埋点日志需要携带订单号outBizNo</p>
<p>6、埋点日志每隔一定时间上报一次</p>
<p>7、如果能够获取到cashierReqNo、outBizNo、payInsId等参数，需要通过metadata上报</p>
<p>8、mdcKey要传到服务端，服务端日志mdcKey需要拼接前端传入的mdcKey</p>
]]></content>
      <categories>
        <category>文档</category>
      </categories>
      <tags>
        <tag>Android研发</tag>
        <tag>文档</tag>
        <tag>收银台</tag>
        <tag>sdk</tag>
      </tags>
  </entry>
  <entry>
    <title>智能pos返回结果整理</title>
    <url>/2018/04/03/%E6%99%BA%E8%83%BDpos%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h4 id="拉卡拉智能pos判断条件">拉卡拉智能pos判断条件</h4>
<h5 id="拉卡拉智能pos请求参数">拉卡拉智能pos请求参数</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[params]</span><br><span class="line">String orderNo;</span><br><span class="line">String posType;</span><br><span class="line">String action;</span><br><span class="line">String amount;</span><br><span class="line">String sourcePlatform;</span><br><span class="line">[result]</span><br><span class="line">SwipePayResult result;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h5 id="判断成功失败条件">判断成功失败条件</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(tag==<span class="string">&quot;扣款成功&quot;</span>)</span><br><span class="line">    =&gt;支付成功！</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    =&gt;支付失败！</span><br></pre></td></tr></table></figure>
<h4 id="讯联智能pos判断条件">讯联智能pos判断条件</h4>
<h5 id="讯联智能Pos请求参数">讯联智能Pos请求参数</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[params]</span><br><span class="line">String orderNo;</span><br><span class="line">String posType;</span><br><span class="line">String action;</span><br><span class="line">String amount;</span><br><span class="line">String sourcePlatform;</span><br><span class="line">[result]</span><br><span class="line">Trans result;</span><br></pre></td></tr></table></figure>
<h5 id="判断交易卡片类型">判断交易卡片类型</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (cardBrand.startsWith(<span class="string">&quot;ALP&quot;</span>)) &#123;</span><br><span class="line">                        paytype = <span class="string">&quot;支付宝&quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cardBrand.startsWith(<span class="string">&quot;WXP&quot;</span>)) &#123;</span><br><span class="line">                        paytype = <span class="string">&quot;微信&quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cardBrand.startsWith(<span class="string">&quot;SCT&quot;</span>)) &#123;</span><br><span class="line">                            paytype = <span class="string">&quot;扫码&quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        paytype = <span class="string">&quot;刷卡&quot;</span>;</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure>
<h5 id="判断交易是否属于扫码类别">判断交易是否属于扫码类别</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isQrPay</span><span class="params">(<span class="meta">@NonNull</span> String transCode)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">&quot;BPA&quot;</span>.equals(transCode) ||</span><br><span class="line">                <span class="string">&quot;BPP&quot;</span>.equals(transCode) ||</span><br><span class="line">                <span class="string">&quot;BVD&quot;</span>.equals(transCode) ||</span><br><span class="line">                <span class="string">&quot;BTH&quot;</span>.equals(transCode) ||</span><br><span class="line">                <span class="string">&quot;BVE&quot;</span>.equals(transCode) ||</span><br><span class="line">                <span class="string">&quot;BPI&quot;</span>.equals(transCode);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h5 id="判断成功失败条件-2">判断成功失败条件</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">条件<span class="number">1</span>:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isTransSuccess</span><span class="params">(Trans trans)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(trans!=<span class="literal">null</span>&amp;&amp;!isEmpty(trans.getTransCode()))&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">respCode</span> <span class="operator">=</span> trans.getRespCode();</span><br><span class="line">        <span class="keyword">if</span> (isQrPay(trans.getTransCode()))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;00&quot;</span>.equals(respCode) ||(<span class="string">&quot;09&quot;</span>.equals(respCode) &amp;&amp;<span class="string">&quot;0&quot;</span>.equals(trans.getProcessFlag()));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;00&quot;</span>.equals(respCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">条件<span class="number">2</span>:</span><br><span class="line">!<span class="string">&quot;BVE&quot;</span>.equals(trans.getTransCode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">综合<span class="number">1</span>，<span class="number">2</span>:</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>==<span class="literal">true</span>&amp;&amp;<span class="number">2</span>==<span class="literal">true</span>)&#123;</span><br><span class="line">    =&gt;成功！</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    =&gt;失败！</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="获取支付方式-备用，非必须">获取支付方式(备用，非必须)</h5>
<pre><code class="language-java">if(trans!=null)&#123;
    if(!isEmpty(cardBrand)&#123;
        if(cardBrand startWith(&quot;ALP&quot;))&#123;
            payType = &quot;支付宝&quot;;
        &#125;
        else if(cardBrand startWith(&quot;WXP&quot;))&#123;
            payType = &quot;微信&quot;;
        &#125;
        else if(cardBrand startWith(&quot;SCT&quot;))
        &#123;
            payType = &quot;扫码&quot;;
        &#125;else &#123;
            payType = &quot;刷卡&quot;;
        &#125;
    &#125;else&#123;
        paytType = &quot;&quot;;
    &#125;

    if(!isEmpty(transCode)&#123;
        if(&quot;BPA&quot;.equals(transCode))&#123;
            TransType = payType+&quot;消费&quot;;
        &#125;else if(&quot;PER&quot;.equals(transCode))&#123;
            TransType = &quot;刷开消费&quot;;
        &#125;else if(&quot;PVR&quot;.equals(transCode))&#123;
            TransType = &quot;刷开撤销&quot;;
        &#125;else&#123;
            TransType = payType+&quot;消费&quot;;
        &#125;
    &#125; 
&#125;```
</code></pre>
]]></content>
      <categories>
        <category>文档</category>
      </categories>
      <tags>
        <tag>智能pos</tag>
      </tags>
  </entry>
  <entry>
    <title>每天一道算法题-冒泡算法</title>
    <url>/2023/05/25/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98-%E5%86%92%E6%B3%A1%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1>今天的算法题-冒泡算法</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        bubbleSort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            System.out.println(nums[i] + <span class="string">&quot;、&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; nums.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] &gt; nums[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[j];</span><br><span class="line">                    nums[j] = nums[j + <span class="number">1</span>];</span><br><span class="line">                    nums[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>算法讲解：</h1>
<h4 id="两个两个比对，i的计数是代表的是总共比对的次数为n-1次；j代表的是要比对的两个的数的下标，动态变化。">两个两个比对，i的计数是代表的是总共比对的次数为n-1次；j代表的是要比对的两个的数的下标，动态变化。</h4>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法，Android</tag>
      </tags>
  </entry>
  <entry>
    <title>每天一道算法题-动态求和</title>
    <url>/2023/05/25/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98-%E5%8A%A8%E6%80%81%E6%B1%82%E5%92%8C/</url>
    <content><![CDATA[<h1>动态求和算法</h1>
<blockquote>
<p>给一个数组[1，2，3，4，5，6]，求一个新的数组[1,3,6,10,15,21]。提示：即，1+2=3，1+2+3=6;</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        runningSum(nums);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums)&#123;</span><br><span class="line">            System.out.println(i+<span class="string">&quot;、&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">runningSum</span><span class="params">(<span class="type">int</span>[]nums)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt; nums.length;i++ )&#123;</span><br><span class="line">            sum+=nums[i];</span><br><span class="line">            nums[i] = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样做的算法，空间的复杂度O(1),时间复杂度O(n)</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>每天一道算法题-将一个数组倒序</title>
    <url>/2023/05/26/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98-%E5%B0%86%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E5%80%92%E5%BA%8F/</url>
    <content><![CDATA[<h1>将一个数组进行倒序排列</h1>
<pre><code class="language-java">public class Reverse&#123;
    public static void main(String[]args)&#123;
        int[]nums = &#123;1,2,3,4,5,6,7&#125;;
        reverse(nums);
        for(int = 0;i&lt;nums.length;i++)&#123;
            System.out.println(nums[i]+&quot;、&quot;);
        &#125;
    &#125;

    public static int[] reverse(int[] nums)&#123;
        int i=0;
        int j= nums.length-1;
        for(int i=0;i&lt;nums.length;i++&gt;)&#123;
            if(i&lt;j)&#123;
            int temp = nums[i];
            nums[i++] = nums[j];
            nums[j--] = temp;
            &#125;
        &#125;
        return nums;
    &#125;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Android研发</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>每天一道算法题-平移一个数组的右侧的几个数字到左侧</title>
    <url>/2023/05/26/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98-%E5%B9%B3%E7%A7%BB%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E5%8F%B3%E4%BE%A7%E7%9A%84%E5%87%A0%E4%B8%AA%E6%95%B0%E5%AD%97%E5%88%B0%E5%B7%A6%E4%BE%A7/</url>
    <content><![CDATA[<h1>给定一个数组int[]a = {1,2,3,4,5,6,7},要求将数组变换为{5,6,7,1,2,3,4,5},通过一个算法来实现。要求时间复杂度为O(n),空间复杂度最小。</h1>
<pre><code class="language-java">public class TransFormArray&#123;
    public static void main(String[]args)&#123;
        int[] nums = &#123;1,2,3,4,5,6,7&#125;;
        transformArray(nums,3);//向右移动
        transformArray(nums,-3);//向左移动
        for(int i=0;i&lt;nums.length;i++)&#123;
            System.out.println(nums[i]+&quot;、&quot;);
        &#125;
    &#125;

    /**
     * 当transLen&gt;0右移，当transLen&lt;0左移；
     **/
    private static int[] transFormArray(int[]nums,int transLen)&#123;
        int len = nums.length;
        for(int i=0;i&lt; len;i++)&#123;
            //右移动三个位置,保持数组的长度是不变的，怎么实现呢？
            nums[(len+len+transLen+i)%len] = nums[i]
        &#125;
    &#125;
&#125;</code></pre>
]]></content>
  </entry>
  <entry>
    <title>每天一道算法题-生成一定范围相邻位置的索引</title>
    <url>/2023/05/26/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98-%E7%94%9F%E6%88%90%E4%B8%80%E5%AE%9A%E8%8C%83%E5%9B%B4%E7%9B%B8%E9%82%BB%E4%BD%8D%E7%BD%AE%E7%9A%84%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h1>给你一个位置，要求计算出与它相邻的位置的某个范围内的数字，比如：2，3，4，n?范围内的，位置分为左右两侧；</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算某一个位置对应的相邻位置的索引，分左右两侧</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalNearLocation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//求4这个位置左右各1范围内的位置的索引</span></span><br><span class="line">        <span class="type">int</span>[] rightLocs = calNearLocation(<span class="number">4</span>, <span class="number">2</span>);<span class="comment">//右边位置的</span></span><br><span class="line">        <span class="type">int</span>[] leftPocs = calNearLocation(<span class="number">4</span>, -<span class="number">2</span>);<span class="comment">//左边位置的</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;输出右侧的位置：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rightLocs.length; i++) &#123;</span><br><span class="line">            System.out.println(rightLocs[i] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;输出左侧的位置：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; leftPocs.length; i++) &#123;</span><br><span class="line">            System.out.println(leftPocs[i] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] calNearLocation(<span class="type">int</span> loc, <span class="type">int</span> range) &#123;</span><br><span class="line">        <span class="type">int</span>[] locs = <span class="keyword">new</span> <span class="title class_">int</span>[Math.abs(range)];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Math.abs(range); i++) &#123;</span><br><span class="line">            <span class="type">int</span> pos;</span><br><span class="line">            <span class="keyword">if</span> (range &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                pos = loc + range - i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pos = loc + range + i;</span><br><span class="line">            &#125;</span><br><span class="line">            locs[i] = pos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Android研发</tag>
        <tag>java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>每天一道算法题-青蛙跳台阶问题</title>
    <url>/2023/05/28/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98-%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1>今天的问题是青蛙跳台阶问题</h1>
<blockquote></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fun <span class="title function_">getValue</span><span class="params">(n: Int)</span>: Int &#123;</span><br><span class="line">    <span class="type">val</span> <span class="variable">f</span> <span class="operator">=</span> Array(n + <span class="number">1</span>) &#123; <span class="number">0</span> &#125;</span><br><span class="line">    <span class="keyword">return</span> cal(n, f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun <span class="title function_">cal</span><span class="params">(n: Int, f: Array&lt;Int&gt;)</span>: Int &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="literal">null</span> || n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        f[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> f[<span class="number">1</span>]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">        f[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> f[<span class="number">2</span>]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (f[n] == <span class="number">0</span>)</span><br><span class="line">        f[n] = cal(n - <span class="number">1</span>, f) + cal(n - <span class="number">2</span>, f)</span><br><span class="line">    <span class="keyword">return</span> f[n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>每天一到算法题之“旋转数组”</title>
    <url>/2023/05/23/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98/</url>
    <content><![CDATA[<h1>今天的算法题是“旋转数组”</h1>
<h4 id="解法一：">解法一：</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            temp[i] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            nums[(i+k)%nums.length] = temp[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解法二">解法二:</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class solution&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">nums</span> <span class="operator">=</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br><span class="line">        rotate(nums,<span class="number">3</span>);</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> i : testArray) &#123;</span><br><span class="line">            System.out.println(i + <span class="string">&quot;，&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        reverse(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">        reverse(nums,<span class="number">0</span>,k-<span class="number">1</span>);</span><br><span class="line">        reverse(nums,k,nums.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 倒置一个数组的算法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[start];</span><br><span class="line">            nums[start++] = nums[end];</span><br><span class="line">            nums[end--] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>精美照片典藏</title>
    <url>/2023/05/26/%E7%88%B1%E4%BA%BA%E7%85%A7%E7%89%87/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉,密码错误,请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="64cc0e4629013711bea2c202455514cae146a71b6e368c950f40a1c06da29b18">2f95905209dd33c3b7943ae67169d10103bfaf76e0c8cac86d314077683f0fb4774b31542ba16071af9619934c70aae8290c4bd2206a2c3f34adc4e1e2d044f00d68dcc1591e5531593bc56b3f197bd0</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章需要解密才可以阅读.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>照片</category>
      </categories>
      <tags>
        <tag>美图</tag>
        <tag>经典</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖OPT无法验证之解决方法</title>
    <url>/2025/10/19/%E7%BE%A4%E6%99%96OPT%E6%97%A0%E6%B3%95%E9%AA%8C%E8%AF%81%E4%B9%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><img src="/uploads/andrew-liu-2nx1Z70CT8I-unsplash.jpg" alt="avatar"></p>
<blockquote>
<p>操作背景是因为，群晖使用了好多年没有进行升级，然后，苹果手机今天突然清理了数据，将手机的上的大部 app 和验证软件都清除了，导致，群晖登录需要验证，而又无法验证的问题出现。当时，我手头能使用的信息只有 admin 用户和这个用户对应的登录密码。什么双因素的 app 和邮箱什么的都没有。因为就想能否通过 ssh 的方案，通过局域网连接群晖，实现超级登录，然后修改对应的配置文件的目的，说干就干！</p>
</blockquote>
<h4 id="解决方案：">解决方案：</h4>
<p>针对这个问题的解决方案就是使用 ssh 远程局域网登录群晖，命令和示例如下，端口号可以不添加。</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>ssh root@DSM/SRM IP 地址 -p SSH 端口号</td>
<td>ssh <a href="mailto:root@10.17.2.5">root@10.17.2.5</a> -p 22</td>
</tr>
</tbody>
</table>
<h4 id="配置文件的路径">配置文件的路径</h4>
<p>连接上 root 之后就寻找配置文件的所在位置，然后结合 vim 工具编辑修改文件的配置，以达到关闭双因素验证的目的。<br>
<img src="/images/image.png" alt="alt text"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/usr/syno/etc/packages/<span class="title class_">SecureSignIn</span>/preference/</span><br></pre></td></tr></table></figure>
<p>在上面的这个目录里，你就能找到自己的 root 账户对应的文件夹，然后进入文件夹进行，找到 method.conf 文件，使用 vi 进行编辑操作，修改配置。<img src="/images/image-1.png" alt="alt text"><br>
图片中的开关项，目前已经是 off 状态了，被我修改了，这样保存后基本就解决问题了。如果你的 root 目录下还有一个 authenticator_cred，也请将它删除。这样就可以了彻底解决问题了。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>研发</tag>
        <tag>群晖</tag>
      </tags>
  </entry>
</search>
